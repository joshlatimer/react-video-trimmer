!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["exports","react","prop-types"],t):t((e=e||self).reactVideoTrimmer={},e.React,e.PropTypes)}(this,function(e,ae,f){"use strict";var P="default"in ae?ae.default:ae;function u(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function v(l){return function(){var e=this,i=arguments;return new Promise(function(t,n){var r=l.apply(e,i);function o(e){u(r,t,n,o,a,"next",e)}function a(e){u(r,t,n,o,a,"throw",e)}o(void 0)})}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function p(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?y(e):t}f=f&&f.hasOwnProperty("default")?f.default:f;function a(r,e){var o=1<arguments.length&&void 0!==e?e:"ArrayBuffer";return new Promise(function(e,t){var n=new FileReader;n["readAs"+o](r),n.onload=function(){return e(n.result)},n.onerror=function(e){return t(e)}})}function m(){}function g(e){return new Blob([new Uint8Array(e,0,e.byteLength)],{type:"video/webm",name:"video.webm"})}function b(e){var t=e.className;return P.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"}),P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}))}function w(e){var t=e.className;return P.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M15 6H3v2h12V6zm0 4H3v2h12v-2zM3 16h8v-2H3v2zM17 6v8.18c-.31-.11-.65-.18-1-.18-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3V8h3V6h-5z"}))}function E(e){var t=e.className;return P.createElement("svg",{className:t,height:"24",viewBox:"0 0 24 24",width:"24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"}))}function k(e){var t=e.className;return P.createElement("svg",{className:t,height:"24",viewBox:"0 0 24 24",width:"24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M9 16h2V8H9v8zm3-14C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm1-4h2V8h-2v8z"}))}function O(e){var t=e.className;return P.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z"}))}function _(e){var t=e.className;return P.createElement("svg",{className:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 42 42"},P.createElement("path",{d:"M21 37c-4.3 0-8.3-1.7-11.3-4.7S5 25.3 5 21c0-3 .8-6 2.5-8.5C9 10 11.2 8 13.8 6.7l1.3 2.7c-2.1 1.1-3.9 2.7-5.2 4.7-1.3 2.1-2 4.5-2 6.9 0 7.2 5.8 13 13 13s13-5.8 13-13c0-2.5-.7-4.9-2-6.9s-3.1-3.6-5.2-4.7L28 6.7c2.8 1.3 5 3.3 6.5 5.8C36.2 15 37 18 37 21c0 4.3-1.7 8.3-4.7 11.3S25.3 37 21 37z"}))}function S(e){var t=e.className;return P.createElement("svg",{className:t,xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor"},P.createElement("path",{fill:"#fff",d:"M12 14l9-5-9-5-9 5 9 5z"}),P.createElement("path",{fill:"#fff",d:"M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"}),P.createElement("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"}))}function D(e){var t=b;switch(e.name){case"music":t=w;break;case"play":t=E;break;case"pause":t=k;break;case"replay":t=O;break;case"spin":t=_;break;case"changespeed":EL=S;break;default:t=b}return P.createElement(t,{className:"rvt-icon rat-icon-".concat(e.name," ").concat(e.className).trim()})}function T(a,i,l,u){return new(l=l||Promise)(function(e,t){function n(e){try{o(u.next(e))}catch(e){t(e)}}function r(e){try{o(u.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new l(function(e){e(t.value)}).then(n,r)}o((u=u.apply(a,i||[])).next())})}function j(n,r){var o,a,i,e,l={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return e={next:t(0),throw:t(1),return:t(2)},"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;l;)try{if(o=1,a&&(i=2&t[0]?a.return:t[0]?a.throw||((i=a.return)&&i.call(a),0):a.next)&&!(i=i.call(a,t[1])).done)return i;switch(a=0,i&&(t=[2&t[0],i.value]),t[0]){case 0:case 1:i=t;break;case 4:return l.label++,{value:t[1],done:!1};case 5:l.label++,a=t[1],t=[0];continue;case 7:t=l.ops.pop(),l.trys.pop();continue;default:if(!(i=0<(i=l.trys).length&&i[i.length-1])&&(6===t[0]||2===t[0])){l=0;continue}if(3===t[0]&&(!i||t[1]>i[0]&&t[1]<i[3])){l.label=t[1];break}if(6===t[0]&&l.label<i[1]){l.label=i[1],i=t;break}if(i&&l.label<i[2]){l.label=i[2],l.ops.push(t);break}i[2]&&l.ops.pop(),l.trys.pop();continue}t=r.call(n,l)}catch(e){t=[6,e],a=0}finally{o=i=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}}function R(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||0<t--)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}function x(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(R(arguments[t]));return e}D.propTypes={name:f.string};var C=new Map([["avi","video/avi"],["gif","image/gif"],["ico","image/x-icon"],["jpeg","image/jpeg"],["jpg","image/jpeg"],["mkv","video/x-matroska"],["mov","video/quicktime"],["mp4","video/mp4"],["pdf","application/pdf"],["png","image/png"],["zip","application/zip"],["doc","application/msword"],["docx","application/vnd.openxmlformats-officedocument.wordprocessingml.document"]]);function L(e,t){var n=function(e){var t=e.name;if(t&&-1!==t.lastIndexOf(".")&&!e.type){var n=t.split(".").pop().toLowerCase(),r=C.get(n);r&&Object.defineProperty(e,"type",{value:r,writable:!1,configurable:!1,enumerable:!0})}return e}(e);if("string"!=typeof n.path){var r=e.webkitRelativePath;Object.defineProperty(n,"path",{value:"string"==typeof t?t:"string"==typeof r&&0<r.length?r:e.name,writable:!1,configurable:!1,enumerable:!0})}return n}var t=[".DS_Store","Thumbs.db"];function ie(t){return T(this,void 0,void 0,function(){return j(this,function(e){return[2,function(e){return!!e.dataTransfer}(t)&&t.dataTransfer?function(n,r){return T(this,void 0,void 0,function(){var t;return j(this,function(e){switch(e.label){case 0:return n.items?(t=F(n.items).filter(function(e){return"file"===e.kind}),"drop"!==r?[2,t]:[4,Promise.all(t.map(A))]):[3,2];case 1:return[2,M(function n(e){return e.reduce(function(e,t){return x(e,Array.isArray(t)?n(t):[t])},[])}(e.sent()))];case 2:return[2,M(F(n.files).map(function(e){return L(e)}))]}})})}(t.dataTransfer,t.type):function(e){return(function(e){return null!==e}(e.target)&&e.target.files?F(e.target.files):[]).map(function(e){return L(e)})}(t)]})})}function M(e){return e.filter(function(e){return-1===t.indexOf(e.name)})}function F(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];t.push(r)}return t}function A(e){if("function"!=typeof e.webkitGetAsEntry)return V(e);var t=e.webkitGetAsEntry();return t&&t.isDirectory?N(t):V(e)}function V(e){var t=e.getAsFile();if(!t)return Promise.reject(e+" is not a File");var n=L(t);return Promise.resolve(n)}function I(t){return T(this,void 0,void 0,function(){return j(this,function(e){return[2,t.isDirectory?N(t):function(r){return T(this,void 0,void 0,function(){return j(this,function(e){return[2,new Promise(function(n,t){r.file(function(e){var t=L(e,r.fullPath);n(t)},function(e){t(e)})})]})})}(t)]})})}function N(e){var t=e.createReader();return new Promise(function(i,l){var u=[];!function a(){var e=this;t.readEntries(function(o){return T(e,void 0,void 0,function(){var t,n,r;return j(this,function(e){switch(e.label){case 0:if(o.length)return[3,5];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,Promise.all(u)];case 2:return t=e.sent(),i(t),[3,4];case 3:return n=e.sent(),l(n),[3,4];case 4:return[3,6];case 5:r=Promise.all(o.map(I)),u.push(r),a(),e.label=6;case 6:return[2]}})})},function(e){l(e)})}()})}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function B(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function U(e,t){return e(t={exports:{}},t.exports),t.exports}var W=B(U(function(e){function r(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var n,o;e.exports=(o={},r.m=n=[function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){var n=e.exports={version:"2.5.0"};"number"==typeof __e&&(__e=n)},function(e,t,n){e.exports=!n(4)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(32)("wks"),o=n(9),a=n(0).Symbol,i="function"==typeof a;(e.exports=function(e){return r[e]||(r[e]=i&&a[e]||(i?a:o)("Symbol."+e))}).store=r},function(e,t,n){var h=n(0),m=n(2),v=n(8),g=n(22),b=n(10),w=function(e,t,n){var r,o,a,i,l=e&w.F,u=e&w.G,s=e&w.S,c=e&w.P,p=e&w.B,f=u?h:s?h[t]||(h[t]={}):(h[t]||{}).prototype,d=u?m:m[t]||(m[t]={}),y=d.prototype||(d.prototype={});for(r in u&&(n=t),n)a=((o=!l&&f&&void 0!==f[r])?f:n)[r],i=p&&o?b(a,h):c&&"function"==typeof a?b(Function.call,a):a,f&&g(f,r,a,e&w.U),d[r]!=a&&v(d,r,i),c&&y[r]!=a&&(y[r]=a)};h.core=m,w.F=1,w.G=2,w.S=4,w.P=8,w.B=16,w.W=32,w.U=64,w.R=128,e.exports=w},function(e,t,n){var r=n(16),o=n(21);e.exports=n(3)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var a=n(24);e.exports=function(r,o,e){if(a(r),void 0===o)return r;switch(e){case 1:return function(e){return r.call(o,e)};case 2:return function(e,t){return r.call(o,e,t)};case 3:return function(e,t,n){return r.call(o,e,t,n)}}return function(){return r.apply(o,arguments)}}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(28),o=Math.min;e.exports=function(e){return 0<e?o(r(e),9007199254740991):0}},function(e,t,n){t.__esModule=!0,t.default=function(e,t){if(e&&t){var n=Array.isArray(t)?t:t.split(","),r=e.name||"",o=e.type||"",a=o.replace(/\/.*$/,"");return n.some(function(e){var t=e.trim();return"."===t.charAt(0)?r.toLowerCase().endsWith(t.toLowerCase()):t.endsWith("/*")?a===t.replace(/\/.*$/,""):o===t})}return!0},n(14),n(34)},function(e,t,n){n(15),e.exports=n(2).Array.some},function(e,t,n){var r=n(7),o=n(25)(3);r(r.P+r.F*!n(33)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(17),o=n(18),a=n(20),i=Object.defineProperty;t.f=n(3)?Object.defineProperty:function(e,t,n){if(r(e),t=a(t,!0),r(n),o)try{return i(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(1);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){e.exports=!n(3)&&!n(4)(function(){return 7!=Object.defineProperty(n(19)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(1),o=n(0).document,a=r(o)&&r(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,n){var o=n(1);e.exports=function(e,t){if(!o(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!o(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var a=n(0),i=n(8),l=n(23),u=n(9)("src"),r=Function.toString,s=(""+r).split("toString");n(2).inspectSource=function(e){return r.call(e)},(e.exports=function(e,t,n,r){var o="function"==typeof n;o&&(l(n,"name")||i(n,"name",t)),e[t]!==n&&(o&&(l(n,u)||i(n,u,e[t]?""+e[t]:s.join(String(t)))),e===a?e[t]=n:r?e[t]?e[t]=n:i(e,t,n):(delete e[t],i(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||r.call(this)})},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var b=n(10),w=n(26),P=n(27),E=n(12),r=n(29);e.exports=function(p,e){var f=1==p,d=2==p,y=3==p,h=4==p,m=6==p,v=5==p||m,g=e||r;return function(e,t,n){for(var r,o,a=P(e),i=w(a),l=b(t,n,3),u=E(i.length),s=0,c=f?g(e,u):d?g(e,0):void 0;s<u;s++)if((v||s in i)&&(o=l(r=i[s],s,a),p))if(f)c[s]=o;else if(o)switch(p){case 3:return!0;case 5:return r;case 6:return s;case 2:c.push(r)}else if(h)return!1;return m?-1:y||h?h:c}}},function(e,t,n){var r=n(5);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(11);e.exports=function(e){return Object(r(e))}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(0<e?r:n)(e)}},function(e,t,n){var r=n(30);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){var r=n(1),o=n(31),a=n(6)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[a])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){var r=n(5);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(0),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});e.exports=function(e){return o[e]||(o[e]={})}},function(e,t,n){var r=n(4);e.exports=function(e,t){return!!e&&r(function(){t?e.call(null,function(){},1):e.call(null)})}},function(e,t,n){n(35),e.exports=n(2).String.endsWith},function(e,t,n){var r=n(7),i=n(12),l=n(36),u="".endsWith;r(r.P+r.F*n(38)("endsWith"),"String",{endsWith:function(e){var t=l(this,e,"endsWith"),n=1<arguments.length?arguments[1]:void 0,r=i(t.length),o=void 0===n?r:Math.min(i(n),r),a=String(e);return u?u.call(t,a,o):t.slice(o-a.length,o)===a}})},function(e,t,n){var r=n(37),o=n(11);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},function(e,t,n){var r=n(1),o=n(5),a=n(6)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[a])?!!t:"RegExp"==o(e))}},function(e,t,n){var r=n(6)("match");e.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}}],r.c=o,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=13))}));function le(e,t){return"application/x-moz-file"===e.type||W(e,t)}function ue(e){return"function"==typeof e.isPropagationStopped?e.isPropagationStopped():void 0!==e.cancelBubble&&e.cancelBubble}function se(e){return e.dataTransfer?Array.prototype.some.call(e.dataTransfer.types,function(e){return"Files"===e||"application/x-moz-file"===e}):!!e.target&&!!e.target.files}function ce(e){e.preventDefault()}function pe(){for(var e=arguments.length,o=new Array(e),t=0;t<e;t++)o[t]=arguments[t];return function(t){for(var e=arguments.length,n=new Array(1<e?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return o.some(function(e){return!ue(t)&&e&&e.apply(void 0,[t].concat(n)),ue(t)})}}function fe(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function de(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function ye(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(e){he(t,e,n[e])})}return t}function he(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function z(e){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function me(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],0<=t.indexOf(n)||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],0<=t.indexOf(n)||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var G=ae.forwardRef(function(e,t){var n=e.children,r=function(){function t(){C.current&&(F({type:"openDialog"}),C.current.value=null,C.current.click())}function e(){V&&setTimeout(function(){C.current&&(C.current.files.length||(F({type:"closeDialog"}),"function"==typeof w&&w()))},300)}var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},i=n.accept,r=n.disabled,f=void 0!==r&&r,o=n.getFilesFromEvent,a=void 0===o?ie:o,l=n.maxSize,u=void 0===l?1/0:l,s=n.minSize,c=void 0===s?0:s,p=n.multiple,d=void 0===p||p,y=n.onDragEnter,h=n.onDragLeave,m=n.onDragOver,v=n.onDrop,g=n.onDropAccepted,b=n.onDropRejected,w=n.onFileDialogCancel,P=n.preventDropOnDocument,E=void 0===P||P,k=n.noClick,O=void 0!==k&&k,_=n.noKeyboard,S=void 0!==_&&_,D=n.noDrag,T=void 0!==D&&D,j=n.noDragEventsBubbling,R=void 0!==j&&j,x=ae.useRef(null),C=ae.useRef(null),L=de(ae.useReducer(ge,ve),2),M=L[0],F=L[1],A=M.isFocused,V=M.isFileDialogActive,I=M.draggedFiles;ae.useEffect(function(){return window.addEventListener("focus",e,!1),function(){window.removeEventListener("focus",e,!1)}},[C,V,w]);function N(e){x.current&&x.current.contains(e.target)||(e.preventDefault(),G.current=[])}var B=ae.useCallback(function(e){x.current&&x.current.isEqualNode(e.target)&&(32!==e.keyCode&&13!==e.keyCode||(e.preventDefault(),t()))},[x,C]),U=ae.useCallback(function(){F({type:"focus"})},[]),W=ae.useCallback(function(){F({type:"blur"})},[]),z=ae.useCallback(function(){O||(!function(e){var t=0<arguments.length&&void 0!==e?e:window.navigator.userAgent;return function(e){return-1!==e.indexOf("MSIE")||-1!==e.indexOf("Trident/")}(t)||function(e){return-1!==e.indexOf("Edge/")}(t)}()?t():setTimeout(t,0))},[C,O]),G=ae.useRef([]);ae.useEffect(function(){return E&&(document.addEventListener("dragover",ce,!1),document.addEventListener("drop",N,!1)),function(){E&&(document.removeEventListener("dragover",ce),document.removeEventListener("drop",N))}},[x,E]);function H(e){return f?null:e}function Y(e){return S?null:H(e)}function K(e){return T?null:H(e)}var q=ae.useCallback(function(t){t.preventDefault(),t.persist(),J(t),-1===G.current.indexOf(t.target)&&(G.current=[].concat(fe(G.current),[t.target])),se(t)&&Promise.resolve(a(t)).then(function(e){ue(t)&&!R||(F({draggedFiles:e,isDragActive:!0,type:"setDraggedFiles"}),y&&y(t))})},[a,y,R]),$=ae.useCallback(function(e){if(e.preventDefault(),e.persist(),J(e),e.dataTransfer)try{e.dataTransfer.dropEffect="copy"}catch(e){}return se(e)&&m&&m(e),!1},[m,R]),X=ae.useCallback(function(t){t.preventDefault(),t.persist(),J(t);var e=G.current.filter(function(e){return e!==t.target&&x.current&&x.current.contains(e)});0<(G.current=e).length||(F({isDragActive:!1,type:"setDraggedFiles",draggedFiles:[]}),se(t)&&h&&h(t))},[x,h,R]),Z=ae.useCallback(function(r){r.preventDefault(),r.persist(),J(r),G.current=[],F({type:"reset"}),se(r)&&Promise.resolve(a(r)).then(function(e){if(!ue(r)||R){var t=[],n=[];e.forEach(function(e){le(e,i)&&function(e,t,n){return e.size<=t&&e.size>=n}(e,u,c)?t.push(e):n.push(e)}),!d&&1<t.length&&n.push.apply(n,fe(t.splice(0))),F({acceptedFiles:t,rejectedFiles:n,type:"setFiles"}),v&&v(t,n,r),0<n.length&&b&&b(n,r),0<t.length&&g&&g(t,r)}})},[d,i,c,u,a,v,g,b,R]),J=function(e){R&&e.stopPropagation()},Q=ae.useMemo(function(){return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=e.refKey,n=void 0===t?"ref":t,r=e.onKeyDown,o=e.onFocus,a=e.onBlur,i=e.onClick,l=e.onDragEnter,u=e.onDragOver,s=e.onDragLeave,c=e.onDrop,p=me(e,["refKey","onKeyDown","onFocus","onBlur","onClick","onDragEnter","onDragOver","onDragLeave","onDrop"]);return ye(he({onKeyDown:Y(pe(r,B)),onFocus:Y(pe(o,U)),onBlur:Y(pe(a,W)),onClick:H(pe(i,z)),onDragEnter:K(pe(l,q)),onDragOver:K(pe(u,$)),onDragLeave:K(pe(s,X)),onDrop:K(pe(c,Z))},n,x),f||S?{}:{tabIndex:0},p)}},[x,B,U,W,z,q,$,X,Z,S,T,f]),ee=ae.useCallback(function(e){e.stopPropagation()},[]),te=ae.useMemo(function(){return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=e.refKey,n=void 0===t?"ref":t,r=e.onChange,o=e.onClick,a=me(e,["refKey","onChange","onClick"]);return ye({},he({accept:i,multiple:d,type:"file",style:{display:"none"},onChange:H(pe(r,Z)),onClick:H(pe(o,ee)),autoComplete:"off",tabIndex:-1},n,C),a)}},[C,i,d,Z,f]),ne=I.length,re=d||ne<=1,oe=0<ne&&function(e,t){return e.every(function(e){return le(e,t)})}(I,i);return ye({},M,{isDragAccept:oe,isDragReject:0<ne&&(!oe||!re),isFocused:A&&!f,getRootProps:Q,getInputProps:te,rootRef:x,inputRef:C,open:H(t)})}(me(e,["children"])),o=r.open,a=me(r,["open"]);return ae.useEffect(function(){return"function"==typeof t?t({open:o}):"object"===z(t)&&null!==t&&(t.current={open:o}),function(){"function"==typeof t?t(null):"object"===z(t)&&null!==t&&(t.current=null)}},[t]),P.createElement(ae.Fragment,null,n(ye({},a,{open:o})))});G.displayName="Dropzone";var ve={isFocused:!(G.propTypes={children:f.func,accept:f.oneOfType([f.string,f.arrayOf(f.string)]),multiple:f.bool,preventDropOnDocument:f.bool,noClick:f.bool,noKeyboard:f.bool,noDrag:f.bool,noDragEventsBubbling:f.bool,minSize:f.number,maxSize:f.number,disabled:f.bool,getFilesFromEvent:f.func,onFileDialogCancel:f.func,onDragEnter:f.func,onDragLeave:f.func,onDragOver:f.func,onDrop:f.func,onDropAccepted:f.func,onDropRejected:f.func}),isFileDialogActive:!1,isDragActive:!1,isDragAccept:!1,isDragReject:!1,draggedFiles:[],acceptedFiles:[],rejectedFiles:[]};function ge(e,t){switch(t.type){case"focus":return ye({},e,{isFocused:!0});case"blur":return ye({},e,{isFocused:!1});case"openDialog":return ye({},e,{isFileDialogActive:!0});case"closeDialog":return ye({},e,{isFileDialogActive:!1});case"setDraggedFiles":var n=t.isDragActive;return ye({},e,{draggedFiles:t.draggedFiles,isDragActive:n});case"setFiles":return ye({},e,{acceptedFiles:t.acceptedFiles,rejectedFiles:t.rejectedFiles});case"reset":return ye({},e,{isFileDialogActive:!1,isDragActive:!1,draggedFiles:[]});default:return e}}function H(n){function o(e){return Math.round(e/1e6)}var e=ae.useCallback(function(e){if(e.length){var t=e[0];(n.onFileSelected||m)(t)}},[]),a=n.maxSize||10000024,i=n.minSize||0;return P.createElement(G,{onDrop:e,maxSize:a,minSize:i,accept:"video/*"},function(e){var t=e.getRootProps,n=e.getInputProps,r=e.isDragActive;return P.createElement("div",l({},t(),{className:"rvt-file-picker"}),P.createElement(D,{name:"music"}),P.createElement("input",n()),r?P.createElement("p",null,"Drop the video here ..."):P.createElement(P.Fragment,null,P.createElement("p",null,"Drag 'n' drop a video here, or click to select one"),P.createElement("p",null,P.createElement("small",null,"(",o(i)," - ",o(a),"MB)"))))})}function Y(e){var t=e.children;return P.createElement("div",{className:"rvt-status"},t)}function K(e,t,n){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("script");"function"==typeof t&&(n=t,t={}),t=t||{},n=n||function(){},o.type=t.type||"text/javascript",o.charset=t.charset||"utf8",o.async=!("async"in t)||!!t.async,o.src=e,t.attrs&&function(e,t){for(var n in t)e.setAttribute(n,t[n])}(o,t.attrs),t.text&&(o.text=""+t.text),("onload"in o?q:$)(o,n),o.onload||q(o,n),r.appendChild(o)}function q(e,t){e.onload=function(){this.onerror=this.onload=null,t(null,e)},e.onerror=function(){this.onerror=this.onload=null,t(new Error("Failed to load "+this.src),e)}}function $(e,t){e.onreadystatechange=function(){"complete"!=this.readyState&&"loaded"!=this.readyState||(this.onreadystatechange=null,t(null,e))}}var X=U(function(e,t){function i(e,t){return!1!==t.clone&&t.isMergeableObject(e)?s(function(e){return Array.isArray(e)?[]:{}}(e),e,t):e}function l(e,t,n){return e.concat(t).map(function(e){return i(e,n)})}function a(e){return Object.keys(e).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter(function(e){return t.propertyIsEnumerable(e)}):[]}(e))}function u(t,n,r){var o={};return r.isMergeableObject(t)&&a(t).forEach(function(e){o[e]=i(t[e],r)}),a(n).forEach(function(e){r.isMergeableObject(n[e])&&t[e]?o[e]=function(e,t){if(!t.customMerge)return s;var n=t.customMerge(e);return"function"==typeof n?n:s}(e,r)(t[e],n[e],r):o[e]=i(n[e],r)}),o}function s(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||l,n.isMergeableObject=n.isMergeableObject||c;var r=Array.isArray(t),o=Array.isArray(e),a=r===o;return a?r?n.arrayMerge(e,t,n):u(e,t,n):i(t,n)}var c,n;e.exports=(c=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===n}(e)}(e)},n="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103,s.all=function(e,n){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,t){return s(e,t,n)},{})},s)}),Z=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DEPRECATED_CONFIG_PROPS=t.defaultProps=t.propTypes=void 0;var n,r=(n=f)&&n.__esModule?n:{default:n};var o=r.default.string,a=r.default.bool,i=r.default.number,l=r.default.array,u=r.default.oneOfType,s=r.default.shape,c=r.default.object,p=r.default.func;t.propTypes={url:u([o,l,c]),playing:a,loop:a,controls:a,volume:i,muted:a,playbackRate:i,width:u([o,i]),height:u([o,i]),style:c,progressInterval:i,playsinline:a,pip:a,light:u([a,o]),wrapper:u([o,p,s({render:p.isRequired})]),config:s({soundcloud:s({options:c,preload:a}),youtube:s({playerVars:c,embedOptions:c,preload:a}),facebook:s({appId:o}),dailymotion:s({params:c,preload:a}),vimeo:s({playerOptions:c,preload:a}),file:s({attributes:c,tracks:l,forceVideo:a,forceAudio:a,forceHLS:a,forceDASH:a,hlsOptions:c,hlsVersion:o,dashVersion:o}),wistia:s({options:c}),mixcloud:s({options:c}),twitch:s({options:c})}),onReady:p,onStart:p,onPlay:p,onPause:p,onBuffer:p,onBufferEnd:p,onEnded:p,onError:p,onDuration:p,onSeek:p,onProgress:p,onEnablePIP:p,onDisablePIP:p},t.defaultProps={playing:!1,loop:!1,controls:!1,volume:null,muted:!1,playbackRate:1,width:"640px",height:"360px",style:{},progressInterval:1e3,playsinline:!1,pip:!1,light:!1,wrapper:"div",config:{soundcloud:{options:{visual:!0,buying:!1,liking:!1,download:!1,sharing:!1,show_comments:!1,show_playcount:!1}},youtube:{playerVars:{playsinline:1,showinfo:0,rel:0,iv_load_policy:3,modestbranding:1},embedOptions:{},preload:!1},facebook:{appId:"1309697205772819"},dailymotion:{params:{api:1,"endscreen-enable":!1},preload:!1},vimeo:{playerOptions:{autopause:!1,byline:!1,portrait:!1,title:!1},preload:!1},file:{attributes:{},tracks:[],forceVideo:!1,forceAudio:!1,forceHLS:!1,forceDASH:!1,hlsOptions:{},hlsVersion:"0.10.1",dashVersion:"2.9.2"},wistia:{options:{}},mixcloud:{options:{hide_cover:1}},twitch:{options:{}}},onReady:function(){},onStart:function(){},onPlay:function(){},onPause:function(){},onBuffer:function(){},onBufferEnd:function(){},onEnded:function(){},onError:function(){},onDuration:function(){},onSeek:function(){},onProgress:function(){},onEnablePIP:function(){},onDisablePIP:function(){}},t.DEPRECATED_CONFIG_PROPS=["soundcloudConfig","youtubeConfig","facebookConfig","dailymotionConfig","vimeoConfig","fileConfig","wistiaConfig"]});B(Z);Z.DEPRECATED_CONFIG_PROPS,Z.defaultProps,Z.propTypes;var J=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.parseStartTime=function(e){return c(e,a)},t.parseEndTime=function(e){return c(e,l)},t.randomString=function(){return Math.random().toString(36).substr(2,5)},t.queryString=function(t){return Object.keys(t).map(function(e){return e+"="+t[e]}).join("&")},t.getSDK=function(o,a){var i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,e=3<arguments.length&&void 0!==arguments[3]?arguments[3]:function(){return!0},l=4<arguments.length&&void 0!==arguments[4]?arguments[4]:r.default;if(window[a]&&e(window[a]))return Promise.resolve(window[a]);return new Promise(function(e,t){if(p[o])p[o].push(e);else{p[o]=[e];var n=function(t){p[o].forEach(function(e){return e(t)})};if(i){var r=window[i];window[i]=function(){r&&r(),n(window[a])}}l(o,function(e){e&&t(e),i||n(window[a])})}})},t.getConfig=function(e,t,n){var r=(0,f.default)(t.config,e.config),o=!0,a=!1,i=void 0;try{for(var l,u=Z.DEPRECATED_CONFIG_PROPS[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;if(e[s]){var c=s.replace(/Config$/,"");if(r=(0,f.default)(r,d({},c,e[s])),n){var p="ReactPlayer: %c"+s+" %cis deprecated, please use the config prop instead – https://github.com/CookPete/react-player#config-prop";console.warn(p,"font-weight: bold","")}}}}catch(e){a=!0,i=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw i}}return r},t.omit=function(e){for(var t,n=arguments.length,r=Array(1<n?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var a=(t=[]).concat.apply(t,r),i={},l=Object.keys(e),u=!0,s=!1,c=void 0;try{for(var p,f=l[Symbol.iterator]();!(u=(p=f.next()).done);u=!0){var d=p.value;-1===a.indexOf(d)&&(i[d]=e[d])}}catch(e){s=!0,c=e}finally{try{!u&&f.return&&f.return()}finally{if(s)throw c}}return i},t.callPlayer=function(e){var t;if(!this.player||!this.player[e]){var n="ReactPlayer: "+this.constructor.displayName+" player could not call %c"+e+"%c – ";return this.player?this.player[e]||(n+="The method was not available"):n+="The player was not available",console.warn(n,"font-weight: bold",""),null}for(var r=arguments.length,o=Array(1<r?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return(t=this.player)[e].apply(t,o)},t.isObject=y,t.isEqual=function e(t,n){if("function"==typeof t&&"function"==typeof n)return!0;if(t instanceof Array&&n instanceof Array){if(t.length!==n.length)return!1;for(var r=0;r!==t.length;r++)if(!e(t[r],n[r]))return!1;return!0}if(y(t)&&y(n)){if(Object.keys(t).length!==Object.keys(n).length)return!1;var o=!0,a=!1,i=void 0;try{for(var l,u=Object.keys(t)[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;if(!e(t[s],n[s]))return!1}}catch(e){a=!0,i=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw i}}return!0}return t===n},t.isMediaStream=function(e){return"undefined"!=typeof window&&void 0!==window.MediaStream&&e instanceof window.MediaStream};var r=o(K),f=o(X);function o(e){return e&&e.__esModule?e:{default:e}}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=/[?&#](?:start|t)=([0-9hms]+)/,l=/[?&#]end=([0-9hms]+)/,u=/(\d+)(h|m|s)/g,s=/^\d+$/;function c(e,t){var n=e.match(t);if(n){var r=n[1];if(r.match(u))return function(e){var t=0,n=u.exec(e);for(;null!==n;){var r=i(n,3),o=r[1],a=r[2];"h"===a&&(t+=60*parseInt(o,10)*60),"m"===a&&(t+=60*parseInt(o,10)),"s"===a&&(t+=parseInt(o,10)),n=u.exec(e)}return t}(r);if(s.test(r))return parseInt(r)}}var p={};function y(e){return null!==e&&"object"===(void 0===e?"undefined":n(e))}});B(J);J.parseStartTime,J.parseEndTime,J.randomString,J.queryString,J.getSDK,J.getConfig,J.omit,J.callPlayer,J.isObject,J.isEqual,J.isMediaStream;var Q=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a,i=(a=P)&&a.__esModule?a:{default:a};function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,P.Component),r(s,[{key:"componentDidMount",value:function(){this.mounted=!0,this.player.load(this.props.url),this.progress()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.progressTimeout),clearTimeout(this.durationCheckTimeout),this.isReady&&this.player.stop(),this.player.disablePIP&&this.player.disablePIP(),this.mounted=!1}},{key:"componentWillReceiveProps",value:function(e){var t=this,n=this.props,r=n.url,o=n.playing,a=n.volume,i=n.muted,l=n.playbackRate,u=n.pip,s=n.loop;if(!(0,J.isEqual)(r,e.url)){if(this.isLoading)return console.warn("ReactPlayer: the attempt to load "+e.url+" is being deferred until the player has loaded"),void(this.loadOnReady=e.url);this.isLoading=!0,this.startOnPlay=!0,this.onDurationCalled=!1,this.player.load(e.url,this.isReady)}o||!e.playing||this.isPlaying||this.player.play(),o&&!e.playing&&this.isPlaying&&this.player.pause(),!u&&e.pip&&this.player.enablePIP?this.player.enablePIP():u&&!e.pip&&this.player.disablePIP&&this.player.disablePIP(),a!==e.volume&&null!==e.volume&&this.player.setVolume(e.volume),i!==e.muted&&(e.muted?this.player.mute():(this.player.unmute(),null!==e.volume&&setTimeout(function(){return t.player.setVolume(e.volume)}))),l!==e.playbackRate&&this.player.setPlaybackRate&&this.player.setPlaybackRate(e.playbackRate),s!==e.loop&&this.player.setLoop&&this.player.setLoop(e.loop)}},{key:"getDuration",value:function(){return this.isReady?this.player.getDuration():null}},{key:"getCurrentTime",value:function(){return this.isReady?this.player.getCurrentTime():null}},{key:"getSecondsLoaded",value:function(){return this.isReady?this.player.getSecondsLoaded():null}},{key:"seekTo",value:function(e,t){var n=this;if(!this.isReady&&0!==e)return this.seekOnPlay=e,void setTimeout(function(){n.seekOnPlay=null},5e3);if(t?"fraction"===t:0<e&&e<1){var r=this.player.getDuration();return r?void this.player.seekTo(r*e):void console.warn("ReactPlayer: could not seek using fraction – duration not yet available")}this.player.seekTo(e)}},{key:"render",value:function(){var e=this.props.activePlayer;return e?i.default.createElement(e,n({},this.props,{ref:this.ref,onReady:this.onReady,onPlay:this.onPlay,onPause:this.onPause,onEnded:this.onEnded,onLoaded:this.onLoaded,onError:this.onError})):null}}]),s);function s(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return t=n=l(this,(e=s.__proto__||Object.getPrototypeOf(s)).call.apply(e,[this].concat(o))),c.call(n),l(n,t)}u.displayName="Player",u.propTypes=Z.propTypes,u.defaultProps=Z.defaultProps;var c=function(){var a=this;this.mounted=!1,this.isReady=!1,this.isPlaying=!1,this.isLoading=!0,this.loadOnReady=null,this.startOnPlay=!0,this.seekOnPlay=null,this.onDurationCalled=!1,this.getInternalPlayer=function(e){return a.player?a.player[e]:null},this.progress=function(){if(a.props.url&&a.player&&a.isReady){var e=a.getCurrentTime()||0,t=a.getSecondsLoaded(),n=a.getDuration();if(n){var r={playedSeconds:e,played:e/n};null!==t&&(r.loadedSeconds=t,r.loaded=t/n),r.playedSeconds===a.prevPlayed&&r.loadedSeconds===a.prevLoaded||a.props.onProgress(r),a.prevPlayed=r.playedSeconds,a.prevLoaded=r.loadedSeconds}}a.progressTimeout=setTimeout(a.progress,a.props.progressFrequency||a.props.progressInterval)},this.onReady=function(){if(a.mounted){a.isReady=!0,a.isLoading=!1;var e=a.props,t=e.onReady,n=e.playing,r=e.volume,o=e.muted;t(),o||null===r||a.player.setVolume(r),a.loadOnReady?(a.player.load(a.loadOnReady,!0),a.loadOnReady=null):n&&a.player.play(),a.onDurationCheck()}},this.onPlay=function(){a.isPlaying=!0,a.isLoading=!1;var e=a.props,t=e.onStart,n=e.onPlay,r=e.playbackRate;a.startOnPlay&&(a.player.setPlaybackRate&&a.player.setPlaybackRate(r),t(),a.startOnPlay=!1),n(),a.seekOnPlay&&(a.seekTo(a.seekOnPlay),a.seekOnPlay=null),a.onDurationCheck()},this.onPause=function(e){a.isPlaying=!1,a.isLoading||a.props.onPause(e)},this.onEnded=function(){var e=a.props,t=e.activePlayer,n=e.loop,r=e.onEnded;t.loopOnEnded&&n&&a.seekTo(0),n||(a.isPlaying=!1,r())},this.onError=function(){var e;a.isLoading=!1,(e=a.props).onError.apply(e,arguments)},this.onDurationCheck=function(){clearTimeout(a.durationCheckTimeout);var e=a.getDuration();e?a.onDurationCalled||(a.props.onDuration(e),a.onDurationCalled=!0):a.durationCheckTimeout=setTimeout(a.onDurationCheck,100)},this.onLoaded=function(){a.isLoading=!1},this.ref=function(e){e&&(a.player=e)}};t.default=u});B(Q);var ee=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}t.default=function(f){var e,t;return t=e=function(){function i(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=i.__proto__||Object.getPrototypeOf(i)).call.apply(e,[this].concat(o)))).config=(0,J.getConfig)(n.props,Z.defaultProps,!0),n.getDuration=function(){return n.player?n.player.getDuration():null},n.getCurrentTime=function(){return n.player?n.player.getCurrentTime():null},n.getSecondsLoaded=function(){return n.player?n.player.getSecondsLoaded():null},n.getInternalPlayer=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"player";return n.player?n.player.getInternalPlayer(e):null},n.seekTo=function(e,t){if(!n.player)return null;n.player.seekTo(e,t)},n.ref=function(e){n.player=e},l(n,t)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,P.Component),n(i,[{key:"shouldComponentUpdate",value:function(e){return!(0,J.isEqual)(this.props,e)}},{key:"componentWillUpdate",value:function(e){this.config=(0,J.getConfig)(e,Z.defaultProps)}},{key:"render",value:function(){var e=this.config.file,t=e.forceVideo,n=e.forceAudio,r=e.forceHLS,o=e.forceDASH,a=t||n||r||o;if(!f.canPlay(this.props.url)&&!a)return null;var i=this.props,l=i.style,u=i.width,s=i.height,c=i.wrapper,p=(0,J.omit)(this.props,m,Z.DEPRECATED_CONFIG_PROPS);return y.default.createElement(c,d({style:d({},l,{width:u,height:s})},p),y.default.createElement(h.default,d({},this.props,{ref:this.ref,activePlayer:f,config:this.config})))}}]),i}(),e.displayName=f.displayName+"Player",e.propTypes=Z.propTypes,e.defaultProps=Z.defaultProps,e.canPlay=f.canPlay,t};var y=o(P),h=o(Q);function o(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=Object.keys(Z.propTypes)});B(ee);var te=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.YouTube=void 0;var h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},a=l(P),i=l(ee);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=/(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})|youtube\.com\/playlist\?list=/,v=/list=([a-zA-Z0-9_-]+)/;function g(e){if(v.test(e)){var t=e.match(v);return{listType:"playlist",list:o(t,2)[1]}}return{}}var s=t.YouTube=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"load",value:function(t,e){var n=this,r=this.props,o=r.playing,a=r.muted,i=r.playsinline,l=r.controls,u=r.loop,s=r.config,c=r.onError,p=s.youtube,f=p.playerVars,d=p.embedOptions,y=t&&t.match(m)[1];if(e)return v.test(t)?void this.player.loadPlaylist(g(t)):void this.player.cueVideoById({videoId:y,startSeconds:(0,J.parseStartTime)(t)||f.start,endSeconds:(0,J.parseEndTime)(t)||f.end});(0,J.getSDK)("https://www.youtube.com/iframe_api","YT","onYouTubeIframeAPIReady",function(e){return e.loaded}).then(function(e){n.container&&(n.player=new e.Player(n.container,h({width:"100%",height:"100%",videoId:y,playerVars:h({autoplay:o?1:0,mute:a?1:0,controls:l?1:0,start:(0,J.parseStartTime)(t),end:(0,J.parseEndTime)(t),origin:window.location.origin,playsinline:i},g(t),f),events:{onReady:function(){u&&n.player.setLoop(!0),n.props.onReady()},onStateChange:n.onStateChange,onError:function(e){return c(e.data)}}},d)))},c)}},{key:"play",value:function(){this.callPlayer("playVideo")}},{key:"pause",value:function(){this.callPlayer("pauseVideo")}},{key:"stop",value:function(){document.body.contains(this.callPlayer("getIframe"))&&this.callPlayer("stopVideo")}},{key:"seekTo",value:function(e){this.callPlayer("seekTo",e),this.props.playing||this.pause()}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("setPlaybackRate",e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentTime")}},{key:"getSecondsLoaded",value:function(){return this.callPlayer("getVideoLoadedFraction")*this.getDuration()}},{key:"render",value:function(){return a.default.createElement("div",{style:{width:"100%",height:"100%"}},a.default.createElement("div",{ref:this.ref}))}}]),c);function c(){var e,t,v;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=v=u(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(r)))).callPlayer=J.callPlayer,v.onStateChange=function(e){var t=e.data,n=v.props,r=n.onPlay,o=n.onPause,a=n.onBuffer,i=n.onBufferEnd,l=n.onEnded,u=n.onReady,s=n.loop,c=window.YT.PlayerState,p=c.PLAYING,f=c.PAUSED,d=c.BUFFERING,y=c.ENDED,h=c.CUED;if(t===p&&(r(),i()),t===f&&o(),t===d&&a(),t===y){var m=!!v.callPlayer("getPlaylist");s&&!m&&v.play(),l()}t===h&&u()},v.mute=function(){v.callPlayer("mute")},v.unmute=function(){v.callPlayer("unMute")},v.ref=function(e){v.container=e},u(v,t)}s.displayName="YouTube",s.canPlay=function(e){return m.test(e)},t.default=(0,i.default)(s)});B(te);te.YouTube;var ne=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.SoundCloud=void 0;var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(ee);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=/(soundcloud\.com|snd\.sc)\/.+$/,s=t.SoundCloud=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(p,P.Component),n(p,[{key:"load",value:function(l,u){var s=this;(0,J.getSDK)("https://w.soundcloud.com/player/api.js","SC").then(function(e){if(s.iframe){var t=e.Widget.Events,n=t.PLAY,r=t.PLAY_PROGRESS,o=t.PAUSE,a=t.FINISH,i=t.ERROR;u||(s.player=e.Widget(s.iframe),s.player.bind(n,s.props.onPlay),s.player.bind(o,s.props.onPause),s.player.bind(r,function(e){s.currentTime=e.currentPosition/1e3,s.fractionLoaded=e.loadedProgress}),s.player.bind(a,function(){return s.props.onEnded()}),s.player.bind(i,function(e){return s.props.onError(e)})),s.player.load(l,c({},s.props.config.soundcloud.options,{callback:function(){s.player.getDuration(function(e){s.duration=e/1e3,s.props.onReady()})}}))}})}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seekTo",1e3*e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.fractionLoaded*this.duration}},{key:"render",value:function(){return o.default.createElement("iframe",{ref:this.ref,src:"https://w.soundcloud.com/player/?url="+encodeURIComponent(this.props.url),style:{width:"100%",height:"100%"},frameBorder:0,allow:"autoplay"})}}]),p);function p(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=p.__proto__||Object.getPrototypeOf(p)).call.apply(e,[this].concat(o)))).callPlayer=J.callPlayer,n.duration=null,n.currentTime=null,n.fractionLoaded=null,n.mute=function(){n.setVolume(0)},n.unmute=function(){null!==n.props.volume&&n.setVolume(n.props.volume)},n.ref=function(e){n.iframe=e},l(n,t)}s.displayName="SoundCloud",s.canPlay=function(e){return u.test(e)},s.loopOnEnded=!0,t.default=(0,a.default)(s)});B(ne);ne.SoundCloud;var re=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Vimeo=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=l(P),i=l(ee);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=/vimeo\.com\/.+/,c=/vimeo\.com\/external\/[0-9]+\..+/,p=t.Vimeo=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,P.Component),n(f,[{key:"load",value:function(t){var n=this;this.duration=null,(0,J.getSDK)("https://player.vimeo.com/api/player.js","Vimeo").then(function(e){n.container&&(n.player=new e.Player(n.container,r({url:t,autoplay:n.props.playing,muted:n.props.muted,loop:n.props.loop,playsinline:n.props.playsinline},n.props.config.vimeo.playerOptions)),n.player.ready().then(function(){var e=n.container.querySelector("iframe");e.style.width="100%",e.style.height="100%"}).catch(n.props.onError),n.player.on("loaded",function(){n.props.onReady(),n.refreshDuration()}),n.player.on("play",function(){n.props.onPlay(),n.refreshDuration()}),n.player.on("pause",n.props.onPause),n.player.on("seeked",function(e){return n.props.onSeek(e.seconds)}),n.player.on("ended",n.props.onEnded),n.player.on("error",n.props.onError),n.player.on("timeupdate",function(e){var t=e.seconds;n.currentTime=t}),n.player.on("progress",function(e){var t=e.seconds;n.secondsLoaded=t}))},this.props.onError)}},{key:"refreshDuration",value:function(){var t=this;this.player.getDuration().then(function(e){t.duration=e})}},{key:"play",value:function(){var e=this.callPlayer("play");e&&e.catch(this.props.onError)}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){this.callPlayer("unload")}},{key:"seekTo",value:function(e){this.callPlayer("setCurrentTime",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.secondsLoaded}},{key:"render",value:function(){return a.default.createElement("div",{key:this.props.url,ref:this.ref,style:{width:"100%",height:"100%",overflow:"hidden",backgroundColor:"black"}})}}]),f);function f(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=u(this,(e=f.__proto__||Object.getPrototypeOf(f)).call.apply(e,[this].concat(o)))).callPlayer=J.callPlayer,n.duration=null,n.currentTime=null,n.secondsLoaded=null,n.mute=function(){n.setVolume(0)},n.unmute=function(){null!==n.props.volume&&n.setVolume(n.props.volume)},n.ref=function(e){n.container=e},u(n,t)}p.displayName="Vimeo",p.canPlay=function(e){return!c.test(e)&&s.test(e)},t.default=(0,i.default)(p)});B(re);re.Vimeo;var oe=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Facebook=void 0;var n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(ee);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u="//connect.facebook.net/en_US/sdk.js",s="fbAsyncInit",c=/facebook\.com\/([^/?].+\/)?video(s|\.php)[/?].*$/,p=t.Facebook=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,P.Component),n(f,[{key:"load",value:function(e,t){var n=this;t?(0,J.getSDK)(u,"FB",s).then(function(e){return e.XFBML.parse()}):(0,J.getSDK)(u,"FB",s).then(function(e){e.init({appId:n.props.config.facebook.appId,xfbml:!0,version:"v2.5"}),e.Event.subscribe("xfbml.render",function(e){n.props.onLoaded()}),e.Event.subscribe("xfbml.ready",function(e){"video"===e.type&&e.id===n.playerID&&(n.player=e.instance,n.player.subscribe("startedPlaying",n.props.onPlay),n.player.subscribe("paused",n.props.onPause),n.player.subscribe("finishedPlaying",n.props.onEnded),n.player.subscribe("startedBuffering",n.props.onBuffer),n.player.subscribe("finishedBuffering",n.props.onBufferEnd),n.player.subscribe("error",n.props.onError),n.props.muted||n.callPlayer("unmute"),n.props.onReady(),document.getElementById(n.playerID).querySelector("iframe").style.visibility="visible")})})}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentPosition")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%",backgroundColor:"black"},id:this.playerID,className:"fb-video","data-href":this.props.url,"data-autoplay":this.props.playing?"true":"false","data-allowfullscreen":"true","data-controls":this.props.controls?"true":"false"})}}]),f);function f(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=f.__proto__||Object.getPrototypeOf(f)).call.apply(e,[this].concat(o)))).callPlayer=J.callPlayer,n.playerID="facebook-player-"+(0,J.randomString)(),n.mute=function(){n.callPlayer("mute")},n.unmute=function(){n.callPlayer("unmute")},l(n,t)}p.displayName="Facebook",p.canPlay=function(e){return c.test(e)},p.loopOnEnded=!0,t.default=(0,a.default)(p)});B(oe);oe.Facebook;var be=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Streamable=void 0;var n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(ee);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=/streamable\.com\/([a-z0-9]+)$/,s=t.Streamable=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"load",value:function(e){var r=this;(0,J.getSDK)("//cdn.embed.ly/player-0.1.0.min.js","playerjs").then(function(e){r.iframe&&(r.player=new e.Player(r.iframe),r.player.setLoop(r.props.loop),r.player.on("ready",r.props.onReady),r.player.on("play",r.props.onPlay),r.player.on("pause",r.props.onPause),r.player.on("seeked",r.props.onSeek),r.player.on("ended",r.props.onEnded),r.player.on("error",r.props.onError),r.player.on("timeupdate",function(e){var t=e.duration,n=e.seconds;r.duration=t,r.currentTime=n}),r.player.on("buffered",function(e){var t=e.percent;r.duration&&(r.secondsLoaded=r.duration*t)}),r.props.muted&&r.player.mute())},this.props.onError)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("setCurrentTime",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.secondsLoaded}},{key:"render",value:function(){var e=this.props.url.match(u)[1];return o.default.createElement("iframe",{ref:this.ref,src:"https://streamable.com/o/"+e,frameBorder:"0",scrolling:"no",style:{width:"100%",height:"100%"},allowFullScreen:!0})}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).callPlayer=J.callPlayer,n.duration=null,n.currentTime=null,n.secondsLoaded=null,n.mute=function(){n.callPlayer("mute")},n.unmute=function(){n.callPlayer("unmute")},n.ref=function(e){n.iframe=e},l(n,t)}s.displayName="Streamable",s.canPlay=function(e){return u.test(e)},t.default=(0,a.default)(s)});B(be);be.Streamable;var we=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Wistia=void 0;var d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(ee);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=/(?:wistia\.com|wi\.st)\/(?:medias|embed)\/(.*)$/,s=t.Wistia=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"getID",value:function(e){return e&&e.match(u)[1]}},{key:"load",value:function(e){var t=this,n=this.props,r=n.playing,o=n.muted,a=n.controls,i=n.onReady,l=n.onPlay,u=n.onPause,s=n.onSeek,c=n.onEnded,p=n.config,f=n.onError;(0,J.getSDK)("//fast.wistia.com/assets/external/E-v1.js","Wistia").then(function(){window._wq=window._wq||[],window._wq.push({id:t.getID(e),options:d({autoPlay:r,silentAutoPlay:"allow",muted:o,controlsVisibleOnLoad:a},p.wistia.options),onReady:function(e){t.player=e,t.unbind(),t.player.bind("play",l),t.player.bind("pause",u),t.player.bind("seek",s),t.player.bind("end",c),i()}})},f)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"unbind",value:function(){var e=this.props,t=e.onPlay,n=e.onPause,r=e.onSeek,o=e.onEnded;this.player.unbind("play",t),this.player.unbind("pause",n),this.player.unbind("seek",r),this.player.unbind("end",o)}},{key:"stop",value:function(){this.unbind(),this.callPlayer("remove")}},{key:"seekTo",value:function(e){this.callPlayer("time",e)}},{key:"setVolume",value:function(e){this.callPlayer("volume",e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("playbackRate",e)}},{key:"getDuration",value:function(){return this.callPlayer("duration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("time")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){var e=this.getID(this.props.url),t="wistia_embed wistia_async_"+e;return o.default.createElement("div",{key:e,className:t,style:{width:"100%",height:"100%"}})}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).callPlayer=J.callPlayer,n.mute=function(){n.callPlayer("mute")},n.unmute=function(){n.callPlayer("unmute")},l(n,t)}s.displayName="Wistia",s.canPlay=function(e){return u.test(e)},s.loopOnEnded=!0,t.default=(0,a.default)(s)});B(we);we.Wistia;var Pe=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Twitch=void 0;var d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(ee);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var y=/(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/,h=/(?:www\.|go\.)?twitch\.tv\/([a-z0-9_]+)($|\?)/,u=t.Twitch=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,P.Component),n(s,[{key:"load",value:function(e,t){var u=this,n=this.props,s=n.playsinline,r=n.onError,c=n.config,p=h.test(e),f=p?e.match(h)[1]:e.match(y)[1];t?p?this.player.setChannel(f):this.player.setVideo("v"+f):(0,J.getSDK)("https://player.twitch.tv/js/embed/v1.js","Twitch").then(function(e){u.player=new e.Player(u.playerID,d({video:p?"":f,channel:p?f:"",height:"100%",width:"100%",playsinline:s,autoplay:u.props.playing,muted:u.props.muted},c.twitch.options));var t=e.Player,n=t.READY,r=t.PLAYING,o=t.PAUSE,a=t.ENDED,i=t.ONLINE,l=t.OFFLINE;u.player.addEventListener(n,u.props.onReady),u.player.addEventListener(r,u.props.onPlay),u.player.addEventListener(o,u.props.onPause),u.player.addEventListener(a,u.props.onEnded),u.player.addEventListener(i,u.props.onLoaded),u.player.addEventListener(l,u.props.onLoaded)},r)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){this.callPlayer("pause")}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentTime")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%"},id:this.playerID})}}]),s);function s(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=s.__proto__||Object.getPrototypeOf(s)).call.apply(e,[this].concat(o)))).callPlayer=J.callPlayer,n.playerID="twitch-player-"+(0,J.randomString)(),n.mute=function(){n.callPlayer("setMuted",!0)},n.unmute=function(){n.callPlayer("setMuted",!1)},l(n,t)}u.displayName="Twitch",u.canPlay=function(e){return y.test(e)||h.test(e)},u.loopOnEnded=!0,t.default=(0,a.default)(u)});B(Pe);Pe.Twitch;var Ee=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DailyMotion=void 0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(ee);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var p=/^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/,u=t.DailyMotion=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,P.Component),n(f,[{key:"load",value:function(n){var r=this,e=this.props,o=e.controls,a=e.config,i=e.onError,t=e.playing,l=n.match(p),u=c(l,2)[1];this.player?this.player.load(u,{start:(0,J.parseStartTime)(n),autoplay:t}):(0,J.getSDK)("https://api.dmcdn.net/all.js","DM","dmAsyncInit",function(e){return e.player}).then(function(e){if(r.container){var t=e.player;r.player=new t(r.container,{width:"100%",height:"100%",video:u,params:s({controls:o,autoplay:r.props.playing,mute:r.props.muted,start:(0,J.parseStartTime)(n),origin:window.location.origin},a.dailymotion.params),events:{apiready:r.props.onReady,seeked:function(){return r.props.onSeek(r.player.currentTime)},video_end:r.props.onEnded,durationchange:r.onDurationChange,pause:r.props.onPause,playing:r.props.onPlay,waiting:r.props.onBuffer,error:function(e){return i(e)}}})}},i)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.player.duration||null}},{key:"getCurrentTime",value:function(){return this.player.currentTime}},{key:"getSecondsLoaded",value:function(){return this.player.bufferedTime}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%",backgroundColor:"black"}},o.default.createElement("div",{ref:this.ref}))}}]),f);function f(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=f.__proto__||Object.getPrototypeOf(f)).call.apply(e,[this].concat(o)))).callPlayer=J.callPlayer,n.onDurationChange=function(){var e=n.getDuration();n.props.onDuration(e)},n.mute=function(){n.callPlayer("setMuted",!0)},n.unmute=function(){n.callPlayer("setMuted",!1)},n.ref=function(e){n.container=e},l(n,t)}u.displayName="DailyMotion",u.canPlay=function(e){return p.test(e)},u.loopOnEnded=!0,t.default=(0,a.default)(u)});B(Ee);Ee.DailyMotion;var ke=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Mixcloud=void 0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=l(P),o=l(ee);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=/mixcloud\.com\/([^/]+\/[^/]+)/,c=t.Mixcloud=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(p,P.Component),n(p,[{key:"load",value:function(e){var n=this;(0,J.getSDK)("//widget.mixcloud.com/media/js/widgetApi.js","Mixcloud").then(function(e){n.player=e.PlayerWidget(n.iframe),n.player.ready.then(function(){n.player.events.play.on(n.props.onPlay),n.player.events.pause.on(n.props.onPause),n.player.events.ended.on(n.props.onEnded),n.player.events.error.on(n.props.error),n.player.events.progress.on(function(e,t){n.currentTime=e,n.duration=t}),n.props.onReady()})},this.props.onError)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.config,r=t.match(s)[1],o=(0,J.queryString)(a({},n.mixcloud.options,{feed:"/"+r+"/"}));return i.default.createElement("iframe",{key:r,ref:this.ref,style:{width:"100%",height:"100%"},src:"https://www.mixcloud.com/widget/iframe/?"+o,frameBorder:"0"})}}]),p);function p(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=u(this,(e=p.__proto__||Object.getPrototypeOf(p)).call.apply(e,[this].concat(o)))).callPlayer=J.callPlayer,n.duration=null,n.currentTime=null,n.secondsLoaded=null,n.mute=function(){},n.unmute=function(){},n.ref=function(e){n.iframe=e},u(n,t)}c.displayName="Mixcloud",c.canPlay=function(e){return s.test(e)},c.loopOnEnded=!0,t.default=(0,o.default)(c)});B(ke);ke.Mixcloud;var Oe=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.FilePlayer=void 0;var p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=a(P),o=a(ee);function a(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l="undefined"!=typeof navigator&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,u=/\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i,s=/\.(mp4|og[gv]|webm|mov|m4v)($|\?)/i,c=/\.(m3u8)($|\?)/i,d=/\.(mpd)($|\?)/i,y=/www\.dropbox\.com\/.+/;function h(e){if(e instanceof Array){var t=!0,n=!1,r=void 0;try{for(var o,a=e[Symbol.iterator]();!(t=(o=a.next()).done);t=!0){var i=o.value;if("string"==typeof i&&h(i))return!0;if(h(i.src))return!0}}catch(e){n=!0,r=e}finally{try{!t&&a.return&&a.return()}finally{if(n)throw r}}return!1}return!!(0,J.isMediaStream)(e)||(u.test(e)||s.test(e)||c.test(e)||d.test(e))}var m=t.FilePlayer=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(v,P.Component),n(v,[{key:"componentDidMount",value:function(){this.addListeners(),l&&this.player.load()}},{key:"componentWillReceiveProps",value:function(e){this.shouldUseAudio(this.props)!==this.shouldUseAudio(e)&&this.removeListeners()}},{key:"componentDidUpdate",value:function(e){this.shouldUseAudio(this.props)!==this.shouldUseAudio(e)&&this.addListeners()}},{key:"componentWillUnmount",value:function(){this.removeListeners()}},{key:"addListeners",value:function(){var e=this.props,t=e.onReady,n=e.onPlay,r=e.onBuffer,o=e.onBufferEnd,a=e.onPause,i=e.onEnded,l=e.onError,u=e.playsinline,s=e.onEnablePIP;this.player.addEventListener("canplay",t),this.player.addEventListener("play",n),this.player.addEventListener("waiting",r),this.player.addEventListener("playing",o),this.player.addEventListener("pause",a),this.player.addEventListener("seeked",this.onSeek),this.player.addEventListener("ended",i),this.player.addEventListener("error",l),this.player.addEventListener("enterpictureinpicture",s),this.player.addEventListener("leavepictureinpicture",this.onDisablePIP),u&&(this.player.setAttribute("playsinline",""),this.player.setAttribute("webkit-playsinline",""),this.player.setAttribute("x5-playsinline",""))}},{key:"removeListeners",value:function(){var e=this.props,t=e.onReady,n=e.onPlay,r=e.onBuffer,o=e.onBufferEnd,a=e.onPause,i=e.onEnded,l=e.onError,u=e.onEnablePIP;this.player.removeEventListener("canplay",t),this.player.removeEventListener("play",n),this.player.removeEventListener("waiting",r),this.player.removeEventListener("playing",o),this.player.removeEventListener("pause",a),this.player.removeEventListener("seeked",this.onSeek),this.player.removeEventListener("ended",i),this.player.removeEventListener("error",l),this.player.removeEventListener("enterpictureinpicture",u),this.player.removeEventListener("leavepictureinpicture",this.onDisablePIP)}},{key:"shouldUseAudio",value:function(e){return!e.config.file.forceVideo&&!e.config.file.attributes.poster&&(u.test(e.url)||e.config.file.forceAudio)}},{key:"shouldUseHLS",value:function(e){return c.test(e)&&!l||this.props.config.file.forceHLS}},{key:"shouldUseDASH",value:function(e){return d.test(e)||this.props.config.file.forceDASH}},{key:"load",value:function(t){var r=this,e=this.props.config.file,n=e.hlsVersion,o=e.dashVersion;if(this.shouldUseHLS(t)&&(0,J.getSDK)("https://cdnjs.cloudflare.com/ajax/libs/hls.js/VERSION/hls.min.js".replace("VERSION",n),"Hls").then(function(n){r.hls=new n(r.props.config.file.hlsOptions),r.hls.on(n.Events.ERROR,function(e,t){r.props.onError(e,t,r.hls,n)}),r.hls.loadSource(t),r.hls.attachMedia(r.player)}),this.shouldUseDASH(t)&&(0,J.getSDK)("https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js".replace("VERSION",o),"dashjs").then(function(e){r.dash=e.MediaPlayer().create(),r.dash.initialize(r.player,t,r.props.playing),r.dash.getDebug().setLogToBrowserConsole(!1)}),t instanceof Array)this.player.load();else if((0,J.isMediaStream)(t))try{this.player.srcObject=t}catch(e){this.player.src=window.URL.createObjectURL(t)}}},{key:"play",value:function(){var e=this.player.play();e&&e.catch(this.props.onError)}},{key:"pause",value:function(){this.player.pause()}},{key:"stop",value:function(){this.player.removeAttribute("src"),this.hls&&this.hls.destroy(),this.dash&&this.dash.reset()}},{key:"seekTo",value:function(e){this.player.currentTime=e}},{key:"setVolume",value:function(e){this.player.volume=e}},{key:"enablePIP",value:function(){this.player.requestPictureInPicture&&document.pictureInPictureElement!==this.player&&this.player.requestPictureInPicture()}},{key:"disablePIP",value:function(){document.exitPictureInPicture&&document.pictureInPictureElement===this.player&&document.exitPictureInPicture()}},{key:"setPlaybackRate",value:function(e){this.player.playbackRate=e}},{key:"getDuration",value:function(){if(!this.player)return null;var e=this.player,t=e.duration,n=e.seekable;return t===1/0&&0<n.length?n.end(n.length-1):t}},{key:"getCurrentTime",value:function(){return this.player?this.player.currentTime:null}},{key:"getSecondsLoaded",value:function(){if(!this.player)return null;var e=this.player.buffered;if(0===e.length)return 0;var t=e.end(e.length-1),n=this.getDuration();return n<t?n:t}},{key:"getSource",value:function(e){var t=this.shouldUseHLS(e),n=this.shouldUseDASH(e);if(!(e instanceof Array||(0,J.isMediaStream)(e)||t||n))return y.test(e)?e.replace("www.dropbox.com","dl.dropboxusercontent.com"):e}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.playing,r=e.loop,o=e.controls,a=e.muted,i=e.config,l=e.width,u=e.height,s=this.shouldUseAudio(this.props)?"audio":"video",c={width:"auto"===l?l:"100%",height:"auto"===u?u:"100%"};return f.default.createElement(s,p({ref:this.ref,src:this.getSource(t),style:c,preload:"auto",autoPlay:n||void 0,controls:o,muted:a,loop:r},i.file.attributes),t instanceof Array&&t.map(this.renderSourceElement),i.file.tracks.map(this.renderTrack))}}]),v);function v(){var e,t,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,v);for(var n=arguments.length,r=Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=o=i(this,(e=v.__proto__||Object.getPrototypeOf(v)).call.apply(e,[this].concat(r)))).onDisablePIP=function(e){var t=o.props,n=t.onDisablePIP,r=t.playing;n(e),r&&o.play()},o.onSeek=function(e){o.props.onSeek(e.target.currentTime)},o.mute=function(){o.player.muted=!0},o.unmute=function(){o.player.muted=!1},o.renderSourceElement=function(e,t){return"string"==typeof e?f.default.createElement("source",{key:t,src:e}):f.default.createElement("source",p({key:t},e))},o.renderTrack=function(e,t){return f.default.createElement("track",p({key:t},e))},o.ref=function(e){o.player=e},i(o,t)}m.displayName="FilePlayer",m.canPlay=h,m.canEnablePIP=function(e){return h(e)&&!!document.pictureInPictureEnabled&&!u.test(e)},t.default=(0,o.default)(m)});B(Oe);Oe.FilePlayer;var _e=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=[te.YouTube,ne.SoundCloud,re.Vimeo,oe.Facebook,be.Streamable,we.Wistia,Pe.Twitch,Ee.DailyMotion,ke.Mixcloud,Oe.FilePlayer]});B(_e);var Se=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a,i=(a=P)&&a.__esModule?a:{default:a};function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u="64px",s=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"componentDidMount",value:function(){this.mounted=!0,this.fetchImage(this.props)}},{key:"componentWillReceiveProps",value:function(e){var t=this.props,n=t.url,r=t.light;n===e.url&&r===e.light||this.fetchImage(e)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"fetchImage",value:function(e){var n=this,t=e.url,r=e.light;if("string"!=typeof r)return this.setState({image:null}),window.fetch("https://noembed.com/embed?url="+t).then(function(e){return e.json()}).then(function(e){if(e.thumbnail_url&&n.mounted){var t=e.thumbnail_url.replace("height=100","height=480");n.setState({image:t})}});this.setState({image:r})}},{key:"render",value:function(){var e=this.props.onClick,t=this.state.image,n={display:"flex",alignItems:"center",justifyContent:"center"},r={preview:o({width:"100%",height:"100%",backgroundImage:t?"url("+t+")":void 0,backgroundSize:"cover",backgroundPosition:"center",cursor:"pointer"},n),shadow:o({background:"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)",borderRadius:u,width:u,height:u},n),playIcon:{borderStyle:"solid",borderWidth:"16px 0 16px 26px",borderColor:"transparent transparent transparent white",marginLeft:"7px"}};return i.default.createElement("div",{style:r.preview,className:"react-player__preview",onClick:e},i.default.createElement("div",{style:r.shadow,className:"react-player__shadow"},i.default.createElement("div",{style:r.playIcon,className:"react-player__play-icon"})))}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).mounted=!1,n.state={image:null},l(n,t)}t.default=s});B(Se);var De=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r=[],o=!0,a=!1,i=void 0;try{for(var l,u=f[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;!s.Player.canPlay(e)&&n[s.configKey].preload&&r.push(c.default.createElement(p.default,{key:s.Player.displayName,activePlayer:s.Player,url:s.url,controls:t,playing:!0,muted:!0,style:{display:"none"}}))}}catch(e){a=!0,i=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw i}}return r};var c=n(P),p=n(Q);function n(e){return e&&e.__esModule?e:{default:e}}var f=[{Player:te.YouTube,configKey:"youtube",url:"https://www.youtube.com/watch?v=GlCmAC4MHek"},{Player:ne.SoundCloud,configKey:"soundcloud",url:"https://soundcloud.com/seucheu/john-cage-433-8-bit-version"},{Player:re.Vimeo,configKey:"vimeo",url:"https://vimeo.com/300970506"},{Player:Ee.DailyMotion,configKey:"dailymotion",url:"http://www.dailymotion.com/video/xqdpyk"}]});B(De);function Te(e){var t=e.onPlayPauseClick,n=e.playing,r=(e.onReselectFile,e.processing),o=e.onEncode,a=e.showEncodeBtn,i=e.canDownload,l=e.onDownload,u=e.frameCurrentX,s=e.frameCurrentWidth,c=e.frameCurrentPlayedX,p=e.changePlaybackRate,f=e.playbackRate;return P.createElement("div",{className:"rvt-controls-cont"},P.createElement("div",{className:"videoSelectedTimeFrameContainer"},P.createElement("div",{className:"videoSelectedTimeFrameContainerCurrent",style:{left:"".concat(u,"%"),width:"".concat(s,"%")}}),P.createElement("div",{className:"videoSelectedTimeFrameContainerCurrentPlayed",style:{left:"".concat(c,"%")}})),P.createElement("div",{className:"px-2 pb-0"},P.createElement("a",{className:"rvt-controller-item",title:"Pause",onClick:t},P.createElement(D,{name:n?"pause":"play"})),P.createElement("a",{className:"rvt-controller-item",title:"PlaybackRate",onClick:p},f,"x",P.createElement(D,{name:"changespeed"})),a&&P.createElement("div",{className:"rvt-controller-dropdown rvt-controller-list-wrap"},i?P.createElement("a",{className:"rvt-controller-item",onClick:l},P.createElement(D,{name:"download"})):P.createElement("a",{className:"rvt-controller-item",onClick:o},P.createElement(D,{name:r?"spin":"replay"})))))}var je=U(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.FilePlayer=t.Mixcloud=t.DailyMotion=t.Twitch=t.Wistia=t.Streamable=t.Facebook=t.Vimeo=t.SoundCloud=t.YouTube=void 0;var h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"YouTube",{enumerable:!0,get:function(){return i(te).default}}),Object.defineProperty(t,"SoundCloud",{enumerable:!0,get:function(){return i(ne).default}}),Object.defineProperty(t,"Vimeo",{enumerable:!0,get:function(){return i(re).default}}),Object.defineProperty(t,"Facebook",{enumerable:!0,get:function(){return i(oe).default}}),Object.defineProperty(t,"Streamable",{enumerable:!0,get:function(){return i(be).default}}),Object.defineProperty(t,"Wistia",{enumerable:!0,get:function(){return i(we).default}}),Object.defineProperty(t,"Twitch",{enumerable:!0,get:function(){return i(Pe).default}}),Object.defineProperty(t,"DailyMotion",{enumerable:!0,get:function(){return i(Ee).default}}),Object.defineProperty(t,"Mixcloud",{enumerable:!0,get:function(){return i(ke).default}}),Object.defineProperty(t,"FilePlayer",{enumerable:!0,get:function(){return i(Oe).default}});var m=i(P),o=i(_e),a=i(Q),v=i(Se),g=i(De);function i(e){return e&&e.__esModule?e:{default:e}}function b(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var w=Object.keys(Z.propTypes),u=[],s=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"componentDidMount",value:function(){this.props.progressFrequency&&console.warn("ReactPlayer: %cprogressFrequency%c is deprecated, please use %cprogressInterval%c instead","font-weight: bold","","font-weight: bold","")}},{key:"shouldComponentUpdate",value:function(e,t){return!(0,J.isEqual)(this.props,e)||!(0,J.isEqual)(this.state,t)}},{key:"componentWillUpdate",value:function(e){this.config=(0,J.getConfig)(e,Z.defaultProps),!this.props.light&&e.light&&this.setState({showPreview:!0})}},{key:"getActivePlayer",value:function(e){for(var t=[].concat(b(u),b(o.default)),n=0;n<t.length;n++){var r=t[n];if(r.canPlay(e))return r}return Oe.FilePlayer}},{key:"renderActivePlayer",value:function(e,t){return e?m.default.createElement(a.default,h({},this.props,{key:t.displayName,ref:this.activePlayerRef,config:this.config,activePlayer:t,onReady:this.onReady})):null}},{key:"sortPlayers",value:function(e,t){return e&&t?e.key<t.key?-1:1:0}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.controls,r=e.style,o=e.width,a=e.height,i=e.light,l=e.wrapper,u=this.state.showPreview&&t,s=(0,J.omit)(this.props,w,Z.DEPRECATED_CONFIG_PROPS),c=this.getActivePlayer(t),p=this.renderActivePlayer(t,c),f=(0,g.default)(t,n,this.config),d=[p].concat(b(f)).sort(this.sortPlayers),y=m.default.createElement(v.default,{url:t,light:i,onClick:this.onClickPreview});return m.default.createElement(l,h({ref:this.wrapperRef,style:h({},r,{width:o,height:a})},s),u?y:d)}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).config=(0,J.getConfig)(n.props,Z.defaultProps,!0),n.state={showPreview:!!n.props.light},n.onClickPreview=function(){n.setState({showPreview:!1})},n.getDuration=function(){return n.player?n.player.getDuration():null},n.getCurrentTime=function(){return n.player?n.player.getCurrentTime():null},n.getSecondsLoaded=function(){return n.player?n.player.getSecondsLoaded():null},n.getInternalPlayer=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"player";return n.player?n.player.getInternalPlayer(e):null},n.seekTo=function(e,t){if(!n.player)return null;n.player.seekTo(e,t)},n.onReady=function(){n.props.onReady(n)},n.wrapperRef=function(e){n.wrapper=e},n.activePlayerRef=function(e){n.player=e},l(n,t)}s.addCustomPlayer=function(e){u.push(e)},s.removeCustomPlayers=function(){u=[]},s.displayName="ReactPlayer",s.propTypes=Z.propTypes,s.defaultProps=Z.defaultProps,s.canPlay=function(e){for(var t=[].concat(b(u),b(o.default)),n=0;n<t.length;n++){if(t[n].canPlay(e))return!0}return!1},s.canEnablePIP=function(e){for(var t=[].concat(b(u),b(o.default)),n=0;n<t.length;n++){var r=t[n];if(r.canEnablePIP&&r.canEnablePIP(e))return!0}return!1},t.default=s}),Re=B(je),xe=(je.FilePlayer,je.Mixcloud,je.DailyMotion,je.Twitch,je.Wistia,je.Streamable,je.Facebook,je.Vimeo,je.SoundCloud,je.YouTube,function(){function a(){var e,o;s(this,a);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return c(y(o=h(this,(e=d(a)).call.apply(e,[this].concat(n)))),"state",{playing:o.props.playVideo||!1}),c(y(o),"handlePlayerProgress",function(e){if(e.loaded){var t=e.playedSeconds;console.log("handlePlayerProgress "+t);var n=o.props.timeRange.start,r=o.props.timeRange.end<=t;t<=n&&o.player.seekTo(n,"seconds"),r&&o.player.seekTo(n,"seconds"),(o.props.onPlayerProgress||m)(t)}}),c(y(o),"handleOnPause",function(){(o.props.onPlayerPause||m)()}),c(y(o),"handleOnPlay",function(){(o.props.onPlayerPlay||m)()}),o}return p(a,P.Component),i(a,[{key:"componentWillReceiveProps",value:function(e){var t=e.timeRange,n=this.props.timeRange;(n&&t.start!==n.start||!n&&0<t.start)&&(this.setState({playing:!1}),this.player.seekTo(t.start,"seconds")),e.playVideo!==this.props.playVideo&&this.setState({playing:e.playVideo})}},{key:"displaySeconds",value:function(e){return e.toFixed(2)+"s"}},{key:"render",value:function(){var e,t=this,n=this.props.timeRange,r=n.start,o=n.end;return P.createElement("div",{className:"rvt-player-cont",onContextMenu:function(){}},P.createElement("div",{className:"player-wrapper"},P.createElement(Re,(c(e={onPlay:this.handleOnPause},"onPlay",this.handleOnPlay),c(e,"onProgress",this.handlePlayerProgress),c(e,"url",this.props.src),c(e,"playbackRate",this.props.playbackRate),c(e,"ref",function(e){return t.player=e}),c(e,"playing",this.state.playing),c(e,"className","react-player"),c(e,"width","100%"),c(e,"height","100%"),e)),this.props.children),P.createElement("div",{className:"rvt-player-time-range-cont"},P.createElement("span",{className:"rvt-player-time-range"},"From: ",P.createElement("strong",null,this.displaySeconds(r))),P.createElement("span",{className:"rvt-player-time-range"},"To: ",P.createElement("strong",null,this.displaySeconds(o))),P.createElement("span",{className:"rvt-player-time-range"},"Selected ",P.createElement("strong",null,this.displaySeconds(o-r))," of"," ",P.createElement("strong",null,this.displaySeconds(this.props.timeLimit))," allowed"),P.createElement("span",{className:"rvt-player-time-range"},P.createElement("strong",null,this.displaySeconds(this.props.vidDuration))," vid length")))}}]),a}()),Ce=function(){function a(){var e,t;s(this,a);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return c(y(t=h(this,(e=d(a)).call.apply(e,[this].concat(r)))),"_screenX",null),c(y(t),"_screenY",null),c(y(t),"_ox",null),c(y(t),"_oy",null),c(y(t),"handleMouseDown",function(e){t._screenX=e.screenX,t._screenY=e.screenY,t._ox=t.props.x,t._oy=t.props.y,window.addEventListener("mousemove",t.handleMouseMove,!1),window.addEventListener("mouseup",t.handleMouseUp,!1)}),c(y(t),"handleMouseMove",function(e){t.props.onDrag({x:e.screenX-t._screenX+t._ox,y:e.screenY-t._screenY+t._oy})}),c(y(t),"handleMouseUp",function(){window.removeEventListener("mousemove",t.handleMouseMove),window.removeEventListener("mouseup",t.handleMouseUp),(t.props.onDragStop||function(){})()}),t}return p(a,ae.PureComponent),i(a,[{key:"render",value:function(){return P.createElement("div",{className:"rvt-dragger "+this.props.className||"",onMouseDown:this.handleMouseDown,style:{left:this.props.x+"px",top:this.props.y+"px"}},this.props.children)}}]),a}();c(Ce,"defaultProps",{onDrag:function(){},x:0,y:0}),c(Ce,"propTypes",{x:f.number,y:f.number,onDrag:f.func,className:f.string,children:f.element});var Le=function(){function a(){var e,t;s(this,a);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return c(y(t=h(this,(e=d(a)).call.apply(e,[this].concat(r)))),"_screenX",null),c(y(t),"_screenY",null),c(y(t),"_ox",null),c(y(t),"_oy",null),c(y(t),"_owidth",null),c(y(t),"handleMouseDown",function(e){t._screenX=e.screenX,t._screenY=e.screenY,t._ox=t.props.x,t._owidth=t.props.width,window.addEventListener("mousemove",t.handleMouseMove,!1),window.addEventListener("mouseup",t.handleMouseUp,!1)}),c(y(t),"handleMouseMove",function(e){console.log("handleMouseMove",e),t.props.onDrag({x:e.screenX-t._screenX+t._ox,y:e.screenY-t._screenY+t._oy})}),c(y(t),"handleMouseUp",function(){window.removeEventListener("mousemove",t.handleMouseMove),window.removeEventListener("mouseup",t.handleMouseUp),(t.props.onDragStop||function(){})()}),t}return p(a,ae.PureComponent),i(a,[{key:"render",value:function(){return P.createElement("div",{className:"rvt-dragger-container "+this.props.className||"",onMouseDown:this.handleMouseDown,style:{left:this.props.x+"px",top:this.props.y+"px",width:this.props.width+"px"}},this.props.children)}}]),a}();c(Le,"defaultProps",{onDrag:function(){},x:0,y:0}),c(Le,"propTypes",{x:f.number,y:f.number,onDrag:f.func,className:f.string,children:f.element});function Me(e){return P.createElement("div",{className:"rvt-trimmer",style:{width:e.width,left:e.left,right:e.right}})}function Fe(e){var t=function(e){return[Math.floor(e/60),Math.floor(e%60),Math.round(e%1*100)]}(e.time);return P.createElement("div",{className:"rvt-player-cursor-current"},P.createElement("span",{className:"rvt-player-num"},t[0]),"'",P.createElement("span",{className:"rvt-player-num"},t[1]),!e.noMicroSeconds&&P.createElement(P.Fragment,null,".",P.createElement("span",{className:"rvt-player-num"},function(e,t){return("000000"+e).slice(-t)}(t[2],2))))}var Ae=function(){function o(){var e,i;s(this,o);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return c(y(i=h(this,(e=d(o)).call.apply(e,[this].concat(n)))),"pos2Time",function(e){return e/i.props.widthDurationRatio}),c(y(i),"time2pos",function(e){return e*i.props.widthDurationRatio}),c(y(i),"keepInRange",function(e){var t=i.props.containerWidth;return e<0?0:t<e?t:e}),c(y(i),"withinTimeLimit",function(e){var t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=i.props.timeLimit,r=i.props.startTime,o=e;t||(r=e,o=i.props.endTime);var a=i.props.duration;return!n||a-r-(a-o)<=n}),c(y(i),"withinTimeRange",function(e){var t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=i.props.timeRangeLimit,r=e-i.props.startTime;return t||(r=i.props.endTime-e),!n||n<=r}),c(y(i),"setCurrentTime",function(e){var t=i.pos2Time(i.keepInRange(e.x)),n=t;console.log("dragStart v5",t);i.props.currentTime;var r=i.withinTimeRange(n,!1),o=i.withinTimeLimit(n,!1);r&&o||(console.log("Pausing player"),n=i.props.startTime,(i.props.onPausePlayer||function(){})());console.log("this.props",i.props),i.props.onPlayerProgress(n)}),c(y(i),"handleDragStart",function(e){var t=i.pos2Time(i.keepInRange(e.x));console.log("dragStart",t);var n=t,r=(i.props.currentTime,i.withinTimeRange(n,!1)),o=i.withinTimeLimit(n,!1);r&&o||(console.log("Pausing player"),n=i.props.startTime,(i.props.onPausePlayer||function(){})());i.props.onStartTimeChange(n)}),c(y(i),"handleDragEnd",function(e){var t=i.pos2Time(i.keepInRange(e.x)),n=(i.props.endTime,i.props.currentTime,i.withinTimeRange(t)),r=i.withinTimeLimit(t);n&&r||(t=i.props.endTime,(i.props.onPausePlayer||function(){})());i.props.onEndTimeChange(t)}),c(y(i),"handleDragStop",function(){(i.props.onGetData||m)({start:i.props.startTime,end:i.props.endTime})}),c(y(i),"getTrimmerWidth",function(e){return i.props.containerWidth-e}),i}return p(o,ae.PureComponent),i(o,[{key:"render",value:function(){var e=this.time2pos(this.props.startTime),t=this.time2pos(this.props.endTime),n=this.time2pos(this.props.currentTime);return P.createElement(P.Fragment,null,P.createElement(Me,{left:0,width:e}),P.createElement(Ce,{x:e,onDrag:this.handleDragStart,onDragStop:this.handleDragStop},P.createElement(Fe,{time:this.props.startTime})),P.createElement(Ce,{x:n,onDrag:this.setCurrentTime,onDragStop:function(){}},P.createElement(Fe,{noMicroSeconds:!0,time:this.props.currentTime})),P.createElement(Ce,{x:t,onDrag:this.handleDragEnd,onDragStop:this.handleDragStop},P.createElement(Fe,{time:this.props.endTime})),P.createElement(Le,{x:e,width:t-e,onDrag:this.handleDragStart,onDragStop:this.handleDragStop}),P.createElement(Me,{right:0,width:this.getTrimmerWidth(t)}))}}]),o}(),Ve=function(){function a(){var e,t;s(this,a);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return c(y(t=h(this,(e=d(a)).call.apply(e,[this].concat(r)))),"state",{start:0,end:0}),c(y(t),"handleStartTimeChange",function(e){t.setState({start:e})}),c(y(t),"handleGetTrimData",function(){var e=t.props.onTrim||m;setTimeout(function(){return e({start:t.state.start||t.props.timeRange.start,end:t.state.end||t.props.timeRange.end})},200)}),c(y(t),"handleEndTimeChange",function(e){t.setState({end:e})}),t}return p(a,ae.PureComponent),i(a,[{key:"render",value:function(){var t=this;return P.createElement("div",{className:"rvt-trimmer-cont videotrimmer",ref:function(e){return t.containerRef=e}},this.props.showTrimmer&&P.createElement(Ae,{timeLimit:this.props.timeLimit,onStartTimeChange:this.handleStartTimeChange,onCurrentTimeChange:this.handleCurrentTimeChange,onEndTimeChange:this.handleEndTimeChange,widthDurationRatio:this.widthDurationRatio,containerWidth:this.containerWidth,startTime:this.state.start||this.props.timeRange.start,endTime:this.state.end||this.props.timeRange.end,currentTime:this.props.currentTime,duration:this.props.duration,onGetData:this.handleGetTrimData,onPausePlayer:this.onPausePlayer,onPlayerProgress:this.props.onPlayerProgress}))}},{key:"widthDurationRatio",get:function(){return this.containerWidth/this.props.duration}},{key:"containerWidth",get:function(){return this.containerRef.getBoundingClientRect().width}}]),a}();function Ie(){}function Ne(){Ne.init.call(this)}function Be(e){return void 0===e._maxListeners?Ne.defaultMaxListeners:e._maxListeners}function Ue(e,t,n,r){var o,a,i;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');if((a=e._events)?(a.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),a=e._events),i=a[t]):(a=e._events=new Ie,e._eventsCount=0),i){if("function"==typeof i?i=a[t]=r?[n,i]:[i,n]:r?i.unshift(n):i.push(n),!i.warned&&(o=Be(e))&&0<o&&i.length>o){i.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=i.length,function(e){"function"==typeof console.warn?console.warn(e):console.log(e)}(l)}}else i=a[t]=n,++e._eventsCount;return e}function We(e,t,n){var r=!1;function o(){e.removeListener(t,o),r||(r=!0,n.apply(e,arguments))}return o.listener=n,o}function ze(e){var t=this._events;if(t){var n=t[e];if("function"==typeof n)return 1;if(n)return n.length}return 0}function Ge(e,t){for(var n=new Array(t);t--;)n[t]=e[t];return n}Ie.prototype=Object.create(null),(Ne.EventEmitter=Ne).usingDomains=!1,Ne.prototype.domain=void 0,Ne.prototype._events=void 0,Ne.prototype._maxListeners=void 0,Ne.defaultMaxListeners=10,Ne.init=function(){this.domain=null,Ne.usingDomains&&(void 0).active&&(void 0).Domain,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new Ie,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},Ne.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},Ne.prototype.getMaxListeners=function(){return Be(this)},Ne.prototype.emit=function(e,t,n,r){var o,a,i,l,u,s,c,p="error"===e;if(s=this._events)p=p&&null==s.error;else if(!p)return!1;if(c=this.domain,p){if(o=t,c)return(o=o||new Error('Uncaught, unspecified "error" event')).domainEmitter=this,o.domain=c,o.domainThrown=!1,c.emit("error",o),!1;if(o instanceof Error)throw o;var f=new Error('Uncaught, unspecified "error" event. ('+o+")");throw f.context=o,f}if(!(a=s[e]))return!1;var d="function"==typeof a;switch(i=arguments.length){case 1:!function(e,t,n){if(t)e.call(n);else for(var r=e.length,o=Ge(e,r),a=0;a<r;++a)o[a].call(n)}(a,d,this);break;case 2:!function(e,t,n,r){if(t)e.call(n,r);else for(var o=e.length,a=Ge(e,o),i=0;i<o;++i)a[i].call(n,r)}(a,d,this,t);break;case 3:!function(e,t,n,r,o){if(t)e.call(n,r,o);else for(var a=e.length,i=Ge(e,a),l=0;l<a;++l)i[l].call(n,r,o)}(a,d,this,t,n);break;case 4:!function(e,t,n,r,o,a){if(t)e.call(n,r,o,a);else for(var i=e.length,l=Ge(e,i),u=0;u<i;++u)l[u].call(n,r,o,a)}(a,d,this,t,n,r);break;default:for(l=new Array(i-1),u=1;u<i;u++)l[u-1]=arguments[u];!function(e,t,n,r){if(t)e.apply(n,r);else for(var o=e.length,a=Ge(e,o),i=0;i<o;++i)a[i].apply(n,r)}(a,d,this,l)}return!0},Ne.prototype.on=Ne.prototype.addListener=function(e,t){return Ue(this,e,t,!1)},Ne.prototype.prependListener=function(e,t){return Ue(this,e,t,!0)},Ne.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,We(this,e,t)),this},Ne.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,We(this,e,t)),this},Ne.prototype.removeListener=function(e,t){var n,r,o,a,i;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(r=this._events))return this;if(!(n=r[e]))return this;if(n===t||n.listener&&n.listener===t)0==--this._eventsCount?this._events=new Ie:(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,a=n.length;0<a--;)if(n[a]===t||n[a].listener&&n[a].listener===t){i=n[a].listener,o=a;break}if(o<0)return this;if(1===n.length){if(n[0]=void 0,0==--this._eventsCount)return this._events=new Ie,this;delete r[e]}else!function(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}(n,o);r.removeListener&&this.emit("removeListener",e,i||t)}return this},Ne.prototype.removeAllListeners=function(e){var t,n;if(!(n=this._events))return this;if(!n.removeListener)return 0===arguments.length?(this._events=new Ie,this._eventsCount=0):n[e]&&(0==--this._eventsCount?this._events=new Ie:delete n[e]),this;if(0===arguments.length){for(var r,o=Object.keys(n),a=0;a<o.length;++a)"removeListener"!==(r=o[a])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=new Ie,this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(t)for(;this.removeListener(e,t[t.length-1]),t[0];);return this},Ne.prototype.listeners=function(e){var t,n=this._events;return n&&(t=n[e])?"function"==typeof t?[t.listener||t]:function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(t):[]},Ne.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):ze.call(e,t)},Ne.prototype.listenerCount=ze,Ne.prototype.eventNames=function(){return 0<this._eventsCount?Reflect.ownKeys(this._events):[]};function He(){importScripts("https://cdn.rawgit.com/bgrins/videoconverter.js/master/build/ffmpeg-all-codecs.js");var i=Date.now;function l(e){postMessage({type:"stdout",data:e})}onmessage=function(e){var t=e.data;if("command"===t.type){var n={print:l,printErr:l,files:t.files||[],arguments:t.arguments||[],TOTAL_MEMORY:t.totalMemory||33554432};postMessage({type:"start",data:n.arguments.join(" ")}),postMessage({type:"stdout",data:"Received command: "+n.arguments.join(" ")+(n.TOTAL_MEMORY?".  Processing with "+n.TOTAL_MEMORY+" bits.":"")});var r=i(),o=ffmpeg_run(n),a=i()-r;postMessage({type:"stdout",data:"Finished processing (took "+a+"ms)"}),postMessage({type:"done",data:o,time:a})}},postMessage({type:"ready"})}var Ye="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},Ke=B(U(function(e,t){var n;(n=t).default=function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"function"!=typeof t)throw new Error("File content must export a function");var n=t.toString(),r=new Blob(["("+n+")()"],{type:"application/javascript"});return new Worker(URL.createObjectURL(r))},Object.defineProperty(n,"__esModule",{value:!0})}));function qe(e){return(qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Xe(e){return(Xe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ze(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Je(e,t){return(Je=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Qe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var et=function(){function e(){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),Qe(Ze(a=function(e,t){return!t||"object"!==qe(t)&&"function"!=typeof t?Ze(e):t}(this,Xe(e).call(this))),"_worker",{}),Qe(Ze(a),"_inputFile",{}),Qe(Ze(a),"workerIsReady",!1),Qe(Ze(a),"readFileAsBufferArray",function(r){return new Promise(function(e,t){var n=new FileReader;n.onload=function(){e(this.result)},n.onerror=function(){t(this.error)},n.readAsArrayBuffer(r)})}),Qe(Ze(a),"runCommand",function(r){var o=1<arguments.length&&void 0!==arguments[1]?arguments[1]:33554432;if("string"!=typeof r||!r.length)throw new Error("command should be string and not empty");a.inputFile&&a.inputFile.type?a.convertInputFileToArrayBuffer().then(function(e){for(;!a.workerIsReady;);var t="video-".concat(Date.now(),".webm"),n="-i ".concat(t," ").concat(r);a.worker.postMessage({type:"command",arguments:n.split(" "),files:[{data:new Uint8Array(e),name:t}],totalMemory:o})}):a.worker.postMessage({type:"command",arguments:r.split(" "),totalMemory:o})}),Qe(Ze(a),"log",function(e){return Array.isArray(e)?console.log.call(null,e):console.log(e)}),Qe(Ze(a),"isVideo",function(e){var t=e.type;return e instanceof Blob&&(t.includes("video")||t.includes("audio"))}),a.initWebWorker(),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Je(e,t)}(e,Ne),function(e,t,n){t&&$e(e.prototype,t),n&&$e(e,n)}(e,[{key:"initWebWorker",value:function(){var n=this;this.worker=new Ke(He),this.log;var r=this.worker.onmessage=function(e){var t=e.data;e&&e.type&&("ready"==t.type?(n.emit("onReady","ffmpeg-asm.js file has been loaded."),n.workerIsReady=!0):"stdout"==t.type?n.emit("onStdout",t.data):"start"==t.type?(n.emit("onFileReceived","File Received"),r("file received ffmpeg command.")):"done"==t.type&&n.emit("onDone",t.data))}}},{key:"inputFileExists",value:function(){var e=this.inputFile;return!!(e&&e instanceof Blob&&e.size&&e.type)}},{key:"convertInputFileToArrayBuffer",value:function(){if(!this.inputFileExists())throw new Error("Input File has not been set");return this.readFileAsBufferArray(this.inputFile)}},{key:"worker",set:function(e){this._worker=e},get:function(){return this._worker}},{key:"inputFile",set:function(e){if(!this.isVideo(e))throw new Error("Input file is expected to be an audio or a video");this._inputFile=e},get:function(){return this._inputFile}}]),e}(),tt={on:function(){},emit:function(){}},nt=Ye||window;nt&&nt.Blob&&(tt=new et);var rt=tt,ot=function n(r,e,t){return void 0===e?function(e,t){return n(r,e,t)}:(void 0===t&&(t="0"),0<(r-=e.toString().length)?new Array(r+(/\./.test(e)?2:1)).join(t)+e:e+"")},at=36e5,it=6e4,lt=1e3,ut="Time format error";function st(e,t){var n=1<arguments.length&&void 0!==t?t:"mm:ss";if("number"!=typeof e||Number.isNaN(e))throw new Error("NaN error");var r=Math.abs(e);return function(e,t){var n,r,o;switch(t.toLowerCase()){case"hh:mm:ss.sss":o=r=n=!0;break;case"hh:mm:ss":n=!!e.miliseconds,o=r=!0;break;case"hh:mm":n=!!e.miliseconds,r=n||!!e.seconds,o=!0;break;case"mm:ss":n=!!e.miliseconds,r=!0,o=!!e.hours;break;case"mm:ss.sss":r=n=!0,o=!!e.hours;break;default:throw new Error(ut)}var a=ot(2,e.hours),i=ot(2,e.minutes),l=ot(2,e.seconds),u=ot(3,e.miliseconds);return(e.negative?"-":"")+(o?n?"".concat(a,":").concat(i,":").concat(l,".").concat(u):r?"".concat(a,":").concat(i,":").concat(l):"".concat(a,":").concat(i):n?"".concat(i,":").concat(l,".").concat(u):"".concat(i,":").concat(l))}({negative:e<0,hours:Math.floor(r/at),minutes:Math.floor(r%at/it),seconds:Math.floor(r%it/lt),miliseconds:Math.floor(r%lt)},n)}function ct(){return new pt(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})}var pt=function(){function t(e){var m;return s(this,t),c(y(m=h(this,d(t).call(this))),"handleDoneClientDone",function(e){g(e[0].data);m.emit("FFMPEGDone",e)}),c(y(m),"trimVideo",function(){var e=1<arguments.length?arguments[1]:void 0,t=function(e,t){var n=1<arguments.length&&void 0!==t?t:"mm:ss";if("number"!=typeof e||Number.isNaN(e))throw new Error("NaN error");return st(e*lt,n)}(0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,"hh:mm:ss");console.log("workerClient grr",rt),rt.runCommand("-ss ".concat(t," -c copy -t ").concat(e," sliced-output.mp4"))}),c(y(m),"optimizeVideo",function(){rt.runCommand("-strict -2 -vcodec libx264 -crf 23 output.mp4",253554432)}),c(y(m),"_videoData",{}),c(y(m),"_videoFile",null),c(y(m),"optimizedVideo",!1),c(y(m),"_videoBuffer",{}),c(y(m),"readAsArrayBuffer",v(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("readAsArrayBuffer  ",m._videoFile),e.next=3,t=m._videoFile,a(t,"ArrayBuffer");case 3:return m._videoBuffer=e.sent,e.abrupt("return",m.videoBuffer);case 5:case"end":return e.stop()}var t},e)}))),c(y(m),"convertBufferToBlob",function(e){var t=null;return(e=e||m.videoBuffer).byteLength&&(t=g(e)),t}),c(y(m),"readAsDataURL",function(){var n=v(regeneratorRuntime.mark(function e(t,n){var r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=t||m.videoBuffer,n=n||m.convertBufferToBlob(t),r=null,n)return e.next=6,a(n,"DataURL");e.next=7;break;case 6:r=e.sent;case 7:return e.abrupt("return",r);case 8:case"end":return e.stop()}},e)}));return function(e,t){return n.apply(this,arguments)}}()),c(y(m),"decode",function(){var t=v(regeneratorRuntime.mark(function e(t){var n,r,o,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return m.videoFile=t,m.emit("processingFile"),console.log("processing  ",t),e.next=5,m.readAsArrayBuffer();case 5:return n=e.sent,e.next=8,m.readAsDataURL(n);case 8:r=e.sent,o=URL.createObjectURL(m.videoFile),(a=document.createElement("video")).src=o;case 12:if((a.duration===1/0||isNaN(a.duration))&&a.readyState<2)return e.next=15,new Promise(function(e){return setTimeout(e,1e3)});e.next=18;break;case 15:a.currentTime=1e7*Math.random(),e.next=12;break;case 18:return m._videoData=a,m.emit("processedFile"),e.abrupt("return",{dataURL:r,arrayBuffer:n,blob:m.convertBufferToBlob()});case 21:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),c(y(m),"generateBufferChunks",function(){var l=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[];return new Promise(function(e,t){try{var n=[];l=l.byteLength?l:m.videoBuffer;for(var r=new Uint8Array(l),o=0,a=6e4;a<r.byteLength;a+=6e4){var i=l.slice(o,a);n.push(i),o=a}e(n)}catch(e){t(e)}})}),c(y(m),"extractFramesFromVideo",function(){var h=0<arguments.length&&void 0!==arguments[0]?arguments[0]:25;return new Promise(function(){var n=v(regeneratorRuntime.mark(function e(t,n){var r,o,a,i,l,u,s,c,p,f,d,y;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:e.prev=0,m.emit("extractingFrames"),(r=m._videoData).addEventListener("seeked",v(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:o&&o();case 1:case"end":return e.stop()}},e)}))),a=r.duration,i=document.createElement("canvas"),l=i.getContext("2d"),u=[r.videoWidth,r.videoHeight],s=u[0],c=u[1],i.width=s,i.height=c,p=[],f=125/h,d=0;case 13:if(d<a)return r.currentTime=d,e.next=17,new Promise(function(e){return o=e});e.next=23;break;case 17:l.drawImage(r,0,0,s,c),y=i.toDataURL(),p.push(y),d+=f,e.next=13;break;case 23:m.emit("extractedFrames"),t(p),e.next=30;break;case 27:e.prev=27,e.t0=e.catch(0),n(e.t0);case 30:case"end":return e.stop()}},e,null,[[0,27]])}));return function(e,t){return n.apply(this,arguments)}}())}),m.videoFile=e,(m.workerClient=rt).on("onReady",function(){return m.emit("FFMPEGReady")}),rt.on("onStdout",function(e){return m.emit("FFMPEGStdout",e)}),rt.on("onFileReceived",function(){return m.emit("FFMPEGFileReceived")}),rt.on("onDone",m.handleDoneClientDone),m}return p(t,Ne),i(t,[{key:"videoFile",set:function(e){console.log("videoFile"),e&&e.type&&(rt.inputFile=e),this._videoFile=e},get:function(){return this._videoFile}},{key:"duration",get:function(){return this._videoData.duration||0}},{key:"videoData",get:function(){return this._videoData}},{key:"videoBuffer",get:function(){return this._videoBuffer}}]),t}(),ft=function(){function n(e){var l,t=this;return s(this,n),c(y(l=h(this,d(n).call(this,e))),"webVideo",ct({})),c(y(l),"handleFFMPEGStdout",function(e){}),c(y(l),"handleFFMPEGReady",function(){l.setState({ffmpegReady:!0})}),c(y(l),"handleFFMPEGFileReceived",function(){}),c(y(l),"handleFFMPEGDone",function(e){l.setState({timeRange:{start:0,end:l.state.timeRange.end}});var t=g(e[0].data);setTimeout(function(){l.decodeVideoFile(t,function(){(l.props.onVideoEncode||m)(e),l.setState({encoding:!1,encoded:!0,encodedVideo:t})})},300)}),c(y(l),"defaultState",{decoding:!1,encoding:!1,encoded:!1,playVideo:!1,videoDataURL:"",videoFrames:[],isDecoding:!1,timeRange:{start:5,end:l.props.timeLimit||15},encodedVideo:null,playedSeconds:0,ffmpegReady:!1,playbackRate:1,trimmedTimeRange:{start:0,end:10}}),c(y(l),"state",l.defaultState),c(y(l),"updateVideoDataURL",function(e){return l.setState({videoDataURL:e})}),c(y(l),"updateVideoFrames",function(e){return l.setState({videoFrames:e})}),c(y(l),"updateIsDecoding",function(e){return l.setState({updateIsDecoding:e})}),c(y(l),"updateVideoDuration",function(e){return l.setState({updateVideoDuration:e})}),c(y(l),"decodeVideoFile",function(e){var i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:m;l.setState({decoding:!0,encoded:!1});var t=l.webVideo;t.videoFile=e,t.decode(e).then(function(e){e.blob,e.arrayBuffer;var t=e.dataURL;l.updateVideoDataURL(t);var n=l.state.timeRange.start,r=l.webVideo.videoData.duration,o=n+(l.props.timeLimit||10),a=o<r?o:r;l.setState({timeRange:{start:n,end:a},playedSeconds:(a-n)/2+n}),l.setState({decoding:!1}),i()}).catch(function(e){return console.log(e)})}),c(y(l),"handleFileSelected",function(e){l.decodeVideoFile(e)}),c(y(l),"handleVideoTrim",function(e){l.setState({timeRange:e})}),c(y(l),"handleEncodeVideo",function(e){l.setState({encoding:!0,videoDataURL:"",playVideo:!1,trimmedTimeRange:e});var t=e.end-e.start;l.webVideo.trimVideo(e.start,t)}),c(y(l),"handlePlayPauseVideo",function(){var e=l.state.playVideo;l.setState({playVideo:!e})}),c(y(l),"handlePlayerPause",function(){l.setState({playVideo:!1})}),c(y(l),"handlePlayerPlay",function(){l.setState({playVideo:!0})}),c(y(l),"handlePlayerProgress",function(e){l.state.playVideo&&l.setState({playedSeconds:e})}),c(y(l),"handleReselectFile",function(){l.setState(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(n,!0).forEach(function(e){c(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({},l.defaultState,{ffmpegReady:!0}))}),c(y(l),"handleChangePlaybackRate",function(){var e=l.state.playbackRate;3<(e+=1)&&(e=1),l.setState({playbackRate:e}),console.log("handleChangePlaybackRate to "+e)}),c(y(l),"VideoPlayerWithTrimmer",function(e){var t=e.showTrimmer,n=l.state,r=n.decoding,o=n.encoding,a=n.encoded,i=n.videoDataURL;return P.createElement("div",{className:"VideoPlayerWithTrimmerVideoPlayerWithTrimmer"},!r&&!o&&i&&P.createElement(xe,c({src:l.state.videoDataURL,timeRange:l.state.timeRange,playbackRate:l.state.playbackRate,timeLimit:l.props.timeLimit,playVideo:l.state.playVideo,onPlayerPlay:l.handlePlayerPlay,onPlayerPause:l.handlePlayerPause,onPlayerProgress:l.handlePlayerProgress,vidDuration:l.webVideo.videoData.duration},"playbackRate",l.state.playbackRate),!r&&!o&&i&&P.createElement(Te,{onDownload:function(){return l.handleDownloadVideo(l.state.encodedVideo)},canDownload:a,showEncodeBtn:l.props.showEncodeBtn,onReselectFile:l.handleReselectFile,onEncode:function(){return l.handleEncodeVideo(l.state.timeRange)},onPlayPauseClick:l.handlePlayPauseVideo,processing:o,playing:l.state.playVideo,vidDuration:l.webVideo.videoData.duration,frameCurrentX:l.state.timeRange.start/l.webVideo.videoData.duration*100,frameCurrentWidth:(l.state.timeRange.end-l.state.timeRange.start)/l.webVideo.videoData.duration*100,frameCurrentPlayedX:l.state.playedSeconds/l.webVideo.videoData.duration*100,onPlayerProgress:l.handlePlayerProgress,playbackRate:l.state.playbackRate,changePlaybackRate:l.handleChangePlaybackRate})),t&&P.createElement(Ve,{onPausePlayer:l.handlePlayerPause,showTrimmer:l.state.videoDataURL,duration:l.webVideo.videoData.duration,onTrim:l.handleVideoTrim,timeLimit:l.props.timeLimit,timeRangeLimit:l.props.timeRange,timeRange:l.state.timeRange,currentTime:l.state.playedSeconds,onPlayerProgress:l.handlePlayerProgress}))}),c(y(l),"downloadVideo",function(){l.handleDownloadVideo(l.state.encodedVideo)}),c(y(l),"handleDownloadVideo",function(e){if(l.props.onDownloadRequest)l.props.onDownloadRequest({success:!0,playedSeconds:l.state.playedSeconds,timeRange:l.state.timeRange,trimmedTimeRange:l.state.trimmedTimeRange});else{var t=function(e){return URL.createObjectURL(e)}(e),n=l.props.downloadPath?l.props.downloadPath:"trimmed.mp4";console.log("downloading "+t),function(e,t){var n=document.createElement("a");n.href=e,n.download=t,n.click()}(t,n)}}),c(y(l),"VideoPlayerNoTrimmer",function(){return P.createElement(t.VideoPlayerWithTrimmer,null)}),l.webVideo.on("processingFile",function(){return l.updateIsDecoding(!0)}),l.webVideo.on("processedFile",function(){return l.updateIsDecoding(!1)}),l.webVideo.on("FFMPEGStdout",l.handleFFMPEGStdout),l.webVideo.on("FFMPEGReady",l.handleFFMPEGReady),l.webVideo.on("FFMPEGFileReceived",l.handleFFMPEGFileReceived),l.webVideo.on("FFMPEGDone",l.handleFFMPEGDone),l}return p(n,P.PureComponent),i(n,[{key:"render",value:function(){var e=this.state,t=e.decoding,n=e.encoding,r=e.encoded,o=e.videoDataURL,a=e.ffmpegReady;return P.createElement("div",{className:"rvt-main-container"},!a&&P.createElement(Y,null,P.createElement(D,{name:"spin",className:"rvt-icon-spin"}),this.props.loadingFFMPEGText||"PLEASE WAIT..."),a&&r&&P.createElement(this.VideoPlayerNoTrimmer,null),a&&!r&&P.createElement(P.Fragment,null,!t&&!n&&!o&&P.createElement(H,{onFileSelected:this.handleFileSelected,minSize:this.props.minSize,maxSize:this.props.maxSize}),(t||n)&&P.createElement(Y,null,P.createElement(D,{name:"spin",className:"rvt-icon-spin"}),n?"ENCODING VIDEO":"DECODING VIDEO","..."),P.createElement(this.VideoPlayerWithTrimmer,{showTrimmer:!0})))}}]),n}();c(ft,"propTypes",{onVideoEncode:f.func,onDownloadRequest:f.func,showEncodeBtn:f.bool,timeLimit:f.number,loadingFFMPEGText:f.string,downloadPath:f.string});var dt=ct;e.default=ft,e.preloadWebVideo=dt,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
