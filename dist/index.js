!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["exports","react","prop-types"],t):t((e=e||self).reactVideoTrimmer={},e.React,e.PropTypes)}(this,function(e,ae,f){"use strict";var P="default"in ae?ae.default:ae;function u(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function m(l){return function(){var e=this,i=arguments;return new Promise(function(t,n){var r=l.apply(e,i);function o(e){u(r,t,n,o,a,"next",e)}function a(e){u(r,t,n,o,a,"throw",e)}o(void 0)})}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function p(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?y(e):t}f=f&&f.hasOwnProperty("default")?f.default:f;function a(r,e){var o=1<arguments.length&&void 0!==e?e:"ArrayBuffer";return new Promise(function(e,t){var n=new FileReader;n["readAs"+o](r),n.onload=function(){return e(n.result)},n.onerror=function(e){return t(e)}})}function v(){}function g(e){return new Blob([new Uint8Array(e,0,e.byteLength)],{type:"video/webm",name:"video.webm"})}function b(e){var t=e.className;return P.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"}),P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}))}function w(e){var t=e.className;return P.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M15 6H3v2h12V6zm0 4H3v2h12v-2zM3 16h8v-2H3v2zM17 6v8.18c-.31-.11-.65-.18-1-.18-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3V8h3V6h-5z"}))}function E(e){var t=e.className;return P.createElement("svg",{className:t,height:"24",viewBox:"0 0 24 24",width:"24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"}))}function k(e){var t=e.className;return P.createElement("svg",{className:t,height:"24",viewBox:"0 0 24 24",width:"24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M9 16h2V8H9v8zm3-14C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm1-4h2V8h-2v8z"}))}function O(e){var t=e.className;return P.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z"}))}function _(e){var t=e.className;return P.createElement("svg",{className:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 42 42"},P.createElement("path",{d:"M21 37c-4.3 0-8.3-1.7-11.3-4.7S5 25.3 5 21c0-3 .8-6 2.5-8.5C9 10 11.2 8 13.8 6.7l1.3 2.7c-2.1 1.1-3.9 2.7-5.2 4.7-1.3 2.1-2 4.5-2 6.9 0 7.2 5.8 13 13 13s13-5.8 13-13c0-2.5-.7-4.9-2-6.9s-3.1-3.6-5.2-4.7L28 6.7c2.8 1.3 5 3.3 6.5 5.8C36.2 15 37 18 37 21c0 4.3-1.7 8.3-4.7 11.3S25.3 37 21 37z"}))}function S(e){var t=b;switch(e.name){case"music":t=w;break;case"play":t=E;break;case"pause":t=k;break;case"replay":t=O;break;case"spin":t=_;break;default:t=b}return P.createElement(t,{className:"rvt-icon rat-icon-".concat(e.name," ").concat(e.className).trim()})}function D(a,i,l,u){return new(l=l||Promise)(function(e,t){function n(e){try{o(u.next(e))}catch(e){t(e)}}function r(e){try{o(u.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new l(function(e){e(t.value)}).then(n,r)}o((u=u.apply(a,i||[])).next())})}function T(n,r){var o,a,i,e,l={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return e={next:t(0),throw:t(1),return:t(2)},"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;l;)try{if(o=1,a&&(i=2&t[0]?a.return:t[0]?a.throw||((i=a.return)&&i.call(a),0):a.next)&&!(i=i.call(a,t[1])).done)return i;switch(a=0,i&&(t=[2&t[0],i.value]),t[0]){case 0:case 1:i=t;break;case 4:return l.label++,{value:t[1],done:!1};case 5:l.label++,a=t[1],t=[0];continue;case 7:t=l.ops.pop(),l.trys.pop();continue;default:if(!(i=0<(i=l.trys).length&&i[i.length-1])&&(6===t[0]||2===t[0])){l=0;continue}if(3===t[0]&&(!i||t[1]>i[0]&&t[1]<i[3])){l.label=t[1];break}if(6===t[0]&&l.label<i[1]){l.label=i[1],i=t;break}if(i&&l.label<i[2]){l.label=i[2],l.ops.push(t);break}i[2]&&l.ops.pop(),l.trys.pop();continue}t=r.call(n,l)}catch(e){t=[6,e],a=0}finally{o=i=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}}function j(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||0<t--)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}function R(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(j(arguments[t]));return e}S.propTypes={name:f.string};var x=new Map([["avi","video/avi"],["gif","image/gif"],["ico","image/x-icon"],["jpeg","image/jpeg"],["jpg","image/jpeg"],["mkv","video/x-matroska"],["mov","video/quicktime"],["mp4","video/mp4"],["pdf","application/pdf"],["png","image/png"],["zip","application/zip"],["doc","application/msword"],["docx","application/vnd.openxmlformats-officedocument.wordprocessingml.document"]]);function C(e,t){var n=function(e){var t=e.name;if(t&&-1!==t.lastIndexOf(".")&&!e.type){var n=t.split(".").pop().toLowerCase(),r=x.get(n);r&&Object.defineProperty(e,"type",{value:r,writable:!1,configurable:!1,enumerable:!0})}return e}(e);if("string"!=typeof n.path){var r=e.webkitRelativePath;Object.defineProperty(n,"path",{value:"string"==typeof t?t:"string"==typeof r&&0<r.length?r:e.name,writable:!1,configurable:!1,enumerable:!0})}return n}var t=[".DS_Store","Thumbs.db"];function ie(t){return D(this,void 0,void 0,function(){return T(this,function(e){return[2,function(e){return!!e.dataTransfer}(t)&&t.dataTransfer?function(n,r){return D(this,void 0,void 0,function(){var t;return T(this,function(e){switch(e.label){case 0:return n.items?(t=M(n.items).filter(function(e){return"file"===e.kind}),"drop"!==r?[2,t]:[4,Promise.all(t.map(F))]):[3,2];case 1:return[2,L(function n(e){return e.reduce(function(e,t){return R(e,Array.isArray(t)?n(t):[t])},[])}(e.sent()))];case 2:return[2,L(M(n.files).map(function(e){return C(e)}))]}})})}(t.dataTransfer,t.type):function(e){return(function(e){return null!==e}(e.target)&&e.target.files?M(e.target.files):[]).map(function(e){return C(e)})}(t)]})})}function L(e){return e.filter(function(e){return-1===t.indexOf(e.name)})}function M(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];t.push(r)}return t}function F(e){if("function"!=typeof e.webkitGetAsEntry)return A(e);var t=e.webkitGetAsEntry();return t&&t.isDirectory?I(t):A(e)}function A(e){var t=e.getAsFile();if(!t)return Promise.reject(e+" is not a File");var n=C(t);return Promise.resolve(n)}function V(t){return D(this,void 0,void 0,function(){return T(this,function(e){return[2,t.isDirectory?I(t):function(r){return D(this,void 0,void 0,function(){return T(this,function(e){return[2,new Promise(function(n,t){r.file(function(e){var t=C(e,r.fullPath);n(t)},function(e){t(e)})})]})})}(t)]})})}function I(e){var t=e.createReader();return new Promise(function(i,l){var u=[];!function a(){var e=this;t.readEntries(function(o){return D(e,void 0,void 0,function(){var t,n,r;return T(this,function(e){switch(e.label){case 0:if(o.length)return[3,5];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,Promise.all(u)];case 2:return t=e.sent(),i(t),[3,4];case 3:return n=e.sent(),l(n),[3,4];case 4:return[3,6];case 5:r=Promise.all(o.map(V)),u.push(r),a(),e.label=6;case 6:return[2]}})})},function(e){l(e)})}()})}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function N(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function B(e,t){return e(t={exports:{}},t.exports),t.exports}var U=N(B(function(e){function r(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var n,o;e.exports=(o={},r.m=n=[function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){var n=e.exports={version:"2.5.0"};"number"==typeof __e&&(__e=n)},function(e,t,n){e.exports=!n(4)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(32)("wks"),o=n(9),a=n(0).Symbol,i="function"==typeof a;(e.exports=function(e){return r[e]||(r[e]=i&&a[e]||(i?a:o)("Symbol."+e))}).store=r},function(e,t,n){var h=n(0),v=n(2),m=n(8),g=n(22),b=n(10),w=function(e,t,n){var r,o,a,i,l=e&w.F,u=e&w.G,s=e&w.S,c=e&w.P,p=e&w.B,f=u?h:s?h[t]||(h[t]={}):(h[t]||{}).prototype,d=u?v:v[t]||(v[t]={}),y=d.prototype||(d.prototype={});for(r in u&&(n=t),n)a=((o=!l&&f&&void 0!==f[r])?f:n)[r],i=p&&o?b(a,h):c&&"function"==typeof a?b(Function.call,a):a,f&&g(f,r,a,e&w.U),d[r]!=a&&m(d,r,i),c&&y[r]!=a&&(y[r]=a)};h.core=v,w.F=1,w.G=2,w.S=4,w.P=8,w.B=16,w.W=32,w.U=64,w.R=128,e.exports=w},function(e,t,n){var r=n(16),o=n(21);e.exports=n(3)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var a=n(24);e.exports=function(r,o,e){if(a(r),void 0===o)return r;switch(e){case 1:return function(e){return r.call(o,e)};case 2:return function(e,t){return r.call(o,e,t)};case 3:return function(e,t,n){return r.call(o,e,t,n)}}return function(){return r.apply(o,arguments)}}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(28),o=Math.min;e.exports=function(e){return 0<e?o(r(e),9007199254740991):0}},function(e,t,n){t.__esModule=!0,t.default=function(e,t){if(e&&t){var n=Array.isArray(t)?t:t.split(","),r=e.name||"",o=e.type||"",a=o.replace(/\/.*$/,"");return n.some(function(e){var t=e.trim();return"."===t.charAt(0)?r.toLowerCase().endsWith(t.toLowerCase()):t.endsWith("/*")?a===t.replace(/\/.*$/,""):o===t})}return!0},n(14),n(34)},function(e,t,n){n(15),e.exports=n(2).Array.some},function(e,t,n){var r=n(7),o=n(25)(3);r(r.P+r.F*!n(33)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(17),o=n(18),a=n(20),i=Object.defineProperty;t.f=n(3)?Object.defineProperty:function(e,t,n){if(r(e),t=a(t,!0),r(n),o)try{return i(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(1);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){e.exports=!n(3)&&!n(4)(function(){return 7!=Object.defineProperty(n(19)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(1),o=n(0).document,a=r(o)&&r(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,n){var o=n(1);e.exports=function(e,t){if(!o(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!o(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var a=n(0),i=n(8),l=n(23),u=n(9)("src"),r=Function.toString,s=(""+r).split("toString");n(2).inspectSource=function(e){return r.call(e)},(e.exports=function(e,t,n,r){var o="function"==typeof n;o&&(l(n,"name")||i(n,"name",t)),e[t]!==n&&(o&&(l(n,u)||i(n,u,e[t]?""+e[t]:s.join(String(t)))),e===a?e[t]=n:r?e[t]?e[t]=n:i(e,t,n):(delete e[t],i(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||r.call(this)})},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var b=n(10),w=n(26),P=n(27),E=n(12),r=n(29);e.exports=function(p,e){var f=1==p,d=2==p,y=3==p,h=4==p,v=6==p,m=5==p||v,g=e||r;return function(e,t,n){for(var r,o,a=P(e),i=w(a),l=b(t,n,3),u=E(i.length),s=0,c=f?g(e,u):d?g(e,0):void 0;s<u;s++)if((m||s in i)&&(o=l(r=i[s],s,a),p))if(f)c[s]=o;else if(o)switch(p){case 3:return!0;case 5:return r;case 6:return s;case 2:c.push(r)}else if(h)return!1;return v?-1:y||h?h:c}}},function(e,t,n){var r=n(5);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(11);e.exports=function(e){return Object(r(e))}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(0<e?r:n)(e)}},function(e,t,n){var r=n(30);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){var r=n(1),o=n(31),a=n(6)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[a])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){var r=n(5);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(0),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});e.exports=function(e){return o[e]||(o[e]={})}},function(e,t,n){var r=n(4);e.exports=function(e,t){return!!e&&r(function(){t?e.call(null,function(){},1):e.call(null)})}},function(e,t,n){n(35),e.exports=n(2).String.endsWith},function(e,t,n){var r=n(7),i=n(12),l=n(36),u="".endsWith;r(r.P+r.F*n(38)("endsWith"),"String",{endsWith:function(e){var t=l(this,e,"endsWith"),n=1<arguments.length?arguments[1]:void 0,r=i(t.length),o=void 0===n?r:Math.min(i(n),r),a=String(e);return u?u.call(t,a,o):t.slice(o-a.length,o)===a}})},function(e,t,n){var r=n(37),o=n(11);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},function(e,t,n){var r=n(1),o=n(5),a=n(6)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[a])?!!t:"RegExp"==o(e))}},function(e,t,n){var r=n(6)("match");e.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}}],r.c=o,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=13))}));function le(e,t){return"application/x-moz-file"===e.type||U(e,t)}function ue(e){return"function"==typeof e.isPropagationStopped?e.isPropagationStopped():void 0!==e.cancelBubble&&e.cancelBubble}function se(e){return e.dataTransfer?Array.prototype.some.call(e.dataTransfer.types,function(e){return"Files"===e||"application/x-moz-file"===e}):!!e.target&&!!e.target.files}function ce(e){e.preventDefault()}function pe(){for(var e=arguments.length,o=new Array(e),t=0;t<e;t++)o[t]=arguments[t];return function(t){for(var e=arguments.length,n=new Array(1<e?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return o.some(function(e){return!ue(t)&&e&&e.apply(void 0,[t].concat(n)),ue(t)})}}function fe(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function de(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function ye(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(e){he(t,e,n[e])})}return t}function he(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function W(e){return(W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ve(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],0<=t.indexOf(n)||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],0<=t.indexOf(n)||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var z=ae.forwardRef(function(e,t){var n=e.children,r=function(){function t(){C.current&&(F({type:"openDialog"}),C.current.value=null,C.current.click())}function e(){V&&setTimeout(function(){C.current&&(C.current.files.length||(F({type:"closeDialog"}),"function"==typeof w&&w()))},300)}var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},i=n.accept,r=n.disabled,f=void 0!==r&&r,o=n.getFilesFromEvent,a=void 0===o?ie:o,l=n.maxSize,u=void 0===l?1/0:l,s=n.minSize,c=void 0===s?0:s,p=n.multiple,d=void 0===p||p,y=n.onDragEnter,h=n.onDragLeave,v=n.onDragOver,m=n.onDrop,g=n.onDropAccepted,b=n.onDropRejected,w=n.onFileDialogCancel,P=n.preventDropOnDocument,E=void 0===P||P,k=n.noClick,O=void 0!==k&&k,_=n.noKeyboard,S=void 0!==_&&_,D=n.noDrag,T=void 0!==D&&D,j=n.noDragEventsBubbling,R=void 0!==j&&j,x=ae.useRef(null),C=ae.useRef(null),L=de(ae.useReducer(ge,me),2),M=L[0],F=L[1],A=M.isFocused,V=M.isFileDialogActive,I=M.draggedFiles;ae.useEffect(function(){return window.addEventListener("focus",e,!1),function(){window.removeEventListener("focus",e,!1)}},[C,V,w]);function N(e){x.current&&x.current.contains(e.target)||(e.preventDefault(),G.current=[])}var B=ae.useCallback(function(e){x.current&&x.current.isEqualNode(e.target)&&(32!==e.keyCode&&13!==e.keyCode||(e.preventDefault(),t()))},[x,C]),U=ae.useCallback(function(){F({type:"focus"})},[]),W=ae.useCallback(function(){F({type:"blur"})},[]),z=ae.useCallback(function(){O||(!function(e){var t=0<arguments.length&&void 0!==e?e:window.navigator.userAgent;return function(e){return-1!==e.indexOf("MSIE")||-1!==e.indexOf("Trident/")}(t)||function(e){return-1!==e.indexOf("Edge/")}(t)}()?t():setTimeout(t,0))},[C,O]),G=ae.useRef([]);ae.useEffect(function(){return E&&(document.addEventListener("dragover",ce,!1),document.addEventListener("drop",N,!1)),function(){E&&(document.removeEventListener("dragover",ce),document.removeEventListener("drop",N))}},[x,E]);function H(e){return f?null:e}function Y(e){return S?null:H(e)}function K(e){return T?null:H(e)}var q=ae.useCallback(function(t){t.preventDefault(),t.persist(),J(t),-1===G.current.indexOf(t.target)&&(G.current=[].concat(fe(G.current),[t.target])),se(t)&&Promise.resolve(a(t)).then(function(e){ue(t)&&!R||(F({draggedFiles:e,isDragActive:!0,type:"setDraggedFiles"}),y&&y(t))})},[a,y,R]),$=ae.useCallback(function(e){if(e.preventDefault(),e.persist(),J(e),e.dataTransfer)try{e.dataTransfer.dropEffect="copy"}catch(e){}return se(e)&&v&&v(e),!1},[v,R]),X=ae.useCallback(function(t){t.preventDefault(),t.persist(),J(t);var e=G.current.filter(function(e){return e!==t.target&&x.current&&x.current.contains(e)});0<(G.current=e).length||(F({isDragActive:!1,type:"setDraggedFiles",draggedFiles:[]}),se(t)&&h&&h(t))},[x,h,R]),Z=ae.useCallback(function(r){r.preventDefault(),r.persist(),J(r),G.current=[],F({type:"reset"}),se(r)&&Promise.resolve(a(r)).then(function(e){if(!ue(r)||R){var t=[],n=[];e.forEach(function(e){le(e,i)&&function(e,t,n){return e.size<=t&&e.size>=n}(e,u,c)?t.push(e):n.push(e)}),!d&&1<t.length&&n.push.apply(n,fe(t.splice(0))),F({acceptedFiles:t,rejectedFiles:n,type:"setFiles"}),m&&m(t,n,r),0<n.length&&b&&b(n,r),0<t.length&&g&&g(t,r)}})},[d,i,c,u,a,m,g,b,R]),J=function(e){R&&e.stopPropagation()},Q=ae.useMemo(function(){return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=e.refKey,n=void 0===t?"ref":t,r=e.onKeyDown,o=e.onFocus,a=e.onBlur,i=e.onClick,l=e.onDragEnter,u=e.onDragOver,s=e.onDragLeave,c=e.onDrop,p=ve(e,["refKey","onKeyDown","onFocus","onBlur","onClick","onDragEnter","onDragOver","onDragLeave","onDrop"]);return ye(he({onKeyDown:Y(pe(r,B)),onFocus:Y(pe(o,U)),onBlur:Y(pe(a,W)),onClick:H(pe(i,z)),onDragEnter:K(pe(l,q)),onDragOver:K(pe(u,$)),onDragLeave:K(pe(s,X)),onDrop:K(pe(c,Z))},n,x),f||S?{}:{tabIndex:0},p)}},[x,B,U,W,z,q,$,X,Z,S,T,f]),ee=ae.useCallback(function(e){e.stopPropagation()},[]),te=ae.useMemo(function(){return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=e.refKey,n=void 0===t?"ref":t,r=e.onChange,o=e.onClick,a=ve(e,["refKey","onChange","onClick"]);return ye({},he({accept:i,multiple:d,type:"file",style:{display:"none"},onChange:H(pe(r,Z)),onClick:H(pe(o,ee)),autoComplete:"off",tabIndex:-1},n,C),a)}},[C,i,d,Z,f]),ne=I.length,re=d||ne<=1,oe=0<ne&&function(e,t){return e.every(function(e){return le(e,t)})}(I,i);return ye({},M,{isDragAccept:oe,isDragReject:0<ne&&(!oe||!re),isFocused:A&&!f,getRootProps:Q,getInputProps:te,rootRef:x,inputRef:C,open:H(t)})}(ve(e,["children"])),o=r.open,a=ve(r,["open"]);return ae.useEffect(function(){return"function"==typeof t?t({open:o}):"object"===W(t)&&null!==t&&(t.current={open:o}),function(){"function"==typeof t?t(null):"object"===W(t)&&null!==t&&(t.current=null)}},[t]),P.createElement(ae.Fragment,null,n(ye({},a,{open:o})))});z.displayName="Dropzone";var me={isFocused:!(z.propTypes={children:f.func,accept:f.oneOfType([f.string,f.arrayOf(f.string)]),multiple:f.bool,preventDropOnDocument:f.bool,noClick:f.bool,noKeyboard:f.bool,noDrag:f.bool,noDragEventsBubbling:f.bool,minSize:f.number,maxSize:f.number,disabled:f.bool,getFilesFromEvent:f.func,onFileDialogCancel:f.func,onDragEnter:f.func,onDragLeave:f.func,onDragOver:f.func,onDrop:f.func,onDropAccepted:f.func,onDropRejected:f.func}),isFileDialogActive:!1,isDragActive:!1,isDragAccept:!1,isDragReject:!1,draggedFiles:[],acceptedFiles:[],rejectedFiles:[]};function ge(e,t){switch(t.type){case"focus":return ye({},e,{isFocused:!0});case"blur":return ye({},e,{isFocused:!1});case"openDialog":return ye({},e,{isFileDialogActive:!0});case"closeDialog":return ye({},e,{isFileDialogActive:!1});case"setDraggedFiles":var n=t.isDragActive;return ye({},e,{draggedFiles:t.draggedFiles,isDragActive:n});case"setFiles":return ye({},e,{acceptedFiles:t.acceptedFiles,rejectedFiles:t.rejectedFiles});case"reset":return ye({},e,{isFileDialogActive:!1,isDragActive:!1,draggedFiles:[]});default:return e}}function G(n){function o(e){return Math.round(e/1e6)}var e=ae.useCallback(function(e){if(e.length){var t=e[0];(n.onFileSelected||v)(t)}},[]),a=n.maxSize||10000024,i=n.minSize||0;return P.createElement(z,{onDrop:e,maxSize:a,minSize:i,accept:"video/*"},function(e){var t=e.getRootProps,n=e.getInputProps,r=e.isDragActive;return P.createElement("div",l({},t(),{className:"rvt-file-picker"}),P.createElement(S,{name:"music"}),P.createElement("input",n()),r?P.createElement("p",null,"Drop the video here ..."):P.createElement(P.Fragment,null,P.createElement("p",null,"Drag 'n' drop a video here, or click to select one"),P.createElement("p",null,P.createElement("small",null,"(",o(i)," - ",o(a),"MB)"))))})}function H(e){var t=e.children;return P.createElement("div",{className:"rvt-status"},t)}function Y(e,t,n){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("script");"function"==typeof t&&(n=t,t={}),t=t||{},n=n||function(){},o.type=t.type||"text/javascript",o.charset=t.charset||"utf8",o.async=!("async"in t)||!!t.async,o.src=e,t.attrs&&function(e,t){for(var n in t)e.setAttribute(n,t[n])}(o,t.attrs),t.text&&(o.text=""+t.text),("onload"in o?K:q)(o,n),o.onload||K(o,n),r.appendChild(o)}function K(e,t){e.onload=function(){this.onerror=this.onload=null,t(null,e)},e.onerror=function(){this.onerror=this.onload=null,t(new Error("Failed to load "+this.src),e)}}function q(e,t){e.onreadystatechange=function(){"complete"!=this.readyState&&"loaded"!=this.readyState||(this.onreadystatechange=null,t(null,e))}}var $=B(function(e,t){function i(e,t){return!1!==t.clone&&t.isMergeableObject(e)?s(function(e){return Array.isArray(e)?[]:{}}(e),e,t):e}function l(e,t,n){return e.concat(t).map(function(e){return i(e,n)})}function a(e){return Object.keys(e).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter(function(e){return t.propertyIsEnumerable(e)}):[]}(e))}function u(t,n,r){var o={};return r.isMergeableObject(t)&&a(t).forEach(function(e){o[e]=i(t[e],r)}),a(n).forEach(function(e){r.isMergeableObject(n[e])&&t[e]?o[e]=function(e,t){if(!t.customMerge)return s;var n=t.customMerge(e);return"function"==typeof n?n:s}(e,r)(t[e],n[e],r):o[e]=i(n[e],r)}),o}function s(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||l,n.isMergeableObject=n.isMergeableObject||c;var r=Array.isArray(t),o=Array.isArray(e),a=r===o;return a?r?n.arrayMerge(e,t,n):u(e,t,n):i(t,n)}var c,n;e.exports=(c=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===n}(e)}(e)},n="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103,s.all=function(e,n){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,t){return s(e,t,n)},{})},s)}),X=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DEPRECATED_CONFIG_PROPS=t.defaultProps=t.propTypes=void 0;var n,r=(n=f)&&n.__esModule?n:{default:n};var o=r.default.string,a=r.default.bool,i=r.default.number,l=r.default.array,u=r.default.oneOfType,s=r.default.shape,c=r.default.object,p=r.default.func;t.propTypes={url:u([o,l,c]),playing:a,loop:a,controls:a,volume:i,muted:a,playbackRate:i,width:u([o,i]),height:u([o,i]),style:c,progressInterval:i,playsinline:a,pip:a,light:u([a,o]),wrapper:u([o,p,s({render:p.isRequired})]),config:s({soundcloud:s({options:c,preload:a}),youtube:s({playerVars:c,embedOptions:c,preload:a}),facebook:s({appId:o}),dailymotion:s({params:c,preload:a}),vimeo:s({playerOptions:c,preload:a}),file:s({attributes:c,tracks:l,forceVideo:a,forceAudio:a,forceHLS:a,forceDASH:a,hlsOptions:c,hlsVersion:o,dashVersion:o}),wistia:s({options:c}),mixcloud:s({options:c}),twitch:s({options:c})}),onReady:p,onStart:p,onPlay:p,onPause:p,onBuffer:p,onBufferEnd:p,onEnded:p,onError:p,onDuration:p,onSeek:p,onProgress:p,onEnablePIP:p,onDisablePIP:p},t.defaultProps={playing:!1,loop:!1,controls:!1,volume:null,muted:!1,playbackRate:1,width:"640px",height:"360px",style:{},progressInterval:1e3,playsinline:!1,pip:!1,light:!1,wrapper:"div",config:{soundcloud:{options:{visual:!0,buying:!1,liking:!1,download:!1,sharing:!1,show_comments:!1,show_playcount:!1}},youtube:{playerVars:{playsinline:1,showinfo:0,rel:0,iv_load_policy:3,modestbranding:1},embedOptions:{},preload:!1},facebook:{appId:"1309697205772819"},dailymotion:{params:{api:1,"endscreen-enable":!1},preload:!1},vimeo:{playerOptions:{autopause:!1,byline:!1,portrait:!1,title:!1},preload:!1},file:{attributes:{},tracks:[],forceVideo:!1,forceAudio:!1,forceHLS:!1,forceDASH:!1,hlsOptions:{},hlsVersion:"0.10.1",dashVersion:"2.9.2"},wistia:{options:{}},mixcloud:{options:{hide_cover:1}},twitch:{options:{}}},onReady:function(){},onStart:function(){},onPlay:function(){},onPause:function(){},onBuffer:function(){},onBufferEnd:function(){},onEnded:function(){},onError:function(){},onDuration:function(){},onSeek:function(){},onProgress:function(){},onEnablePIP:function(){},onDisablePIP:function(){}},t.DEPRECATED_CONFIG_PROPS=["soundcloudConfig","youtubeConfig","facebookConfig","dailymotionConfig","vimeoConfig","fileConfig","wistiaConfig"]});N(X);X.DEPRECATED_CONFIG_PROPS,X.defaultProps,X.propTypes;var Z=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.parseStartTime=function(e){return c(e,a)},t.parseEndTime=function(e){return c(e,l)},t.randomString=function(){return Math.random().toString(36).substr(2,5)},t.queryString=function(t){return Object.keys(t).map(function(e){return e+"="+t[e]}).join("&")},t.getSDK=function(o,a){var i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,e=3<arguments.length&&void 0!==arguments[3]?arguments[3]:function(){return!0},l=4<arguments.length&&void 0!==arguments[4]?arguments[4]:r.default;if(window[a]&&e(window[a]))return Promise.resolve(window[a]);return new Promise(function(e,t){if(p[o])p[o].push(e);else{p[o]=[e];var n=function(t){p[o].forEach(function(e){return e(t)})};if(i){var r=window[i];window[i]=function(){r&&r(),n(window[a])}}l(o,function(e){e&&t(e),i||n(window[a])})}})},t.getConfig=function(e,t,n){var r=(0,f.default)(t.config,e.config),o=!0,a=!1,i=void 0;try{for(var l,u=X.DEPRECATED_CONFIG_PROPS[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;if(e[s]){var c=s.replace(/Config$/,"");if(r=(0,f.default)(r,d({},c,e[s])),n){var p="ReactPlayer: %c"+s+" %cis deprecated, please use the config prop instead – https://github.com/CookPete/react-player#config-prop";console.warn(p,"font-weight: bold","")}}}}catch(e){a=!0,i=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw i}}return r},t.omit=function(e){for(var t,n=arguments.length,r=Array(1<n?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var a=(t=[]).concat.apply(t,r),i={},l=Object.keys(e),u=!0,s=!1,c=void 0;try{for(var p,f=l[Symbol.iterator]();!(u=(p=f.next()).done);u=!0){var d=p.value;-1===a.indexOf(d)&&(i[d]=e[d])}}catch(e){s=!0,c=e}finally{try{!u&&f.return&&f.return()}finally{if(s)throw c}}return i},t.callPlayer=function(e){var t;if(!this.player||!this.player[e]){var n="ReactPlayer: "+this.constructor.displayName+" player could not call %c"+e+"%c – ";return this.player?this.player[e]||(n+="The method was not available"):n+="The player was not available",console.warn(n,"font-weight: bold",""),null}for(var r=arguments.length,o=Array(1<r?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return(t=this.player)[e].apply(t,o)},t.isObject=y,t.isEqual=function e(t,n){if("function"==typeof t&&"function"==typeof n)return!0;if(t instanceof Array&&n instanceof Array){if(t.length!==n.length)return!1;for(var r=0;r!==t.length;r++)if(!e(t[r],n[r]))return!1;return!0}if(y(t)&&y(n)){if(Object.keys(t).length!==Object.keys(n).length)return!1;var o=!0,a=!1,i=void 0;try{for(var l,u=Object.keys(t)[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;if(!e(t[s],n[s]))return!1}}catch(e){a=!0,i=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw i}}return!0}return t===n},t.isMediaStream=function(e){return"undefined"!=typeof window&&void 0!==window.MediaStream&&e instanceof window.MediaStream};var r=o(Y),f=o($);function o(e){return e&&e.__esModule?e:{default:e}}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=/[?&#](?:start|t)=([0-9hms]+)/,l=/[?&#]end=([0-9hms]+)/,u=/(\d+)(h|m|s)/g,s=/^\d+$/;function c(e,t){var n=e.match(t);if(n){var r=n[1];if(r.match(u))return function(e){var t=0,n=u.exec(e);for(;null!==n;){var r=i(n,3),o=r[1],a=r[2];"h"===a&&(t+=60*parseInt(o,10)*60),"m"===a&&(t+=60*parseInt(o,10)),"s"===a&&(t+=parseInt(o,10)),n=u.exec(e)}return t}(r);if(s.test(r))return parseInt(r)}}var p={};function y(e){return null!==e&&"object"===(void 0===e?"undefined":n(e))}});N(Z);Z.parseStartTime,Z.parseEndTime,Z.randomString,Z.queryString,Z.getSDK,Z.getConfig,Z.omit,Z.callPlayer,Z.isObject,Z.isEqual,Z.isMediaStream;var J=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a,i=(a=P)&&a.__esModule?a:{default:a};function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,P.Component),r(s,[{key:"componentDidMount",value:function(){this.mounted=!0,this.player.load(this.props.url),this.progress()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.progressTimeout),clearTimeout(this.durationCheckTimeout),this.isReady&&this.player.stop(),this.player.disablePIP&&this.player.disablePIP(),this.mounted=!1}},{key:"componentWillReceiveProps",value:function(e){var t=this,n=this.props,r=n.url,o=n.playing,a=n.volume,i=n.muted,l=n.playbackRate,u=n.pip,s=n.loop;if(!(0,Z.isEqual)(r,e.url)){if(this.isLoading)return console.warn("ReactPlayer: the attempt to load "+e.url+" is being deferred until the player has loaded"),void(this.loadOnReady=e.url);this.isLoading=!0,this.startOnPlay=!0,this.onDurationCalled=!1,this.player.load(e.url,this.isReady)}o||!e.playing||this.isPlaying||this.player.play(),o&&!e.playing&&this.isPlaying&&this.player.pause(),!u&&e.pip&&this.player.enablePIP?this.player.enablePIP():u&&!e.pip&&this.player.disablePIP&&this.player.disablePIP(),a!==e.volume&&null!==e.volume&&this.player.setVolume(e.volume),i!==e.muted&&(e.muted?this.player.mute():(this.player.unmute(),null!==e.volume&&setTimeout(function(){return t.player.setVolume(e.volume)}))),l!==e.playbackRate&&this.player.setPlaybackRate&&this.player.setPlaybackRate(e.playbackRate),s!==e.loop&&this.player.setLoop&&this.player.setLoop(e.loop)}},{key:"getDuration",value:function(){return this.isReady?this.player.getDuration():null}},{key:"getCurrentTime",value:function(){return this.isReady?this.player.getCurrentTime():null}},{key:"getSecondsLoaded",value:function(){return this.isReady?this.player.getSecondsLoaded():null}},{key:"seekTo",value:function(e,t){var n=this;if(!this.isReady&&0!==e)return this.seekOnPlay=e,void setTimeout(function(){n.seekOnPlay=null},5e3);if(t?"fraction"===t:0<e&&e<1){var r=this.player.getDuration();return r?void this.player.seekTo(r*e):void console.warn("ReactPlayer: could not seek using fraction – duration not yet available")}this.player.seekTo(e)}},{key:"render",value:function(){var e=this.props.activePlayer;return e?i.default.createElement(e,n({},this.props,{ref:this.ref,onReady:this.onReady,onPlay:this.onPlay,onPause:this.onPause,onEnded:this.onEnded,onLoaded:this.onLoaded,onError:this.onError})):null}}]),s);function s(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return t=n=l(this,(e=s.__proto__||Object.getPrototypeOf(s)).call.apply(e,[this].concat(o))),c.call(n),l(n,t)}u.displayName="Player",u.propTypes=X.propTypes,u.defaultProps=X.defaultProps;var c=function(){var a=this;this.mounted=!1,this.isReady=!1,this.isPlaying=!1,this.isLoading=!0,this.loadOnReady=null,this.startOnPlay=!0,this.seekOnPlay=null,this.onDurationCalled=!1,this.getInternalPlayer=function(e){return a.player?a.player[e]:null},this.progress=function(){if(a.props.url&&a.player&&a.isReady){var e=a.getCurrentTime()||0,t=a.getSecondsLoaded(),n=a.getDuration();if(n){var r={playedSeconds:e,played:e/n};null!==t&&(r.loadedSeconds=t,r.loaded=t/n),r.playedSeconds===a.prevPlayed&&r.loadedSeconds===a.prevLoaded||a.props.onProgress(r),a.prevPlayed=r.playedSeconds,a.prevLoaded=r.loadedSeconds}}a.progressTimeout=setTimeout(a.progress,a.props.progressFrequency||a.props.progressInterval)},this.onReady=function(){if(a.mounted){a.isReady=!0,a.isLoading=!1;var e=a.props,t=e.onReady,n=e.playing,r=e.volume,o=e.muted;t(),o||null===r||a.player.setVolume(r),a.loadOnReady?(a.player.load(a.loadOnReady,!0),a.loadOnReady=null):n&&a.player.play(),a.onDurationCheck()}},this.onPlay=function(){a.isPlaying=!0,a.isLoading=!1;var e=a.props,t=e.onStart,n=e.onPlay,r=e.playbackRate;a.startOnPlay&&(a.player.setPlaybackRate&&a.player.setPlaybackRate(r),t(),a.startOnPlay=!1),n(),a.seekOnPlay&&(a.seekTo(a.seekOnPlay),a.seekOnPlay=null),a.onDurationCheck()},this.onPause=function(e){a.isPlaying=!1,a.isLoading||a.props.onPause(e)},this.onEnded=function(){var e=a.props,t=e.activePlayer,n=e.loop,r=e.onEnded;t.loopOnEnded&&n&&a.seekTo(0),n||(a.isPlaying=!1,r())},this.onError=function(){var e;a.isLoading=!1,(e=a.props).onError.apply(e,arguments)},this.onDurationCheck=function(){clearTimeout(a.durationCheckTimeout);var e=a.getDuration();e?a.onDurationCalled||(a.props.onDuration(e),a.onDurationCalled=!0):a.durationCheckTimeout=setTimeout(a.onDurationCheck,100)},this.onLoaded=function(){a.isLoading=!1},this.ref=function(e){e&&(a.player=e)}};t.default=u});N(J);var Q=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}t.default=function(f){var e,t;return t=e=function(){function i(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=i.__proto__||Object.getPrototypeOf(i)).call.apply(e,[this].concat(o)))).config=(0,Z.getConfig)(n.props,X.defaultProps,!0),n.getDuration=function(){return n.player?n.player.getDuration():null},n.getCurrentTime=function(){return n.player?n.player.getCurrentTime():null},n.getSecondsLoaded=function(){return n.player?n.player.getSecondsLoaded():null},n.getInternalPlayer=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"player";return n.player?n.player.getInternalPlayer(e):null},n.seekTo=function(e,t){if(!n.player)return null;n.player.seekTo(e,t)},n.ref=function(e){n.player=e},l(n,t)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,P.Component),n(i,[{key:"shouldComponentUpdate",value:function(e){return!(0,Z.isEqual)(this.props,e)}},{key:"componentWillUpdate",value:function(e){this.config=(0,Z.getConfig)(e,X.defaultProps)}},{key:"render",value:function(){var e=this.config.file,t=e.forceVideo,n=e.forceAudio,r=e.forceHLS,o=e.forceDASH,a=t||n||r||o;if(!f.canPlay(this.props.url)&&!a)return null;var i=this.props,l=i.style,u=i.width,s=i.height,c=i.wrapper,p=(0,Z.omit)(this.props,v,X.DEPRECATED_CONFIG_PROPS);return y.default.createElement(c,d({style:d({},l,{width:u,height:s})},p),y.default.createElement(h.default,d({},this.props,{ref:this.ref,activePlayer:f,config:this.config})))}}]),i}(),e.displayName=f.displayName+"Player",e.propTypes=X.propTypes,e.defaultProps=X.defaultProps,e.canPlay=f.canPlay,t};var y=o(P),h=o(J);function o(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=Object.keys(X.propTypes)});N(Q);var ee=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.YouTube=void 0;var h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},a=l(P),i=l(Q);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=/(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})|youtube\.com\/playlist\?list=/,m=/list=([a-zA-Z0-9_-]+)/;function g(e){if(m.test(e)){var t=e.match(m);return{listType:"playlist",list:o(t,2)[1]}}return{}}var s=t.YouTube=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"load",value:function(t,e){var n=this,r=this.props,o=r.playing,a=r.muted,i=r.playsinline,l=r.controls,u=r.loop,s=r.config,c=r.onError,p=s.youtube,f=p.playerVars,d=p.embedOptions,y=t&&t.match(v)[1];if(e)return m.test(t)?void this.player.loadPlaylist(g(t)):void this.player.cueVideoById({videoId:y,startSeconds:(0,Z.parseStartTime)(t)||f.start,endSeconds:(0,Z.parseEndTime)(t)||f.end});(0,Z.getSDK)("https://www.youtube.com/iframe_api","YT","onYouTubeIframeAPIReady",function(e){return e.loaded}).then(function(e){n.container&&(n.player=new e.Player(n.container,h({width:"100%",height:"100%",videoId:y,playerVars:h({autoplay:o?1:0,mute:a?1:0,controls:l?1:0,start:(0,Z.parseStartTime)(t),end:(0,Z.parseEndTime)(t),origin:window.location.origin,playsinline:i},g(t),f),events:{onReady:function(){u&&n.player.setLoop(!0),n.props.onReady()},onStateChange:n.onStateChange,onError:function(e){return c(e.data)}}},d)))},c)}},{key:"play",value:function(){this.callPlayer("playVideo")}},{key:"pause",value:function(){this.callPlayer("pauseVideo")}},{key:"stop",value:function(){document.body.contains(this.callPlayer("getIframe"))&&this.callPlayer("stopVideo")}},{key:"seekTo",value:function(e){this.callPlayer("seekTo",e),this.props.playing||this.pause()}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("setPlaybackRate",e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentTime")}},{key:"getSecondsLoaded",value:function(){return this.callPlayer("getVideoLoadedFraction")*this.getDuration()}},{key:"render",value:function(){return a.default.createElement("div",{style:{width:"100%",height:"100%"}},a.default.createElement("div",{ref:this.ref}))}}]),c);function c(){var e,t,m;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=m=u(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(r)))).callPlayer=Z.callPlayer,m.onStateChange=function(e){var t=e.data,n=m.props,r=n.onPlay,o=n.onPause,a=n.onBuffer,i=n.onBufferEnd,l=n.onEnded,u=n.onReady,s=n.loop,c=window.YT.PlayerState,p=c.PLAYING,f=c.PAUSED,d=c.BUFFERING,y=c.ENDED,h=c.CUED;if(t===p&&(r(),i()),t===f&&o(),t===d&&a(),t===y){var v=!!m.callPlayer("getPlaylist");s&&!v&&m.play(),l()}t===h&&u()},m.mute=function(){m.callPlayer("mute")},m.unmute=function(){m.callPlayer("unMute")},m.ref=function(e){m.container=e},u(m,t)}s.displayName="YouTube",s.canPlay=function(e){return v.test(e)},t.default=(0,i.default)(s)});N(ee);ee.YouTube;var te=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.SoundCloud=void 0;var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(Q);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=/(soundcloud\.com|snd\.sc)\/.+$/,s=t.SoundCloud=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(p,P.Component),n(p,[{key:"load",value:function(l,u){var s=this;(0,Z.getSDK)("https://w.soundcloud.com/player/api.js","SC").then(function(e){if(s.iframe){var t=e.Widget.Events,n=t.PLAY,r=t.PLAY_PROGRESS,o=t.PAUSE,a=t.FINISH,i=t.ERROR;u||(s.player=e.Widget(s.iframe),s.player.bind(n,s.props.onPlay),s.player.bind(o,s.props.onPause),s.player.bind(r,function(e){s.currentTime=e.currentPosition/1e3,s.fractionLoaded=e.loadedProgress}),s.player.bind(a,function(){return s.props.onEnded()}),s.player.bind(i,function(e){return s.props.onError(e)})),s.player.load(l,c({},s.props.config.soundcloud.options,{callback:function(){s.player.getDuration(function(e){s.duration=e/1e3,s.props.onReady()})}}))}})}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seekTo",1e3*e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.fractionLoaded*this.duration}},{key:"render",value:function(){return o.default.createElement("iframe",{ref:this.ref,src:"https://w.soundcloud.com/player/?url="+encodeURIComponent(this.props.url),style:{width:"100%",height:"100%"},frameBorder:0,allow:"autoplay"})}}]),p);function p(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=p.__proto__||Object.getPrototypeOf(p)).call.apply(e,[this].concat(o)))).callPlayer=Z.callPlayer,n.duration=null,n.currentTime=null,n.fractionLoaded=null,n.mute=function(){n.setVolume(0)},n.unmute=function(){null!==n.props.volume&&n.setVolume(n.props.volume)},n.ref=function(e){n.iframe=e},l(n,t)}s.displayName="SoundCloud",s.canPlay=function(e){return u.test(e)},s.loopOnEnded=!0,t.default=(0,a.default)(s)});N(te);te.SoundCloud;var ne=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Vimeo=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=l(P),i=l(Q);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=/vimeo\.com\/.+/,c=/vimeo\.com\/external\/[0-9]+\..+/,p=t.Vimeo=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,P.Component),n(f,[{key:"load",value:function(t){var n=this;this.duration=null,(0,Z.getSDK)("https://player.vimeo.com/api/player.js","Vimeo").then(function(e){n.container&&(n.player=new e.Player(n.container,r({url:t,autoplay:n.props.playing,muted:n.props.muted,loop:n.props.loop,playsinline:n.props.playsinline},n.props.config.vimeo.playerOptions)),n.player.ready().then(function(){var e=n.container.querySelector("iframe");e.style.width="100%",e.style.height="100%"}).catch(n.props.onError),n.player.on("loaded",function(){n.props.onReady(),n.refreshDuration()}),n.player.on("play",function(){n.props.onPlay(),n.refreshDuration()}),n.player.on("pause",n.props.onPause),n.player.on("seeked",function(e){return n.props.onSeek(e.seconds)}),n.player.on("ended",n.props.onEnded),n.player.on("error",n.props.onError),n.player.on("timeupdate",function(e){var t=e.seconds;n.currentTime=t}),n.player.on("progress",function(e){var t=e.seconds;n.secondsLoaded=t}))},this.props.onError)}},{key:"refreshDuration",value:function(){var t=this;this.player.getDuration().then(function(e){t.duration=e})}},{key:"play",value:function(){var e=this.callPlayer("play");e&&e.catch(this.props.onError)}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){this.callPlayer("unload")}},{key:"seekTo",value:function(e){this.callPlayer("setCurrentTime",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.secondsLoaded}},{key:"render",value:function(){return a.default.createElement("div",{key:this.props.url,ref:this.ref,style:{width:"100%",height:"100%",overflow:"hidden",backgroundColor:"black"}})}}]),f);function f(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=u(this,(e=f.__proto__||Object.getPrototypeOf(f)).call.apply(e,[this].concat(o)))).callPlayer=Z.callPlayer,n.duration=null,n.currentTime=null,n.secondsLoaded=null,n.mute=function(){n.setVolume(0)},n.unmute=function(){null!==n.props.volume&&n.setVolume(n.props.volume)},n.ref=function(e){n.container=e},u(n,t)}p.displayName="Vimeo",p.canPlay=function(e){return!c.test(e)&&s.test(e)},t.default=(0,i.default)(p)});N(ne);ne.Vimeo;var re=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Facebook=void 0;var n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(Q);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u="//connect.facebook.net/en_US/sdk.js",s="fbAsyncInit",c=/facebook\.com\/([^/?].+\/)?video(s|\.php)[/?].*$/,p=t.Facebook=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,P.Component),n(f,[{key:"load",value:function(e,t){var n=this;t?(0,Z.getSDK)(u,"FB",s).then(function(e){return e.XFBML.parse()}):(0,Z.getSDK)(u,"FB",s).then(function(e){e.init({appId:n.props.config.facebook.appId,xfbml:!0,version:"v2.5"}),e.Event.subscribe("xfbml.render",function(e){n.props.onLoaded()}),e.Event.subscribe("xfbml.ready",function(e){"video"===e.type&&e.id===n.playerID&&(n.player=e.instance,n.player.subscribe("startedPlaying",n.props.onPlay),n.player.subscribe("paused",n.props.onPause),n.player.subscribe("finishedPlaying",n.props.onEnded),n.player.subscribe("startedBuffering",n.props.onBuffer),n.player.subscribe("finishedBuffering",n.props.onBufferEnd),n.player.subscribe("error",n.props.onError),n.props.muted||n.callPlayer("unmute"),n.props.onReady(),document.getElementById(n.playerID).querySelector("iframe").style.visibility="visible")})})}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentPosition")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%",backgroundColor:"black"},id:this.playerID,className:"fb-video","data-href":this.props.url,"data-autoplay":this.props.playing?"true":"false","data-allowfullscreen":"true","data-controls":this.props.controls?"true":"false"})}}]),f);function f(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=f.__proto__||Object.getPrototypeOf(f)).call.apply(e,[this].concat(o)))).callPlayer=Z.callPlayer,n.playerID="facebook-player-"+(0,Z.randomString)(),n.mute=function(){n.callPlayer("mute")},n.unmute=function(){n.callPlayer("unmute")},l(n,t)}p.displayName="Facebook",p.canPlay=function(e){return c.test(e)},p.loopOnEnded=!0,t.default=(0,a.default)(p)});N(re);re.Facebook;var oe=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Streamable=void 0;var n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(Q);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=/streamable\.com\/([a-z0-9]+)$/,s=t.Streamable=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"load",value:function(e){var r=this;(0,Z.getSDK)("//cdn.embed.ly/player-0.1.0.min.js","playerjs").then(function(e){r.iframe&&(r.player=new e.Player(r.iframe),r.player.setLoop(r.props.loop),r.player.on("ready",r.props.onReady),r.player.on("play",r.props.onPlay),r.player.on("pause",r.props.onPause),r.player.on("seeked",r.props.onSeek),r.player.on("ended",r.props.onEnded),r.player.on("error",r.props.onError),r.player.on("timeupdate",function(e){var t=e.duration,n=e.seconds;r.duration=t,r.currentTime=n}),r.player.on("buffered",function(e){var t=e.percent;r.duration&&(r.secondsLoaded=r.duration*t)}),r.props.muted&&r.player.mute())},this.props.onError)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("setCurrentTime",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.secondsLoaded}},{key:"render",value:function(){var e=this.props.url.match(u)[1];return o.default.createElement("iframe",{ref:this.ref,src:"https://streamable.com/o/"+e,frameBorder:"0",scrolling:"no",style:{width:"100%",height:"100%"},allowFullScreen:!0})}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).callPlayer=Z.callPlayer,n.duration=null,n.currentTime=null,n.secondsLoaded=null,n.mute=function(){n.callPlayer("mute")},n.unmute=function(){n.callPlayer("unmute")},n.ref=function(e){n.iframe=e},l(n,t)}s.displayName="Streamable",s.canPlay=function(e){return u.test(e)},t.default=(0,a.default)(s)});N(oe);oe.Streamable;var be=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Wistia=void 0;var d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(Q);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=/(?:wistia\.com|wi\.st)\/(?:medias|embed)\/(.*)$/,s=t.Wistia=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"getID",value:function(e){return e&&e.match(u)[1]}},{key:"load",value:function(e){var t=this,n=this.props,r=n.playing,o=n.muted,a=n.controls,i=n.onReady,l=n.onPlay,u=n.onPause,s=n.onSeek,c=n.onEnded,p=n.config,f=n.onError;(0,Z.getSDK)("//fast.wistia.com/assets/external/E-v1.js","Wistia").then(function(){window._wq=window._wq||[],window._wq.push({id:t.getID(e),options:d({autoPlay:r,silentAutoPlay:"allow",muted:o,controlsVisibleOnLoad:a},p.wistia.options),onReady:function(e){t.player=e,t.unbind(),t.player.bind("play",l),t.player.bind("pause",u),t.player.bind("seek",s),t.player.bind("end",c),i()}})},f)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"unbind",value:function(){var e=this.props,t=e.onPlay,n=e.onPause,r=e.onSeek,o=e.onEnded;this.player.unbind("play",t),this.player.unbind("pause",n),this.player.unbind("seek",r),this.player.unbind("end",o)}},{key:"stop",value:function(){this.unbind(),this.callPlayer("remove")}},{key:"seekTo",value:function(e){this.callPlayer("time",e)}},{key:"setVolume",value:function(e){this.callPlayer("volume",e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("playbackRate",e)}},{key:"getDuration",value:function(){return this.callPlayer("duration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("time")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){var e=this.getID(this.props.url),t="wistia_embed wistia_async_"+e;return o.default.createElement("div",{key:e,className:t,style:{width:"100%",height:"100%"}})}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).callPlayer=Z.callPlayer,n.mute=function(){n.callPlayer("mute")},n.unmute=function(){n.callPlayer("unmute")},l(n,t)}s.displayName="Wistia",s.canPlay=function(e){return u.test(e)},s.loopOnEnded=!0,t.default=(0,a.default)(s)});N(be);be.Wistia;var we=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Twitch=void 0;var d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(Q);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var y=/(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/,h=/(?:www\.|go\.)?twitch\.tv\/([a-z0-9_]+)($|\?)/,u=t.Twitch=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,P.Component),n(s,[{key:"load",value:function(e,t){var u=this,n=this.props,s=n.playsinline,r=n.onError,c=n.config,p=h.test(e),f=p?e.match(h)[1]:e.match(y)[1];t?p?this.player.setChannel(f):this.player.setVideo("v"+f):(0,Z.getSDK)("https://player.twitch.tv/js/embed/v1.js","Twitch").then(function(e){u.player=new e.Player(u.playerID,d({video:p?"":f,channel:p?f:"",height:"100%",width:"100%",playsinline:s,autoplay:u.props.playing,muted:u.props.muted},c.twitch.options));var t=e.Player,n=t.READY,r=t.PLAYING,o=t.PAUSE,a=t.ENDED,i=t.ONLINE,l=t.OFFLINE;u.player.addEventListener(n,u.props.onReady),u.player.addEventListener(r,u.props.onPlay),u.player.addEventListener(o,u.props.onPause),u.player.addEventListener(a,u.props.onEnded),u.player.addEventListener(i,u.props.onLoaded),u.player.addEventListener(l,u.props.onLoaded)},r)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){this.callPlayer("pause")}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentTime")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%"},id:this.playerID})}}]),s);function s(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=s.__proto__||Object.getPrototypeOf(s)).call.apply(e,[this].concat(o)))).callPlayer=Z.callPlayer,n.playerID="twitch-player-"+(0,Z.randomString)(),n.mute=function(){n.callPlayer("setMuted",!0)},n.unmute=function(){n.callPlayer("setMuted",!1)},l(n,t)}u.displayName="Twitch",u.canPlay=function(e){return y.test(e)||h.test(e)},u.loopOnEnded=!0,t.default=(0,a.default)(u)});N(we);we.Twitch;var Pe=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DailyMotion=void 0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(Q);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var p=/^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/,u=t.DailyMotion=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,P.Component),n(f,[{key:"load",value:function(n){var r=this,e=this.props,o=e.controls,a=e.config,i=e.onError,t=e.playing,l=n.match(p),u=c(l,2)[1];this.player?this.player.load(u,{start:(0,Z.parseStartTime)(n),autoplay:t}):(0,Z.getSDK)("https://api.dmcdn.net/all.js","DM","dmAsyncInit",function(e){return e.player}).then(function(e){if(r.container){var t=e.player;r.player=new t(r.container,{width:"100%",height:"100%",video:u,params:s({controls:o,autoplay:r.props.playing,mute:r.props.muted,start:(0,Z.parseStartTime)(n),origin:window.location.origin},a.dailymotion.params),events:{apiready:r.props.onReady,seeked:function(){return r.props.onSeek(r.player.currentTime)},video_end:r.props.onEnded,durationchange:r.onDurationChange,pause:r.props.onPause,playing:r.props.onPlay,waiting:r.props.onBuffer,error:function(e){return i(e)}}})}},i)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.player.duration||null}},{key:"getCurrentTime",value:function(){return this.player.currentTime}},{key:"getSecondsLoaded",value:function(){return this.player.bufferedTime}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%",backgroundColor:"black"}},o.default.createElement("div",{ref:this.ref}))}}]),f);function f(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=f.__proto__||Object.getPrototypeOf(f)).call.apply(e,[this].concat(o)))).callPlayer=Z.callPlayer,n.onDurationChange=function(){var e=n.getDuration();n.props.onDuration(e)},n.mute=function(){n.callPlayer("setMuted",!0)},n.unmute=function(){n.callPlayer("setMuted",!1)},n.ref=function(e){n.container=e},l(n,t)}u.displayName="DailyMotion",u.canPlay=function(e){return p.test(e)},u.loopOnEnded=!0,t.default=(0,a.default)(u)});N(Pe);Pe.DailyMotion;var Ee=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Mixcloud=void 0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=l(P),o=l(Q);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=/mixcloud\.com\/([^/]+\/[^/]+)/,c=t.Mixcloud=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(p,P.Component),n(p,[{key:"load",value:function(e){var n=this;(0,Z.getSDK)("//widget.mixcloud.com/media/js/widgetApi.js","Mixcloud").then(function(e){n.player=e.PlayerWidget(n.iframe),n.player.ready.then(function(){n.player.events.play.on(n.props.onPlay),n.player.events.pause.on(n.props.onPause),n.player.events.ended.on(n.props.onEnded),n.player.events.error.on(n.props.error),n.player.events.progress.on(function(e,t){n.currentTime=e,n.duration=t}),n.props.onReady()})},this.props.onError)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.config,r=t.match(s)[1],o=(0,Z.queryString)(a({},n.mixcloud.options,{feed:"/"+r+"/"}));return i.default.createElement("iframe",{key:r,ref:this.ref,style:{width:"100%",height:"100%"},src:"https://www.mixcloud.com/widget/iframe/?"+o,frameBorder:"0"})}}]),p);function p(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=u(this,(e=p.__proto__||Object.getPrototypeOf(p)).call.apply(e,[this].concat(o)))).callPlayer=Z.callPlayer,n.duration=null,n.currentTime=null,n.secondsLoaded=null,n.mute=function(){},n.unmute=function(){},n.ref=function(e){n.iframe=e},u(n,t)}c.displayName="Mixcloud",c.canPlay=function(e){return s.test(e)},c.loopOnEnded=!0,t.default=(0,o.default)(c)});N(Ee);Ee.Mixcloud;var ke=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.FilePlayer=void 0;var p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=a(P),o=a(Q);function a(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l="undefined"!=typeof navigator&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,u=/\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i,s=/\.(mp4|og[gv]|webm|mov|m4v)($|\?)/i,c=/\.(m3u8)($|\?)/i,d=/\.(mpd)($|\?)/i,y=/www\.dropbox\.com\/.+/;function h(e){if(e instanceof Array){var t=!0,n=!1,r=void 0;try{for(var o,a=e[Symbol.iterator]();!(t=(o=a.next()).done);t=!0){var i=o.value;if("string"==typeof i&&h(i))return!0;if(h(i.src))return!0}}catch(e){n=!0,r=e}finally{try{!t&&a.return&&a.return()}finally{if(n)throw r}}return!1}return!!(0,Z.isMediaStream)(e)||(u.test(e)||s.test(e)||c.test(e)||d.test(e))}var v=t.FilePlayer=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(m,P.Component),n(m,[{key:"componentDidMount",value:function(){this.addListeners(),l&&this.player.load()}},{key:"componentWillReceiveProps",value:function(e){this.shouldUseAudio(this.props)!==this.shouldUseAudio(e)&&this.removeListeners()}},{key:"componentDidUpdate",value:function(e){this.shouldUseAudio(this.props)!==this.shouldUseAudio(e)&&this.addListeners()}},{key:"componentWillUnmount",value:function(){this.removeListeners()}},{key:"addListeners",value:function(){var e=this.props,t=e.onReady,n=e.onPlay,r=e.onBuffer,o=e.onBufferEnd,a=e.onPause,i=e.onEnded,l=e.onError,u=e.playsinline,s=e.onEnablePIP;this.player.addEventListener("canplay",t),this.player.addEventListener("play",n),this.player.addEventListener("waiting",r),this.player.addEventListener("playing",o),this.player.addEventListener("pause",a),this.player.addEventListener("seeked",this.onSeek),this.player.addEventListener("ended",i),this.player.addEventListener("error",l),this.player.addEventListener("enterpictureinpicture",s),this.player.addEventListener("leavepictureinpicture",this.onDisablePIP),u&&(this.player.setAttribute("playsinline",""),this.player.setAttribute("webkit-playsinline",""),this.player.setAttribute("x5-playsinline",""))}},{key:"removeListeners",value:function(){var e=this.props,t=e.onReady,n=e.onPlay,r=e.onBuffer,o=e.onBufferEnd,a=e.onPause,i=e.onEnded,l=e.onError,u=e.onEnablePIP;this.player.removeEventListener("canplay",t),this.player.removeEventListener("play",n),this.player.removeEventListener("waiting",r),this.player.removeEventListener("playing",o),this.player.removeEventListener("pause",a),this.player.removeEventListener("seeked",this.onSeek),this.player.removeEventListener("ended",i),this.player.removeEventListener("error",l),this.player.removeEventListener("enterpictureinpicture",u),this.player.removeEventListener("leavepictureinpicture",this.onDisablePIP)}},{key:"shouldUseAudio",value:function(e){return!e.config.file.forceVideo&&!e.config.file.attributes.poster&&(u.test(e.url)||e.config.file.forceAudio)}},{key:"shouldUseHLS",value:function(e){return c.test(e)&&!l||this.props.config.file.forceHLS}},{key:"shouldUseDASH",value:function(e){return d.test(e)||this.props.config.file.forceDASH}},{key:"load",value:function(t){var r=this,e=this.props.config.file,n=e.hlsVersion,o=e.dashVersion;if(this.shouldUseHLS(t)&&(0,Z.getSDK)("https://cdnjs.cloudflare.com/ajax/libs/hls.js/VERSION/hls.min.js".replace("VERSION",n),"Hls").then(function(n){r.hls=new n(r.props.config.file.hlsOptions),r.hls.on(n.Events.ERROR,function(e,t){r.props.onError(e,t,r.hls,n)}),r.hls.loadSource(t),r.hls.attachMedia(r.player)}),this.shouldUseDASH(t)&&(0,Z.getSDK)("https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js".replace("VERSION",o),"dashjs").then(function(e){r.dash=e.MediaPlayer().create(),r.dash.initialize(r.player,t,r.props.playing),r.dash.getDebug().setLogToBrowserConsole(!1)}),t instanceof Array)this.player.load();else if((0,Z.isMediaStream)(t))try{this.player.srcObject=t}catch(e){this.player.src=window.URL.createObjectURL(t)}}},{key:"play",value:function(){var e=this.player.play();e&&e.catch(this.props.onError)}},{key:"pause",value:function(){this.player.pause()}},{key:"stop",value:function(){this.player.removeAttribute("src"),this.hls&&this.hls.destroy(),this.dash&&this.dash.reset()}},{key:"seekTo",value:function(e){this.player.currentTime=e}},{key:"setVolume",value:function(e){this.player.volume=e}},{key:"enablePIP",value:function(){this.player.requestPictureInPicture&&document.pictureInPictureElement!==this.player&&this.player.requestPictureInPicture()}},{key:"disablePIP",value:function(){document.exitPictureInPicture&&document.pictureInPictureElement===this.player&&document.exitPictureInPicture()}},{key:"setPlaybackRate",value:function(e){this.player.playbackRate=e}},{key:"getDuration",value:function(){if(!this.player)return null;var e=this.player,t=e.duration,n=e.seekable;return t===1/0&&0<n.length?n.end(n.length-1):t}},{key:"getCurrentTime",value:function(){return this.player?this.player.currentTime:null}},{key:"getSecondsLoaded",value:function(){if(!this.player)return null;var e=this.player.buffered;if(0===e.length)return 0;var t=e.end(e.length-1),n=this.getDuration();return n<t?n:t}},{key:"getSource",value:function(e){var t=this.shouldUseHLS(e),n=this.shouldUseDASH(e);if(!(e instanceof Array||(0,Z.isMediaStream)(e)||t||n))return y.test(e)?e.replace("www.dropbox.com","dl.dropboxusercontent.com"):e}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.playing,r=e.loop,o=e.controls,a=e.muted,i=e.config,l=e.width,u=e.height,s=this.shouldUseAudio(this.props)?"audio":"video",c={width:"auto"===l?l:"100%",height:"auto"===u?u:"100%"};return f.default.createElement(s,p({ref:this.ref,src:this.getSource(t),style:c,preload:"auto",autoPlay:n||void 0,controls:o,muted:a,loop:r},i.file.attributes),t instanceof Array&&t.map(this.renderSourceElement),i.file.tracks.map(this.renderTrack))}}]),m);function m(){var e,t,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,m);for(var n=arguments.length,r=Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=o=i(this,(e=m.__proto__||Object.getPrototypeOf(m)).call.apply(e,[this].concat(r)))).onDisablePIP=function(e){var t=o.props,n=t.onDisablePIP,r=t.playing;n(e),r&&o.play()},o.onSeek=function(e){o.props.onSeek(e.target.currentTime)},o.mute=function(){o.player.muted=!0},o.unmute=function(){o.player.muted=!1},o.renderSourceElement=function(e,t){return"string"==typeof e?f.default.createElement("source",{key:t,src:e}):f.default.createElement("source",p({key:t},e))},o.renderTrack=function(e,t){return f.default.createElement("track",p({key:t},e))},o.ref=function(e){o.player=e},i(o,t)}v.displayName="FilePlayer",v.canPlay=h,v.canEnablePIP=function(e){return h(e)&&!!document.pictureInPictureEnabled&&!u.test(e)},t.default=(0,o.default)(v)});N(ke);ke.FilePlayer;var Oe=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=[ee.YouTube,te.SoundCloud,ne.Vimeo,re.Facebook,oe.Streamable,be.Wistia,we.Twitch,Pe.DailyMotion,Ee.Mixcloud,ke.FilePlayer]});N(Oe);var _e=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a,i=(a=P)&&a.__esModule?a:{default:a};function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u="64px",s=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"componentDidMount",value:function(){this.mounted=!0,this.fetchImage(this.props)}},{key:"componentWillReceiveProps",value:function(e){var t=this.props,n=t.url,r=t.light;n===e.url&&r===e.light||this.fetchImage(e)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"fetchImage",value:function(e){var n=this,t=e.url,r=e.light;if("string"!=typeof r)return this.setState({image:null}),window.fetch("https://noembed.com/embed?url="+t).then(function(e){return e.json()}).then(function(e){if(e.thumbnail_url&&n.mounted){var t=e.thumbnail_url.replace("height=100","height=480");n.setState({image:t})}});this.setState({image:r})}},{key:"render",value:function(){var e=this.props.onClick,t=this.state.image,n={display:"flex",alignItems:"center",justifyContent:"center"},r={preview:o({width:"100%",height:"100%",backgroundImage:t?"url("+t+")":void 0,backgroundSize:"cover",backgroundPosition:"center",cursor:"pointer"},n),shadow:o({background:"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)",borderRadius:u,width:u,height:u},n),playIcon:{borderStyle:"solid",borderWidth:"16px 0 16px 26px",borderColor:"transparent transparent transparent white",marginLeft:"7px"}};return i.default.createElement("div",{style:r.preview,className:"react-player__preview",onClick:e},i.default.createElement("div",{style:r.shadow,className:"react-player__shadow"},i.default.createElement("div",{style:r.playIcon,className:"react-player__play-icon"})))}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).mounted=!1,n.state={image:null},l(n,t)}t.default=s});N(_e);var Se=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r=[],o=!0,a=!1,i=void 0;try{for(var l,u=f[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;!s.Player.canPlay(e)&&n[s.configKey].preload&&r.push(c.default.createElement(p.default,{key:s.Player.displayName,activePlayer:s.Player,url:s.url,controls:t,playing:!0,muted:!0,style:{display:"none"}}))}}catch(e){a=!0,i=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw i}}return r};var c=n(P),p=n(J);function n(e){return e&&e.__esModule?e:{default:e}}var f=[{Player:ee.YouTube,configKey:"youtube",url:"https://www.youtube.com/watch?v=GlCmAC4MHek"},{Player:te.SoundCloud,configKey:"soundcloud",url:"https://soundcloud.com/seucheu/john-cage-433-8-bit-version"},{Player:ne.Vimeo,configKey:"vimeo",url:"https://vimeo.com/300970506"},{Player:Pe.DailyMotion,configKey:"dailymotion",url:"http://www.dailymotion.com/video/xqdpyk"}]});N(Se);function De(e){var t=e.onPlayPauseClick,n=e.playing,r=(e.onReselectFile,e.processing),o=e.onEncode,a=e.showEncodeBtn,i=e.canDownload,l=e.onDownload,u=e.frameCurrentX,s=e.frameCurrentWidth,c=e.frameCurrentPlayedX;return P.createElement("div",{className:"rvt-controls-cont"},P.createElement("div",{className:"videoSelectedTimeFrameContainer"},P.createElement("div",{className:"videoSelectedTimeFrameContainerCurrent",style:{left:"".concat(u,"%"),width:"".concat(s,"%")}}),P.createElement("div",{className:"videoSelectedTimeFrameContainerCurrentPlayed",style:{left:"".concat(c,"%")}})),P.createElement("div",{className:"px-2 pb-0"},P.createElement("a",{className:"rvt-controller-item",title:"Pause",onClick:t},P.createElement(S,{name:n?"pause":"play"})),a&&P.createElement("div",{className:"rvt-controller-dropdown rvt-controller-list-wrap"},i?P.createElement("a",{className:"rvt-controller-item",onClick:l},P.createElement(S,{name:"download"})):P.createElement("a",{className:"rvt-controller-item",onClick:o},P.createElement(S,{name:r?"spin":"replay"})))))}var Te=B(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.FilePlayer=t.Mixcloud=t.DailyMotion=t.Twitch=t.Wistia=t.Streamable=t.Facebook=t.Vimeo=t.SoundCloud=t.YouTube=void 0;var h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"YouTube",{enumerable:!0,get:function(){return i(ee).default}}),Object.defineProperty(t,"SoundCloud",{enumerable:!0,get:function(){return i(te).default}}),Object.defineProperty(t,"Vimeo",{enumerable:!0,get:function(){return i(ne).default}}),Object.defineProperty(t,"Facebook",{enumerable:!0,get:function(){return i(re).default}}),Object.defineProperty(t,"Streamable",{enumerable:!0,get:function(){return i(oe).default}}),Object.defineProperty(t,"Wistia",{enumerable:!0,get:function(){return i(be).default}}),Object.defineProperty(t,"Twitch",{enumerable:!0,get:function(){return i(we).default}}),Object.defineProperty(t,"DailyMotion",{enumerable:!0,get:function(){return i(Pe).default}}),Object.defineProperty(t,"Mixcloud",{enumerable:!0,get:function(){return i(Ee).default}}),Object.defineProperty(t,"FilePlayer",{enumerable:!0,get:function(){return i(ke).default}});var v=i(P),o=i(Oe),a=i(J),m=i(_e),g=i(Se);function i(e){return e&&e.__esModule?e:{default:e}}function b(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var w=Object.keys(X.propTypes),u=[],s=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"componentDidMount",value:function(){this.props.progressFrequency&&console.warn("ReactPlayer: %cprogressFrequency%c is deprecated, please use %cprogressInterval%c instead","font-weight: bold","","font-weight: bold","")}},{key:"shouldComponentUpdate",value:function(e,t){return!(0,Z.isEqual)(this.props,e)||!(0,Z.isEqual)(this.state,t)}},{key:"componentWillUpdate",value:function(e){this.config=(0,Z.getConfig)(e,X.defaultProps),!this.props.light&&e.light&&this.setState({showPreview:!0})}},{key:"getActivePlayer",value:function(e){for(var t=[].concat(b(u),b(o.default)),n=0;n<t.length;n++){var r=t[n];if(r.canPlay(e))return r}return ke.FilePlayer}},{key:"renderActivePlayer",value:function(e,t){return e?v.default.createElement(a.default,h({},this.props,{key:t.displayName,ref:this.activePlayerRef,config:this.config,activePlayer:t,onReady:this.onReady})):null}},{key:"sortPlayers",value:function(e,t){return e&&t?e.key<t.key?-1:1:0}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.controls,r=e.style,o=e.width,a=e.height,i=e.light,l=e.wrapper,u=this.state.showPreview&&t,s=(0,Z.omit)(this.props,w,X.DEPRECATED_CONFIG_PROPS),c=this.getActivePlayer(t),p=this.renderActivePlayer(t,c),f=(0,g.default)(t,n,this.config),d=[p].concat(b(f)).sort(this.sortPlayers),y=v.default.createElement(m.default,{url:t,light:i,onClick:this.onClickPreview});return v.default.createElement(l,h({ref:this.wrapperRef,style:h({},r,{width:o,height:a})},s),u?y:d)}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).config=(0,Z.getConfig)(n.props,X.defaultProps,!0),n.state={showPreview:!!n.props.light},n.onClickPreview=function(){n.setState({showPreview:!1})},n.getDuration=function(){return n.player?n.player.getDuration():null},n.getCurrentTime=function(){return n.player?n.player.getCurrentTime():null},n.getSecondsLoaded=function(){return n.player?n.player.getSecondsLoaded():null},n.getInternalPlayer=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"player";return n.player?n.player.getInternalPlayer(e):null},n.seekTo=function(e,t){if(!n.player)return null;n.player.seekTo(e,t)},n.onReady=function(){n.props.onReady(n)},n.wrapperRef=function(e){n.wrapper=e},n.activePlayerRef=function(e){n.player=e},l(n,t)}s.addCustomPlayer=function(e){u.push(e)},s.removeCustomPlayers=function(){u=[]},s.displayName="ReactPlayer",s.propTypes=X.propTypes,s.defaultProps=X.defaultProps,s.canPlay=function(e){for(var t=[].concat(b(u),b(o.default)),n=0;n<t.length;n++){if(t[n].canPlay(e))return!0}return!1},s.canEnablePIP=function(e){for(var t=[].concat(b(u),b(o.default)),n=0;n<t.length;n++){var r=t[n];if(r.canEnablePIP&&r.canEnablePIP(e))return!0}return!1},t.default=s}),je=N(Te),Re=(Te.FilePlayer,Te.Mixcloud,Te.DailyMotion,Te.Twitch,Te.Wistia,Te.Streamable,Te.Facebook,Te.Vimeo,Te.SoundCloud,Te.YouTube,function(){function a(){var e,o;s(this,a);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return c(y(o=h(this,(e=d(a)).call.apply(e,[this].concat(n)))),"state",{playing:o.props.playVideo||!1}),c(y(o),"handlePlayerProgress",function(e){if(e.loaded){var t=e.playedSeconds;console.log("handlePlayerProgress "+t);var n=o.props.timeRange.start,r=o.props.timeRange.end<=t;t<=n&&o.player.seekTo(n,"seconds"),r&&o.player.seekTo(n,"seconds"),(o.props.onPlayerProgress||v)(t)}}),c(y(o),"handleOnPause",function(){(o.props.onPlayerPause||v)()}),c(y(o),"handleOnPlay",function(){(o.props.onPlayerPlay||v)()}),o}return p(a,P.Component),i(a,[{key:"componentWillReceiveProps",value:function(e){var t=e.timeRange,n=this.props.timeRange;(n&&t.start!==n.start||!n&&0<t.start)&&(this.setState({playing:!1}),this.player.seekTo(t.start,"seconds")),e.playVideo!==this.props.playVideo&&this.setState({playing:e.playVideo})}},{key:"displaySeconds",value:function(e){return e.toFixed(2)+"s"}},{key:"render",value:function(){var e,t=this,n=this.props.timeRange,r=n.start,o=n.end;return P.createElement("div",{className:"rvt-player-cont",onContextMenu:function(){}},P.createElement("div",{className:"player-wrapper"},P.createElement(je,(c(e={onPlay:this.handleOnPause},"onPlay",this.handleOnPlay),c(e,"onProgress",this.handlePlayerProgress),c(e,"url",this.props.src),c(e,"ref",function(e){return t.player=e}),c(e,"playing",this.state.playing),c(e,"className","react-player"),c(e,"width","100%"),c(e,"height","100%"),e)),this.props.children),P.createElement("div",{className:"rvt-player-time-range-cont"},P.createElement("span",{className:"rvt-player-time-range"},"From: ",P.createElement("strong",null,this.displaySeconds(r))),P.createElement("span",{className:"rvt-player-time-range"},"To: ",P.createElement("strong",null,this.displaySeconds(o))),P.createElement("span",{className:"rvt-player-time-range"},"Selected ",P.createElement("strong",null,this.displaySeconds(o-r))," of"," ",P.createElement("strong",null,this.displaySeconds(this.props.timeLimit))," allowed"),P.createElement("span",{className:"rvt-player-time-range"},P.createElement("strong",null,this.displaySeconds(this.props.vidDuration))," vid length")))}}]),a}()),xe=function(){function a(){var e,t;s(this,a);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return c(y(t=h(this,(e=d(a)).call.apply(e,[this].concat(r)))),"_screenX",null),c(y(t),"_screenY",null),c(y(t),"_ox",null),c(y(t),"_oy",null),c(y(t),"handleMouseDown",function(e){t._screenX=e.screenX,t._screenY=e.screenY,t._ox=t.props.x,t._oy=t.props.y,window.addEventListener("mousemove",t.handleMouseMove,!1),window.addEventListener("mouseup",t.handleMouseUp,!1)}),c(y(t),"handleMouseMove",function(e){t.props.onDrag({x:e.screenX-t._screenX+t._ox,y:e.screenY-t._screenY+t._oy})}),c(y(t),"handleMouseUp",function(){window.removeEventListener("mousemove",t.handleMouseMove),window.removeEventListener("mouseup",t.handleMouseUp),(t.props.onDragStop||function(){})()}),t}return p(a,ae.PureComponent),i(a,[{key:"render",value:function(){return P.createElement("div",{className:"rvt-dragger "+this.props.className||"",onMouseDown:this.handleMouseDown,style:{left:this.props.x+"px",top:this.props.y+"px"}},this.props.children)}}]),a}();c(xe,"defaultProps",{onDrag:function(){},x:0,y:0}),c(xe,"propTypes",{x:f.number,y:f.number,onDrag:f.func,className:f.string,children:f.element});var Ce=function(){function a(){var e,t;s(this,a);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return c(y(t=h(this,(e=d(a)).call.apply(e,[this].concat(r)))),"_screenX",null),c(y(t),"_screenY",null),c(y(t),"_ox",null),c(y(t),"_oy",null),c(y(t),"_owidth",null),c(y(t),"handleMouseDown",function(e){t._screenX=e.screenX,t._screenY=e.screenY,t._ox=t.props.x,t._owidth=t.props.width,window.addEventListener("mousemove",t.handleMouseMove,!1),window.addEventListener("mouseup",t.handleMouseUp,!1)}),c(y(t),"handleMouseMove",function(e){console.log("handleMouseMove",e),t.props.onDrag({x:e.screenX-t._screenX+t._ox,y:e.screenY-t._screenY+t._oy})}),c(y(t),"handleMouseUp",function(){window.removeEventListener("mousemove",t.handleMouseMove),window.removeEventListener("mouseup",t.handleMouseUp),(t.props.onDragStop||function(){})()}),t}return p(a,ae.PureComponent),i(a,[{key:"render",value:function(){return P.createElement("div",{className:"rvt-dragger-container "+this.props.className||"",onMouseDown:this.handleMouseDown,style:{left:this.props.x+"px",top:this.props.y+"px",width:this.props.width+"px"}},this.props.children)}}]),a}();c(Ce,"defaultProps",{onDrag:function(){},x:0,y:0}),c(Ce,"propTypes",{x:f.number,y:f.number,onDrag:f.func,className:f.string,children:f.element});function Le(e){return P.createElement("div",{className:"rvt-trimmer",style:{width:e.width,left:e.left,right:e.right}})}function Me(e){var t=function(e){return[Math.floor(e/60),Math.floor(e%60),Math.round(e%1*100)]}(e.time);return P.createElement("div",{className:"rvt-player-cursor-current"},P.createElement("span",{className:"rvt-player-num"},t[0]),"'",P.createElement("span",{className:"rvt-player-num"},t[1]),!e.noMicroSeconds&&P.createElement(P.Fragment,null,".",P.createElement("span",{className:"rvt-player-num"},function(e,t){return("000000"+e).slice(-t)}(t[2],2))))}var Fe=function(){function o(){var e,i;s(this,o);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return c(y(i=h(this,(e=d(o)).call.apply(e,[this].concat(n)))),"pos2Time",function(e){return e/i.props.widthDurationRatio}),c(y(i),"time2pos",function(e){return e*i.props.widthDurationRatio}),c(y(i),"keepInRange",function(e){var t=i.props.containerWidth;return e<0?0:t<e?t:e}),c(y(i),"withinTimeLimit",function(e){var t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=i.props.timeLimit,r=i.props.startTime,o=e;t||(r=e,o=i.props.endTime);var a=i.props.duration;return!n||a-r-(a-o)<=n}),c(y(i),"withinTimeRange",function(e){var t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=i.props.timeRangeLimit,r=e-i.props.startTime;return t||(r=i.props.endTime-e),!n||n<=r}),c(y(i),"setCurrentTime",function(e){var t=i.pos2Time(i.keepInRange(e.x)),n=t;console.log("dragStart v5",t);i.props.currentTime;var r=i.withinTimeRange(n,!1),o=i.withinTimeLimit(n,!1);r&&o||(console.log("Pausing player"),n=i.props.startTime,(i.props.onPausePlayer||function(){})());console.log("this.props",i.props),i.props.onPlayerProgress(n)}),c(y(i),"handleDragStart",function(e){var t=i.pos2Time(i.keepInRange(e.x));console.log("dragStart",t);var n=t,r=(i.props.currentTime,i.withinTimeRange(n,!1)),o=i.withinTimeLimit(n,!1);r&&o||(console.log("Pausing player"),n=i.props.startTime,(i.props.onPausePlayer||function(){})());i.props.onStartTimeChange(n)}),c(y(i),"handleDragEnd",function(e){var t=i.pos2Time(i.keepInRange(e.x)),n=(i.props.endTime,i.props.currentTime,i.withinTimeRange(t)),r=i.withinTimeLimit(t);n&&r||(t=i.props.endTime,(i.props.onPausePlayer||function(){})());i.props.onEndTimeChange(t)}),c(y(i),"handleDragStop",function(){(i.props.onGetData||v)({start:i.props.startTime,end:i.props.endTime})}),c(y(i),"getTrimmerWidth",function(e){return i.props.containerWidth-e}),i}return p(o,ae.PureComponent),i(o,[{key:"render",value:function(){var e=this.time2pos(this.props.startTime),t=this.time2pos(this.props.endTime),n=this.time2pos(this.props.currentTime);return P.createElement(P.Fragment,null,P.createElement(Le,{left:0,width:e}),P.createElement(xe,{x:e,onDrag:this.handleDragStart,onDragStop:this.handleDragStop},P.createElement(Me,{time:this.props.startTime})),P.createElement(xe,{x:n,onDrag:this.setCurrentTime,onDragStop:function(){}},P.createElement(Me,{noMicroSeconds:!0,time:this.props.currentTime})),P.createElement(xe,{x:t,onDrag:this.handleDragEnd,onDragStop:this.handleDragStop},P.createElement(Me,{time:this.props.endTime})),P.createElement(Ce,{x:e,width:t-e,onDrag:this.handleDragStart,onDragStop:this.handleDragStop}),P.createElement(Le,{right:0,width:this.getTrimmerWidth(t)}))}}]),o}(),Ae=function(){function a(){var e,t;s(this,a);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return c(y(t=h(this,(e=d(a)).call.apply(e,[this].concat(r)))),"state",{start:0,end:0}),c(y(t),"handleStartTimeChange",function(e){t.setState({start:e})}),c(y(t),"handleGetTrimData",function(){var e=t.props.onTrim||v;setTimeout(function(){return e({start:t.state.start||t.props.timeRange.start,end:t.state.end||t.props.timeRange.end})},200)}),c(y(t),"handleEndTimeChange",function(e){t.setState({end:e})}),t}return p(a,ae.PureComponent),i(a,[{key:"render",value:function(){var t=this;return P.createElement("div",{className:"rvt-trimmer-cont videotrimmer",ref:function(e){return t.containerRef=e}},this.props.showTrimmer&&P.createElement(Fe,{timeLimit:this.props.timeLimit,onStartTimeChange:this.handleStartTimeChange,onCurrentTimeChange:this.handleCurrentTimeChange,onEndTimeChange:this.handleEndTimeChange,widthDurationRatio:this.widthDurationRatio,containerWidth:this.containerWidth,startTime:this.state.start||this.props.timeRange.start,endTime:this.state.end||this.props.timeRange.end,currentTime:this.props.currentTime,duration:this.props.duration,onGetData:this.handleGetTrimData,onPausePlayer:this.onPausePlayer,onPlayerProgress:this.props.onPlayerProgress}))}},{key:"widthDurationRatio",get:function(){return this.containerWidth/this.props.duration}},{key:"containerWidth",get:function(){return this.containerRef.getBoundingClientRect().width}}]),a}();function Ve(){}function Ie(){Ie.init.call(this)}function Ne(e){return void 0===e._maxListeners?Ie.defaultMaxListeners:e._maxListeners}function Be(e,t,n,r){var o,a,i;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');if((a=e._events)?(a.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),a=e._events),i=a[t]):(a=e._events=new Ve,e._eventsCount=0),i){if("function"==typeof i?i=a[t]=r?[n,i]:[i,n]:r?i.unshift(n):i.push(n),!i.warned&&(o=Ne(e))&&0<o&&i.length>o){i.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=i.length,function(e){"function"==typeof console.warn?console.warn(e):console.log(e)}(l)}}else i=a[t]=n,++e._eventsCount;return e}function Ue(e,t,n){var r=!1;function o(){e.removeListener(t,o),r||(r=!0,n.apply(e,arguments))}return o.listener=n,o}function We(e){var t=this._events;if(t){var n=t[e];if("function"==typeof n)return 1;if(n)return n.length}return 0}function ze(e,t){for(var n=new Array(t);t--;)n[t]=e[t];return n}Ve.prototype=Object.create(null),(Ie.EventEmitter=Ie).usingDomains=!1,Ie.prototype.domain=void 0,Ie.prototype._events=void 0,Ie.prototype._maxListeners=void 0,Ie.defaultMaxListeners=10,Ie.init=function(){this.domain=null,Ie.usingDomains&&(void 0).active&&(void 0).Domain,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new Ve,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},Ie.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},Ie.prototype.getMaxListeners=function(){return Ne(this)},Ie.prototype.emit=function(e,t,n,r){var o,a,i,l,u,s,c,p="error"===e;if(s=this._events)p=p&&null==s.error;else if(!p)return!1;if(c=this.domain,p){if(o=t,c)return(o=o||new Error('Uncaught, unspecified "error" event')).domainEmitter=this,o.domain=c,o.domainThrown=!1,c.emit("error",o),!1;if(o instanceof Error)throw o;var f=new Error('Uncaught, unspecified "error" event. ('+o+")");throw f.context=o,f}if(!(a=s[e]))return!1;var d="function"==typeof a;switch(i=arguments.length){case 1:!function(e,t,n){if(t)e.call(n);else for(var r=e.length,o=ze(e,r),a=0;a<r;++a)o[a].call(n)}(a,d,this);break;case 2:!function(e,t,n,r){if(t)e.call(n,r);else for(var o=e.length,a=ze(e,o),i=0;i<o;++i)a[i].call(n,r)}(a,d,this,t);break;case 3:!function(e,t,n,r,o){if(t)e.call(n,r,o);else for(var a=e.length,i=ze(e,a),l=0;l<a;++l)i[l].call(n,r,o)}(a,d,this,t,n);break;case 4:!function(e,t,n,r,o,a){if(t)e.call(n,r,o,a);else for(var i=e.length,l=ze(e,i),u=0;u<i;++u)l[u].call(n,r,o,a)}(a,d,this,t,n,r);break;default:for(l=new Array(i-1),u=1;u<i;u++)l[u-1]=arguments[u];!function(e,t,n,r){if(t)e.apply(n,r);else for(var o=e.length,a=ze(e,o),i=0;i<o;++i)a[i].apply(n,r)}(a,d,this,l)}return!0},Ie.prototype.on=Ie.prototype.addListener=function(e,t){return Be(this,e,t,!1)},Ie.prototype.prependListener=function(e,t){return Be(this,e,t,!0)},Ie.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,Ue(this,e,t)),this},Ie.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,Ue(this,e,t)),this},Ie.prototype.removeListener=function(e,t){var n,r,o,a,i;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(r=this._events))return this;if(!(n=r[e]))return this;if(n===t||n.listener&&n.listener===t)0==--this._eventsCount?this._events=new Ve:(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,a=n.length;0<a--;)if(n[a]===t||n[a].listener&&n[a].listener===t){i=n[a].listener,o=a;break}if(o<0)return this;if(1===n.length){if(n[0]=void 0,0==--this._eventsCount)return this._events=new Ve,this;delete r[e]}else!function(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}(n,o);r.removeListener&&this.emit("removeListener",e,i||t)}return this},Ie.prototype.removeAllListeners=function(e){var t,n;if(!(n=this._events))return this;if(!n.removeListener)return 0===arguments.length?(this._events=new Ve,this._eventsCount=0):n[e]&&(0==--this._eventsCount?this._events=new Ve:delete n[e]),this;if(0===arguments.length){for(var r,o=Object.keys(n),a=0;a<o.length;++a)"removeListener"!==(r=o[a])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=new Ve,this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(t)for(;this.removeListener(e,t[t.length-1]),t[0];);return this},Ie.prototype.listeners=function(e){var t,n=this._events;return n&&(t=n[e])?"function"==typeof t?[t.listener||t]:function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(t):[]},Ie.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):We.call(e,t)},Ie.prototype.listenerCount=We,Ie.prototype.eventNames=function(){return 0<this._eventsCount?Reflect.ownKeys(this._events):[]};function Ge(){importScripts("https://cdn.rawgit.com/bgrins/videoconverter.js/master/build/ffmpeg-all-codecs.js");var i=Date.now;function l(e){postMessage({type:"stdout",data:e})}onmessage=function(e){var t=e.data;if("command"===t.type){var n={print:l,printErr:l,files:t.files||[],arguments:t.arguments||[],TOTAL_MEMORY:t.totalMemory||33554432};postMessage({type:"start",data:n.arguments.join(" ")}),postMessage({type:"stdout",data:"Received command: "+n.arguments.join(" ")+(n.TOTAL_MEMORY?".  Processing with "+n.TOTAL_MEMORY+" bits.":"")});var r=i(),o=ffmpeg_run(n),a=i()-r;postMessage({type:"stdout",data:"Finished processing (took "+a+"ms)"}),postMessage({type:"done",data:o,time:a})}},postMessage({type:"ready"})}var He="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},Ye=N(B(function(e,t){var n;(n=t).default=function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"function"!=typeof t)throw new Error("File content must export a function");var n=t.toString(),r=new Blob(["("+n+")()"],{type:"application/javascript"});return new Worker(URL.createObjectURL(r))},Object.defineProperty(n,"__esModule",{value:!0})}));function Ke(e){return(Ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function qe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $e(e){return($e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Xe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ze(e,t){return(Ze=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Je(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Qe=function(){function e(){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),Je(Xe(a=function(e,t){return!t||"object"!==Ke(t)&&"function"!=typeof t?Xe(e):t}(this,$e(e).call(this))),"_worker",{}),Je(Xe(a),"_inputFile",{}),Je(Xe(a),"workerIsReady",!1),Je(Xe(a),"readFileAsBufferArray",function(r){return new Promise(function(e,t){var n=new FileReader;n.onload=function(){e(this.result)},n.onerror=function(){t(this.error)},n.readAsArrayBuffer(r)})}),Je(Xe(a),"runCommand",function(r){var o=1<arguments.length&&void 0!==arguments[1]?arguments[1]:33554432;if("string"!=typeof r||!r.length)throw new Error("command should be string and not empty");a.inputFile&&a.inputFile.type?a.convertInputFileToArrayBuffer().then(function(e){for(;!a.workerIsReady;);var t="video-".concat(Date.now(),".webm"),n="-i ".concat(t," ").concat(r);a.worker.postMessage({type:"command",arguments:n.split(" "),files:[{data:new Uint8Array(e),name:t}],totalMemory:o})}):a.worker.postMessage({type:"command",arguments:r.split(" "),totalMemory:o})}),Je(Xe(a),"log",function(e){return Array.isArray(e)?console.log.call(null,e):console.log(e)}),Je(Xe(a),"isVideo",function(e){var t=e.type;return e instanceof Blob&&(t.includes("video")||t.includes("audio"))}),a.initWebWorker(),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ze(e,t)}(e,Ie),function(e,t,n){t&&qe(e.prototype,t),n&&qe(e,n)}(e,[{key:"initWebWorker",value:function(){var n=this;this.worker=new Ye(Ge),this.log;var r=this.worker.onmessage=function(e){var t=e.data;e&&e.type&&("ready"==t.type?(n.emit("onReady","ffmpeg-asm.js file has been loaded."),n.workerIsReady=!0):"stdout"==t.type?n.emit("onStdout",t.data):"start"==t.type?(n.emit("onFileReceived","File Received"),r("file received ffmpeg command.")):"done"==t.type&&n.emit("onDone",t.data))}}},{key:"inputFileExists",value:function(){var e=this.inputFile;return!!(e&&e instanceof Blob&&e.size&&e.type)}},{key:"convertInputFileToArrayBuffer",value:function(){if(!this.inputFileExists())throw new Error("Input File has not been set");return this.readFileAsBufferArray(this.inputFile)}},{key:"worker",set:function(e){this._worker=e},get:function(){return this._worker}},{key:"inputFile",set:function(e){if(!this.isVideo(e))throw new Error("Input file is expected to be an audio or a video");this._inputFile=e},get:function(){return this._inputFile}}]),e}(),et={on:function(){},emit:function(){}},tt=He||window;tt&&tt.Blob&&(et=new Qe);var nt=et,rt=function n(r,e,t){return void 0===e?function(e,t){return n(r,e,t)}:(void 0===t&&(t="0"),0<(r-=e.toString().length)?new Array(r+(/\./.test(e)?2:1)).join(t)+e:e+"")},ot=36e5,at=6e4,it=1e3,lt="Time format error";function ut(e,t){var n=1<arguments.length&&void 0!==t?t:"mm:ss";if("number"!=typeof e||Number.isNaN(e))throw new Error("NaN error");var r=Math.abs(e);return function(e,t){var n,r,o;switch(t.toLowerCase()){case"hh:mm:ss.sss":o=r=n=!0;break;case"hh:mm:ss":n=!!e.miliseconds,o=r=!0;break;case"hh:mm":n=!!e.miliseconds,r=n||!!e.seconds,o=!0;break;case"mm:ss":n=!!e.miliseconds,r=!0,o=!!e.hours;break;case"mm:ss.sss":r=n=!0,o=!!e.hours;break;default:throw new Error(lt)}var a=rt(2,e.hours),i=rt(2,e.minutes),l=rt(2,e.seconds),u=rt(3,e.miliseconds);return(e.negative?"-":"")+(o?n?"".concat(a,":").concat(i,":").concat(l,".").concat(u):r?"".concat(a,":").concat(i,":").concat(l):"".concat(a,":").concat(i):n?"".concat(i,":").concat(l,".").concat(u):"".concat(i,":").concat(l))}({negative:e<0,hours:Math.floor(r/ot),minutes:Math.floor(r%ot/at),seconds:Math.floor(r%at/it),miliseconds:Math.floor(r%it)},n)}function st(){return new ct(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})}var ct=function(){function t(e){var v;return s(this,t),c(y(v=h(this,d(t).call(this))),"handleDoneClientDone",function(e){g(e[0].data);v.emit("FFMPEGDone",e)}),c(y(v),"trimVideo",function(){var r=1<arguments.length?arguments[1]:void 0,o=function(e,t){var n=1<arguments.length&&void 0!==t?t:"mm:ss";if("number"!=typeof e||Number.isNaN(e))throw new Error("NaN error");return ut(e*it,n)}(0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,"hh:mm:ss");console.log("workerClient",nt),nt.convertInputFileToArrayBuffer().then(function(e){for(;!nt.workerIsReady;);var t="video-".concat(Date.now(),".webm");console.log("filename",t);var n="-ss ".concat(o," -t ").concat(r," -i ").concat(t," -vcodec copy -acodec copy sliced-output.mp4");console.log("trim",n),nt.worker.postMessage({type:"command",arguments:n.split(" "),files:[{data:new Uint8Array(e),name:t}],totalMemory:33554432})})}),c(y(v),"optimizeVideo",function(){nt.runCommand("-strict -2 -vcodec libx264 -crf 23 output.mp4",253554432)}),c(y(v),"_videoData",{}),c(y(v),"_videoFile",null),c(y(v),"optimizedVideo",!1),c(y(v),"_videoBuffer",{}),c(y(v),"readAsArrayBuffer",m(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("readAsArrayBuffer  ",v._videoFile),e.next=3,t=v._videoFile,a(t,"ArrayBuffer");case 3:return v._videoBuffer=e.sent,e.abrupt("return",v.videoBuffer);case 5:case"end":return e.stop()}var t},e)}))),c(y(v),"convertBufferToBlob",function(e){var t=null;return(e=e||v.videoBuffer).byteLength&&(t=g(e)),t}),c(y(v),"readAsDataURL",function(){var n=m(regeneratorRuntime.mark(function e(t,n){var r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=t||v.videoBuffer,n=n||v.convertBufferToBlob(t),r=null,n)return e.next=6,a(n,"DataURL");e.next=7;break;case 6:r=e.sent;case 7:return e.abrupt("return",r);case 8:case"end":return e.stop()}},e)}));return function(e,t){return n.apply(this,arguments)}}()),c(y(v),"decode",function(){var t=m(regeneratorRuntime.mark(function e(t){var n,r,o,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return v.videoFile=t,v.emit("processingFile"),console.log("processing  ",t),e.next=5,v.readAsArrayBuffer();case 5:return n=e.sent,e.next=8,v.readAsDataURL(n);case 8:r=e.sent,o=URL.createObjectURL(v.videoFile),(a=document.createElement("video")).src=o;case 12:if((a.duration===1/0||isNaN(a.duration))&&a.readyState<2)return e.next=15,new Promise(function(e){return setTimeout(e,1e3)});e.next=18;break;case 15:a.currentTime=1e7*Math.random(),e.next=12;break;case 18:return v._videoData=a,v.emit("processedFile"),e.abrupt("return",{dataURL:r,arrayBuffer:n,blob:v.convertBufferToBlob()});case 21:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),c(y(v),"generateBufferChunks",function(){var l=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[];return new Promise(function(e,t){try{var n=[];l=l.byteLength?l:v.videoBuffer;for(var r=new Uint8Array(l),o=0,a=6e4;a<r.byteLength;a+=6e4){var i=l.slice(o,a);n.push(i),o=a}e(n)}catch(e){t(e)}})}),c(y(v),"extractFramesFromVideo",function(){var h=0<arguments.length&&void 0!==arguments[0]?arguments[0]:25;return new Promise(function(){var n=m(regeneratorRuntime.mark(function e(t,n){var r,o,a,i,l,u,s,c,p,f,d,y;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:e.prev=0,v.emit("extractingFrames"),(r=v._videoData).addEventListener("seeked",m(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:o&&o();case 1:case"end":return e.stop()}},e)}))),a=r.duration,i=document.createElement("canvas"),l=i.getContext("2d"),u=[r.videoWidth,r.videoHeight],s=u[0],c=u[1],i.width=s,i.height=c,p=[],f=125/h,d=0;case 13:if(d<a)return r.currentTime=d,e.next=17,new Promise(function(e){return o=e});e.next=23;break;case 17:l.drawImage(r,0,0,s,c),y=i.toDataURL(),p.push(y),d+=f,e.next=13;break;case 23:v.emit("extractedFrames"),t(p),e.next=30;break;case 27:e.prev=27,e.t0=e.catch(0),n(e.t0);case 30:case"end":return e.stop()}},e,null,[[0,27]])}));return function(e,t){return n.apply(this,arguments)}}())}),v.videoFile=e,(v.workerClient=nt).on("onReady",function(){return v.emit("FFMPEGReady")}),nt.on("onStdout",function(e){return v.emit("FFMPEGStdout",e)}),nt.on("onFileReceived",function(){return v.emit("FFMPEGFileReceived")}),nt.on("onDone",v.handleDoneClientDone),v}return p(t,Ie),i(t,[{key:"videoFile",set:function(e){console.log("videoFile"),e&&e.type&&(nt.inputFile=e),this._videoFile=e},get:function(){return this._videoFile}},{key:"duration",get:function(){return this._videoData.duration||0}},{key:"videoData",get:function(){return this._videoData}},{key:"videoBuffer",get:function(){return this._videoBuffer}}]),t}(),pt=function(){function n(e){var l,t=this;return s(this,n),c(y(l=h(this,d(n).call(this,e))),"webVideo",st({})),c(y(l),"handleFFMPEGStdout",function(e){}),c(y(l),"handleFFMPEGReady",function(){l.setState({ffmpegReady:!0})}),c(y(l),"handleFFMPEGFileReceived",function(){}),c(y(l),"handleFFMPEGDone",function(e){l.setState({timeRange:{start:0,end:l.state.timeRange.end}});var t=g(e[0].data);setTimeout(function(){l.decodeVideoFile(t,function(){(l.props.onVideoEncode||v)(e),l.setState({encoding:!1,encoded:!0,encodedVideo:t})})},300)}),c(y(l),"defaultState",{decoding:!1,encoding:!1,encoded:!1,playVideo:!1,videoDataURL:"",videoFrames:[],isDecoding:!1,timeRange:{start:5,end:l.props.timeLimit||15},encodedVideo:null,playedSeconds:0,ffmpegReady:!1}),c(y(l),"state",l.defaultState),c(y(l),"updateVideoDataURL",function(e){return l.setState({videoDataURL:e})}),c(y(l),"updateVideoFrames",function(e){return l.setState({videoFrames:e})}),c(y(l),"updateIsDecoding",function(e){return l.setState({updateIsDecoding:e})}),c(y(l),"updateVideoDuration",function(e){return l.setState({updateVideoDuration:e})}),c(y(l),"decodeVideoFile",function(e){var i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:v;l.setState({decoding:!0});var t=l.webVideo;t.videoFile=e,t.decode(e).then(function(e){e.blob,e.arrayBuffer;var t=e.dataURL;l.updateVideoDataURL(t);var n=l.state.timeRange.start,r=l.webVideo.videoData.duration,o=n+(l.props.timeLimit||10),a=o<r?o:r;l.setState({timeRange:{start:n,end:a},playedSeconds:(a-n)/2+n}),l.setState({decoding:!1}),i()}).catch(function(e){return console.log(e)})}),c(y(l),"handleFileSelected",function(e){l.decodeVideoFile(e)}),c(y(l),"handleVideoTrim",function(e){l.setState({timeRange:e})}),c(y(l),"handleEncodeVideo",function(e){l.setState({encoding:!0,videoDataURL:"",playVideo:!1});var t=e.end-e.start;l.webVideo.trimVideo(e.start,t)}),c(y(l),"handlePlayPauseVideo",function(){var e=l.state.playVideo;l.setState({playVideo:!e})}),c(y(l),"handlePlayerPause",function(){l.setState({playVideo:!1})}),c(y(l),"handlePlayerPlay",function(){l.setState({playVideo:!0})}),c(y(l),"handlePlayerProgress",function(e){l.state.playVideo&&l.setState({playedSeconds:e})}),c(y(l),"handleReselectFile",function(){l.setState(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(n,!0).forEach(function(e){c(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({},l.defaultState,{ffmpegReady:!0}))}),c(y(l),"VideoPlayerWithTrimmer",function(e){var t=e.showTrimmer,n=l.state,r=n.decoding,o=n.encoding,a=n.encoded,i=n.videoDataURL;return P.createElement("div",{className:"VideoPlayerWithTrimmerVideoPlayerWithTrimmer"},!r&&!o&&i&&P.createElement(Re,{src:l.state.videoDataURL,timeRange:l.state.timeRange,timeLimit:l.props.timeLimit,playVideo:l.state.playVideo,onPlayerPlay:l.handlePlayerPlay,onPlayerPause:l.handlePlayerPause,onPlayerProgress:l.handlePlayerProgress,vidDuration:l.webVideo.videoData.duration},!r&&!o&&i&&P.createElement(De,{onDownload:function(){return l.handleDownloadVideo(l.state.encodedVideo)},canDownload:a,showEncodeBtn:l.props.showEncodeBtn,onReselectFile:l.handleReselectFile,onEncode:function(){return l.handleEncodeVideo(l.state.timeRange)},onPlayPauseClick:l.handlePlayPauseVideo,processing:o,playing:l.state.playVideo,vidDuration:l.webVideo.videoData.duration,frameCurrentX:l.state.timeRange.start/l.webVideo.videoData.duration*100,frameCurrentWidth:(l.state.timeRange.end-l.state.timeRange.start)/l.webVideo.videoData.duration*100,frameCurrentPlayedX:l.state.playedSeconds/l.webVideo.videoData.duration*100,onPlayerProgress:l.handlePlayerProgress})),t&&P.createElement(Ae,{onPausePlayer:l.handlePlayerPause,showTrimmer:l.state.videoDataURL,duration:l.webVideo.videoData.duration,onTrim:l.handleVideoTrim,timeLimit:l.props.timeLimit,timeRangeLimit:l.props.timeRange,timeRange:l.state.timeRange,currentTime:l.state.playedSeconds,onPlayerProgress:l.handlePlayerProgress}))}),c(y(l),"downloadVideo",function(){l.handleDownloadVideo(l.state.encodedVideo)}),c(y(l),"handleDownloadVideo",function(e){!function(e,t){var n=document.createElement("a");n.href=e,n.download=t,n.click()}(function(e){return URL.createObjectURL(e)}(e),l.props.downloadPath?l.props.downloadPath:"trimmed.mp4")}),c(y(l),"VideoPlayerNoTrimmer",function(){return P.createElement(t.VideoPlayerWithTrimmer,null)}),l.webVideo.on("processingFile",function(){return l.updateIsDecoding(!0)}),l.webVideo.on("processedFile",function(){return l.updateIsDecoding(!1)}),l.webVideo.on("FFMPEGStdout",l.handleFFMPEGStdout),l.webVideo.on("FFMPEGReady",l.handleFFMPEGReady),l.webVideo.on("FFMPEGFileReceived",l.handleFFMPEGFileReceived),l.webVideo.on("FFMPEGDone",l.handleFFMPEGDone),l}return p(n,P.PureComponent),i(n,[{key:"render",value:function(){var e=this.state,t=e.decoding,n=e.encoding,r=e.encoded,o=e.videoDataURL,a=e.ffmpegReady;return P.createElement("div",{className:"rvt-main-container"},!a&&P.createElement(H,null,P.createElement(S,{name:"spin",className:"rvt-icon-spin"}),this.props.loadingFFMPEGText||"PLEASE WAIT..."),a&&r&&P.createElement(this.VideoPlayerNoTrimmer,null),a&&!r&&P.createElement(P.Fragment,null,!t&&!n&&!o&&P.createElement(G,{onFileSelected:this.handleFileSelected,minSize:this.props.minSize,maxSize:this.props.maxSize}),(t||n)&&P.createElement(H,null,P.createElement(S,{name:"spin",className:"rvt-icon-spin"}),n?"ENCODING VIDEO":"DECODING VIDEO","..."),P.createElement(this.VideoPlayerWithTrimmer,{showTrimmer:!0})))}}]),n}();c(pt,"propTypes",{onVideoEncode:f.func,showEncodeBtn:f.bool,timeLimit:f.number,loadingFFMPEGText:f.string,downloadPath:f.string});var ft=st;e.default=pt,e.preloadWebVideo=ft,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9saWJzL3V0aWxzLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvSWNvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtZHJvcHpvbmUvbm9kZV9tb2R1bGVzL2ZpbGUtc2VsZWN0b3IvZGlzdC9lczUvZmlsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1kcm9wem9uZS9ub2RlX21vZHVsZXMvZmlsZS1zZWxlY3Rvci9kaXN0L2VzNS9maWxlLXNlbGVjdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRyb3B6b25lL25vZGVfbW9kdWxlcy9hdHRyLWFjY2VwdC9kaXN0L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRyb3B6b25lL2Rpc3QvZXMvdXRpbHMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtZHJvcHpvbmUvZGlzdC9lcy9pbmRleC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL0ZpbGVQaWNrZXIuanMiLCIuLi9zcmMvY29tcG9uZW50cy9TdGF0dXMuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9hZC1zY3JpcHQvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvdW1kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcHJvcHMuanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi91dGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL1BsYXllci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3NpbmdsZVBsYXllci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvWW91VHViZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvU291bmRDbG91ZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvVmltZW8uanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL0ZhY2Vib29rLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9TdHJlYW1hYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9XaXN0aWEuanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL1R3aXRjaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvRGFpbHlNb3Rpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL01peGNsb3VkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9GaWxlUGxheWVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL1ByZXZpZXcuanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wcmVsb2FkLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvQ29udHJvbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9SZWFjdFBsYXllci5qcyIsIi4uL3NyYy9jb21wb25lbnRzL1BsYXllci5qcyIsIi4uL3NyYy9jb21wb25lbnRzL0RyYWdnZXIuanMiLCIuLi9zcmMvY29tcG9uZW50cy9EcmFnZ2VyQ29udGFpbmVyLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvVHJpbW1lci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtYnVpbHRpbnMvc3JjL2VzNi9ldmVudHMuanMiLCIuLi9ub2RlX21vZHVsZXMvZmZtcGVnLXdlYndvcmtlci9kaXN0L2VzL0ZGTVBFR1dlYldvcmtlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtZ2xvYmFscy9zcmMvZ2xvYmFsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3dlYndvcmtlci1maWxlL2Rpc3QvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZmZtcGVnLXdlYndvcmtlci9kaXN0L2VzL0ZGTVBFR1dlYldvcmtlckNsaWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9mZm1wZWctd2Vid29ya2VyL2Rpc3QvZXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvemVyby1maWxsL2luZGV4LmpzIiwiLi4vc3JjL2xpYnMvZm9ybWF0U2Vjb25kcy5qcyIsIi4uL3NyYy9saWJzL3ByZWxvYWRXZWJWaWRlby5qcyIsIi4uL3NyYy9saWJzL1dlYlZpZGVvLmpzIiwiLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBkZXRlY3QgaWYgYSBmaWxlIGlzIGFuIHZpZGVvLlxyXG4gKiBAcGFyYW0ge0ZpbGV9IGZpbGVcclxuICovXHJcbmV4cG9ydCBjb25zdCBpc1ZpZGVvID0gZmlsZSA9PiBmaWxlLnR5cGUuaW5kZXhPZihcInZpZGVvXCIpID4gLTE7XHJcblxyXG4vKipcclxuICogY3JlYXRlIHJhbmdlIFttaW4gLi4gbWF4XVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJhbmdlID0gKG1pbiwgbWF4KSA9PlxyXG4gIEFycmF5LmFwcGx5KG51bGwsIHsgbGVuZ3RoOiBtYXggLSBtaW4gKyAxIH0pLm1hcCgodiwgaSkgPT4gaSArIG1pbik7XHJcblxyXG4vKipcclxuICogRmlsZVJlYWRlciB2aWEgcHJvbWlzZVxyXG4gKiBAcGFyYW0ge0ZpbGV9IGZpbGVcclxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGFUeXBlXHJcbiAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXIgfCBzdHJpbmc+fVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJlYWRGaWxlID0gKGZpbGUsIGRhdGFUeXBlID0gXCJBcnJheUJ1ZmZlclwiKSA9PlxyXG4gIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICByZWFkZXJbXCJyZWFkQXNcIiArIGRhdGFUeXBlXShmaWxlKTtcclxuICAgIHJlYWRlci5vbmxvYWQgPSAoKSA9PiByZXNvbHZlKHJlYWRlci5yZXN1bHQpO1xyXG4gICAgcmVhZGVyLm9uZXJyb3IgPSBlcnIgPT4gcmVqZWN0KGVycik7XHJcbiAgfSk7XHJcblxyXG4vKipcclxuICogUmVhZCBGaWxlL0Jsb2IgdG8gQXJyYXlCdWZmZXJcclxuICogQHBhcmFtIHtGaWxlfSBmaWxlXHJcbiAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJlYWRBcnJheUJ1ZmZlciA9IGZpbGUgPT4gcmVhZEZpbGUoZmlsZSwgXCJBcnJheUJ1ZmZlclwiKTtcclxuXHJcbi8qKlxyXG4gKiBSZWFkIEZpbGUvQmxvYiB0byBCYXNlNjRcclxuICogQHBhcmFtIHtGaWxlfSBmaWxlXHJcbiAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn1cclxuICovXHJcbmV4cG9ydCBjb25zdCByZWFkRGF0YVVSTCA9IGZpbGUgPT4gcmVhZEZpbGUoZmlsZSwgXCJEYXRhVVJMXCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlYWRCbG9iVVJMID0gZmlsZSA9PiBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRvd25sb2FkID0gKHVybCwgbmFtZSkgPT4ge1xyXG4gIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICBsaW5rLmhyZWYgPSB1cmw7XHJcbiAgbGluay5kb3dubG9hZCA9IG5hbWU7XHJcbiAgbGluay5jbGljaygpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbmFtZSA9IChmaWxlbmFtZSwgZXh0LCBzdGFtcCkgPT5cclxuICBgJHtmaWxlbmFtZS5yZXBsYWNlKC9cXC5cXHcrJC8sIFwiXCIpfSR7c3RhbXAgfHwgXCJcIn0uJHtleHR9YDtcclxuXHJcbi8qKlxyXG4gKiBmb3JtYXQgc2Vjb25kcyB0byBbbWludXRlcywgaW50ZWdlciwgZGVjaW1hbCgyKV1cclxuICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBmb3JtYXRTZWNvbmRzID0gc2Vjb25kcyA9PiBbXHJcbiAgTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApLFxyXG4gIE1hdGguZmxvb3Ioc2Vjb25kcyAlIDYwKSxcclxuICBNYXRoLnJvdW5kKChzZWNvbmRzICUgMSkgKiAxMDApXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgbGVmdFplcm8gPSAobnVtLCBjb3VudCkgPT4ge1xyXG4gIHJldHVybiAoXCIwMDAwMDBcIiArIG51bSkuc2xpY2UoLWNvdW50KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBub29wID0gKCkgPT4ge307XHJcblxyXG5leHBvcnQgY29uc3QgYXJyYXlCdWZmZXJUb0Jsb2IgPSBidWZmZXIgPT5cclxuICBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCAwLCBidWZmZXIuYnl0ZUxlbmd0aCldLCB7XHJcbiAgICB0eXBlOiBcInZpZGVvL3dlYm1cIixcclxuICAgIG5hbWU6IFwidmlkZW8ud2VibVwiXHJcbiAgfSk7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5cclxuY29uc3QgRG93bmxvYWQgPSAoeyBjbGFzc05hbWUgfSkgPT4gKFxyXG4gIDxzdmdcclxuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxyXG4gICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXHJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuICA+XHJcbiAgICA8cGF0aCBkPVwiTTE5IDloLTRWM0g5djZINWw3IDcgNy03ek01IDE4djJoMTR2LTJINXpcIiAvPlxyXG4gICAgPHBhdGggZD1cIk0wIDBoMjR2MjRIMHpcIiBmaWxsPVwibm9uZVwiIC8+XHJcbiAgPC9zdmc+XHJcbik7XHJcblxyXG5jb25zdCBNdXNpYyA9ICh7IGNsYXNzTmFtZSB9KSA9PiAoXHJcbiAgPHN2Z1xyXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XHJcbiAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcclxuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gID5cclxuICAgIDxwYXRoIGQ9XCJNMCAwaDI0djI0SDB6XCIgZmlsbD1cIm5vbmVcIiAvPlxyXG4gICAgPHBhdGggZD1cIk0xNSA2SDN2MmgxMlY2em0wIDRIM3YyaDEydi0yek0zIDE2aDh2LTJIM3Yyek0xNyA2djguMThjLS4zMS0uMTEtLjY1LS4xOC0xLS4xOC0xLjY2IDAtMyAxLjM0LTMgM3MxLjM0IDMgMyAzIDMtMS4zNCAzLTNWOGgzVjZoLTV6XCIgLz5cclxuICA8L3N2Zz5cclxuKTtcclxuXHJcbmNvbnN0IFBsYXkgPSAoeyBjbGFzc05hbWUgfSkgPT4gKFxyXG4gIDxzdmdcclxuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxyXG4gICAgaGVpZ2h0PVwiMjRcIlxyXG4gICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXHJcbiAgICB3aWR0aD1cIjI0XCJcclxuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gID5cclxuICAgIDxwYXRoIGQ9XCJNMCAwaDI0djI0SDB6XCIgZmlsbD1cIm5vbmVcIiAvPlxyXG4gICAgPHBhdGggZD1cIk0xMCAxNi41bDYtNC41LTYtNC41djl6TTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTAgMThjLTQuNDEgMC04LTMuNTktOC04czMuNTktOCA4LTggOCAzLjU5IDggOC0zLjU5IDgtOCA4elwiIC8+XHJcbiAgPC9zdmc+XHJcbik7XHJcblxyXG5jb25zdCBQYXVzZSA9ICh7IGNsYXNzTmFtZSB9KSA9PiAoXHJcbiAgPHN2Z1xyXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XHJcbiAgICBoZWlnaHQ9XCIyNFwiXHJcbiAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcclxuICAgIHdpZHRoPVwiMjRcIlxyXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgPlxyXG4gICAgPHBhdGggZD1cIk0wIDBoMjR2MjRIMHpcIiBmaWxsPVwibm9uZVwiIC8+XHJcbiAgICA8cGF0aCBkPVwiTTkgMTZoMlY4SDl2OHptMy0xNEM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMCAxOGMtNC40MSAwLTgtMy41OS04LThzMy41OS04IDgtOCA4IDMuNTkgOCA4LTMuNTkgOC04IDh6bTEtNGgyVjhoLTJ2OHpcIiAvPlxyXG4gIDwvc3ZnPlxyXG4pO1xyXG5cclxuY29uc3QgUmVwbGF5ID0gKHsgY2xhc3NOYW1lIH0pID0+IChcclxuICA8c3ZnXHJcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cclxuICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxyXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgPlxyXG4gICAgPHBhdGggZD1cIk0wIDBoMjR2MjRIMHpcIiBmaWxsPVwibm9uZVwiIC8+XHJcbiAgICA8cGF0aCBkPVwiTTEyIDVWMUw3IDZsNSA1VjdjMy4zMSAwIDYgMi42OSA2IDZzLTIuNjkgNi02IDYtNi0yLjY5LTYtNkg0YzAgNC40MiAzLjU4IDggOCA4czgtMy41OCA4LTgtMy41OC04LTgtOHpcIiAvPlxyXG4gIDwvc3ZnPlxyXG4pO1xyXG5cclxuY29uc3QgU3BpbiA9ICh7IGNsYXNzTmFtZSB9KSA9PiAoXHJcbiAgPHN2Z1xyXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XHJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuICAgIHZpZXdCb3g9XCIwIDAgNDIgNDJcIlxyXG4gID5cclxuICAgIDxwYXRoIGQ9XCJNMjEgMzdjLTQuMyAwLTguMy0xLjctMTEuMy00LjdTNSAyNS4zIDUgMjFjMC0zIC44LTYgMi41LTguNUM5IDEwIDExLjIgOCAxMy44IDYuN2wxLjMgMi43Yy0yLjEgMS4xLTMuOSAyLjctNS4yIDQuNy0xLjMgMi4xLTIgNC41LTIgNi45IDAgNy4yIDUuOCAxMyAxMyAxM3MxMy01LjggMTMtMTNjMC0yLjUtLjctNC45LTItNi45cy0zLjEtMy42LTUuMi00LjdMMjggNi43YzIuOCAxLjMgNSAzLjMgNi41IDUuOEMzNi4yIDE1IDM3IDE4IDM3IDIxYzAgNC4zLTEuNyA4LjMtNC43IDExLjNTMjUuMyAzNyAyMSAzN3pcIiAvPlxyXG4gIDwvc3ZnPlxyXG4pO1xyXG5cclxuY29uc3QgSWNvbiA9IHByb3BzID0+IHtcclxuICBsZXQgRWwgPSBEb3dubG9hZDtcclxuICBzd2l0Y2ggKHByb3BzLm5hbWUpIHtcclxuICAgIGNhc2UgXCJtdXNpY1wiOlxyXG4gICAgICBFbCA9IE11c2ljO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgXCJwbGF5XCI6XHJcbiAgICAgIEVsID0gUGxheTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFwicGF1c2VcIjpcclxuICAgICAgRWwgPSBQYXVzZTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFwicmVwbGF5XCI6XHJcbiAgICAgIEVsID0gUmVwbGF5O1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgXCJzcGluXCI6XHJcbiAgICAgIEVsID0gU3BpbjtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICBFbCA9IERvd25sb2FkO1xyXG4gICAgICBicmVhaztcclxuICB9XHJcbiAgcmV0dXJuIChcclxuICAgIDxFbFxyXG4gICAgICBjbGFzc05hbWU9e2BydnQtaWNvbiByYXQtaWNvbi0ke3Byb3BzLm5hbWV9ICR7cHJvcHMuY2xhc3NOYW1lfWAudHJpbSgpfVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxuSWNvbi5wcm9wVHlwZXMgPSB7XHJcbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZ1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSWNvbjtcclxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuIiwiZXhwb3J0IHZhciBDT01NT05fTUlNRV9UWVBFUyA9IG5ldyBNYXAoW1xuICAgIFsnYXZpJywgJ3ZpZGVvL2F2aSddLFxuICAgIFsnZ2lmJywgJ2ltYWdlL2dpZiddLFxuICAgIFsnaWNvJywgJ2ltYWdlL3gtaWNvbiddLFxuICAgIFsnanBlZycsICdpbWFnZS9qcGVnJ10sXG4gICAgWydqcGcnLCAnaW1hZ2UvanBlZyddLFxuICAgIFsnbWt2JywgJ3ZpZGVvL3gtbWF0cm9za2EnXSxcbiAgICBbJ21vdicsICd2aWRlby9xdWlja3RpbWUnXSxcbiAgICBbJ21wNCcsICd2aWRlby9tcDQnXSxcbiAgICBbJ3BkZicsICdhcHBsaWNhdGlvbi9wZGYnXSxcbiAgICBbJ3BuZycsICdpbWFnZS9wbmcnXSxcbiAgICBbJ3ppcCcsICdhcHBsaWNhdGlvbi96aXAnXSxcbiAgICBbJ2RvYycsICdhcHBsaWNhdGlvbi9tc3dvcmQnXSxcbiAgICBbJ2RvY3gnLCAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnXVxuXSk7XG5leHBvcnQgZnVuY3Rpb24gdG9GaWxlV2l0aFBhdGgoZmlsZSwgcGF0aCkge1xuICAgIHZhciBmID0gd2l0aE1pbWVUeXBlKGZpbGUpO1xuICAgIGlmICh0eXBlb2YgZi5wYXRoICE9PSAnc3RyaW5nJykgeyAvLyBvbiBlbGVjdHJvbiwgcGF0aCBpcyBhbHJlYWR5IHNldCB0byB0aGUgYWJzb2x1dGUgcGF0aFxuICAgICAgICB2YXIgd2Via2l0UmVsYXRpdmVQYXRoID0gZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGg7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCAncGF0aCcsIHtcbiAgICAgICAgICAgIHZhbHVlOiB0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHBhdGhcbiAgICAgICAgICAgICAgICAvLyBJZiA8aW5wdXQgd2Via2l0ZGlyZWN0b3J5PiBpcyBzZXQsXG4gICAgICAgICAgICAgICAgLy8gdGhlIEZpbGUgd2lsbCBoYXZlIGEge3dlYmtpdFJlbGF0aXZlUGF0aH0gcHJvcGVydHlcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTElucHV0RWxlbWVudC93ZWJraXRkaXJlY3RvcnlcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiB3ZWJraXRSZWxhdGl2ZVBhdGggPT09ICdzdHJpbmcnICYmIHdlYmtpdFJlbGF0aXZlUGF0aC5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgICAgID8gd2Via2l0UmVsYXRpdmVQYXRoXG4gICAgICAgICAgICAgICAgICAgIDogZmlsZS5uYW1lLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmO1xufVxuZnVuY3Rpb24gd2l0aE1pbWVUeXBlKGZpbGUpIHtcbiAgICB2YXIgbmFtZSA9IGZpbGUubmFtZTtcbiAgICB2YXIgaGFzRXh0ZW5zaW9uID0gbmFtZSAmJiBuYW1lLmxhc3RJbmRleE9mKCcuJykgIT09IC0xO1xuICAgIGlmIChoYXNFeHRlbnNpb24gJiYgIWZpbGUudHlwZSkge1xuICAgICAgICB2YXIgZXh0ID0gbmFtZS5zcGxpdCgnLicpXG4gICAgICAgICAgICAucG9wKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdmFyIHR5cGUgPSBDT01NT05fTUlNRV9UWVBFUy5nZXQoZXh0KTtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlLCAndHlwZScsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdHlwZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmlsZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGUuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IHRvRmlsZVdpdGhQYXRoIH0gZnJvbSAnLi9maWxlJztcbnZhciBGSUxFU19UT19JR05PUkUgPSBbXG4gICAgLy8gVGh1bWJuYWlsIGNhY2hlIGZpbGVzIGZvciBtYWNPUyBhbmQgV2luZG93c1xuICAgICcuRFNfU3RvcmUnLFxuICAgICdUaHVtYnMuZGInIC8vIFdpbmRvd3Ncbl07XG4vKipcbiAqIENvbnZlcnQgYSBEcmFnRXZlbnQncyBEYXRhVHJhc2ZlciBvYmplY3QgdG8gYSBsaXN0IG9mIEZpbGUgb2JqZWN0c1xuICogTk9URTogSWYgc29tZSBvZiB0aGUgaXRlbXMgYXJlIGZvbGRlcnMsXG4gKiBldmVyeXRoaW5nIHdpbGwgYmUgZmxhdHRlbmVkIGFuZCBwbGFjZWQgaW4gdGhlIHNhbWUgbGlzdCBidXQgdGhlIHBhdGhzIHdpbGwgYmUga2VwdCBhcyBhIHtwYXRofSBwcm9wZXJ0eS5cbiAqIEBwYXJhbSBldnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdmVudChldnQpIHtcbiAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgaXNEcmFnRXZ0KGV2dCkgJiYgZXZ0LmRhdGFUcmFuc2ZlclxuICAgICAgICAgICAgICAgICAgICA/IGdldERhdGFUcmFuc2ZlckZpbGVzKGV2dC5kYXRhVHJhbnNmZXIsIGV2dC50eXBlKVxuICAgICAgICAgICAgICAgICAgICA6IGdldElucHV0RmlsZXMoZXZ0KV07XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaXNEcmFnRXZ0KHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUuZGF0YVRyYW5zZmVyO1xufVxuZnVuY3Rpb24gZ2V0SW5wdXRGaWxlcyhldnQpIHtcbiAgICB2YXIgZmlsZXMgPSBpc0lucHV0KGV2dC50YXJnZXQpXG4gICAgICAgID8gZXZ0LnRhcmdldC5maWxlc1xuICAgICAgICAgICAgPyBmcm9tTGlzdChldnQudGFyZ2V0LmZpbGVzKVxuICAgICAgICAgICAgOiBbXVxuICAgICAgICA6IFtdO1xuICAgIHJldHVybiBmaWxlcy5tYXAoZnVuY3Rpb24gKGZpbGUpIHsgcmV0dXJuIHRvRmlsZVdpdGhQYXRoKGZpbGUpOyB9KTtcbn1cbmZ1bmN0aW9uIGlzSW5wdXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGw7XG59XG5mdW5jdGlvbiBnZXREYXRhVHJhbnNmZXJGaWxlcyhkdCwgdHlwZSkge1xuICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaXRlbXMsIGZpbGVzO1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGlmICghZHQuaXRlbXMpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IGZyb21MaXN0KGR0Lml0ZW1zKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaXRlbS5raW5kID09PSAnZmlsZSc7IH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZG5kLmh0bWwjZG5kZXZlbnRzLFxuICAgICAgICAgICAgICAgICAgICAvLyBvbmx5ICdkcmFnc3RhcnQnIGFuZCAnZHJvcCcgaGFzIGFjY2VzcyB0byB0aGUgZGF0YSAoc291cmNlIG5vZGUpXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSAnZHJvcCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBpdGVtc107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwoaXRlbXMubWFwKHRvRmlsZVByb21pc2VzKSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgZmlsZXMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBub0lnbm9yZWRGaWxlcyhmbGF0dGVuKGZpbGVzKSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5vSWdub3JlZEZpbGVzKGZyb21MaXN0KGR0LmZpbGVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoZmlsZSkgeyByZXR1cm4gdG9GaWxlV2l0aFBhdGgoZmlsZSk7IH0pKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gbm9JZ25vcmVkRmlsZXMoZmlsZXMpIHtcbiAgICByZXR1cm4gZmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChmaWxlKSB7IHJldHVybiBGSUxFU19UT19JR05PUkUuaW5kZXhPZihmaWxlLm5hbWUpID09PSAtMTsgfSk7XG59XG4vLyBJRTExIGRvZXMgbm90IHN1cHBvcnQgQXJyYXkuZnJvbSgpXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mcm9tI0Jyb3dzZXJfY29tcGF0aWJpbGl0eVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZpbGVMaXN0XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRGF0YVRyYW5zZmVySXRlbUxpc3RcbmZ1bmN0aW9uIGZyb21MaXN0KGl0ZW1zKSB7XG4gICAgdmFyIGZpbGVzID0gW107XG4gICAgLy8gdHNsaW50OmRpc2FibGU6IHByZWZlci1mb3Itb2ZcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBmaWxlID0gaXRlbXNbaV07XG4gICAgICAgIGZpbGVzLnB1c2goZmlsZSk7XG4gICAgfVxuICAgIHJldHVybiBmaWxlcztcbn1cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9EYXRhVHJhbnNmZXJJdGVtXG5mdW5jdGlvbiB0b0ZpbGVQcm9taXNlcyhpdGVtKSB7XG4gICAgaWYgKHR5cGVvZiBpdGVtLndlYmtpdEdldEFzRW50cnkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZyb21EYXRhVHJhbnNmZXJJdGVtKGl0ZW0pO1xuICAgIH1cbiAgICB2YXIgZW50cnkgPSBpdGVtLndlYmtpdEdldEFzRW50cnkoKTtcbiAgICAvLyBTYWZhcmkgc3VwcG9ydHMgZHJvcHBpbmcgYW4gaW1hZ2Ugbm9kZSBmcm9tIGEgZGlmZmVyZW50IHdpbmRvdyBhbmQgY2FuIGJlIHJldHJpZXZlZCB1c2luZ1xuICAgIC8vIHRoZSBEYXRhVHJhbnNmZXJJdGVtLmdldEFzRmlsZSgpIEFQSVxuICAgIC8vIE5PVEU6IEZpbGVTeXN0ZW1FbnRyeS5maWxlKCkgdGhyb3dzIGlmIHRyeWluZyB0byBnZXQgdGhlIGZpbGVcbiAgICBpZiAoZW50cnkgJiYgZW50cnkuaXNEaXJlY3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIGZyb21EaXJFbnRyeShlbnRyeSk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tRGF0YVRyYW5zZmVySXRlbShpdGVtKTtcbn1cbmZ1bmN0aW9uIGZsYXR0ZW4oaXRlbXMpIHtcbiAgICByZXR1cm4gaXRlbXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGZpbGVzKSB7IHJldHVybiB0c2xpYl8xLl9fc3ByZWFkKGFjYywgKEFycmF5LmlzQXJyYXkoZmlsZXMpID8gZmxhdHRlbihmaWxlcykgOiBbZmlsZXNdKSk7IH0sIFtdKTtcbn1cbmZ1bmN0aW9uIGZyb21EYXRhVHJhbnNmZXJJdGVtKGl0ZW0pIHtcbiAgICB2YXIgZmlsZSA9IGl0ZW0uZ2V0QXNGaWxlKCk7XG4gICAgaWYgKCFmaWxlKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChpdGVtICsgXCIgaXMgbm90IGEgRmlsZVwiKTtcbiAgICB9XG4gICAgdmFyIGZ3cCA9IHRvRmlsZVdpdGhQYXRoKGZpbGUpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZndwKTtcbn1cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlU3lzdGVtRW50cnlcbmZ1bmN0aW9uIGZyb21FbnRyeShlbnRyeSkge1xuICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBlbnRyeS5pc0RpcmVjdG9yeSA/IGZyb21EaXJFbnRyeShlbnRyeSkgOiBmcm9tRmlsZUVudHJ5KGVudHJ5KV07XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZpbGVTeXN0ZW1EaXJlY3RvcnlFbnRyeVxuZnVuY3Rpb24gZnJvbURpckVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlYWRlciA9IGVudHJ5LmNyZWF0ZVJlYWRlcigpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgICAgIGZ1bmN0aW9uIHJlYWRFbnRyaWVzKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlU3lzdGVtRGlyZWN0b3J5RW50cnkvY3JlYXRlUmVhZGVyXG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmlsZVN5c3RlbURpcmVjdG9yeVJlYWRlci9yZWFkRW50cmllc1xuICAgICAgICAgICAgcmVhZGVyLnJlYWRFbnRyaWVzKGZ1bmN0aW9uIChiYXRjaCkgeyByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpbGVzLCBlcnJfMSwgaXRlbXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFiYXRjaC5sZW5ndGgpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsKGVudHJpZXMpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlcyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZpbGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJfMSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMgLypicmVhayovLCA2XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IFByb21pc2UuYWxsKGJhdGNoLm1hcChmcm9tRW50cnkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzLnB1c2goaXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbnRpbnVlIHJlYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkRW50cmllcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTsgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICB9KTtcbn1cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlU3lzdGVtRmlsZUVudHJ5XG5mdW5jdGlvbiBmcm9tRmlsZUVudHJ5KGVudHJ5KSB7XG4gICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuZmlsZShmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZ3cCA9IHRvRmlsZVdpdGhQYXRoKGZpbGUsIGVudHJ5LmZ1bGxQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZndwKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWxlLXNlbGVjdG9yLmpzLm1hcCIsIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG4oZSl7aWYocltlXSlyZXR1cm4gcltlXS5leHBvcnRzO3ZhciBvPXJbZV09e2k6ZSxsOiExLGV4cG9ydHM6e319O3JldHVybiB0W2VdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLG4pLG8ubD0hMCxvLmV4cG9ydHN9dmFyIHI9e307cmV0dXJuIG4ubT10LG4uYz1yLG4uZD1mdW5jdGlvbih0LHIsZSl7bi5vKHQscil8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDplfSl9LG4ubj1mdW5jdGlvbih0KXt2YXIgcj10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gbi5kKHIsXCJhXCIscikscn0sbi5vPWZ1bmN0aW9uKHQsbil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG4pfSxuLnA9XCJcIixuKG4ucz0xMyl9KFtmdW5jdGlvbih0LG4pe3ZhciByPXQuZXhwb3J0cz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuTWF0aD09TWF0aD93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYuTWF0aD09TWF0aD9zZWxmOkZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcIm51bWJlclwiPT10eXBlb2YgX19nJiYoX19nPXIpfSxmdW5jdGlvbih0LG4pe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgdD9udWxsIT09dDpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0fX0sZnVuY3Rpb24odCxuKXt2YXIgcj10LmV4cG9ydHM9e3ZlcnNpb246XCIyLjUuMFwifTtcIm51bWJlclwiPT10eXBlb2YgX19lJiYoX19lPXIpfSxmdW5jdGlvbih0LG4scil7dC5leHBvcnRzPSFyKDQpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pfSxmdW5jdGlvbih0LG4pe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt0cnl7cmV0dXJuISF0KCl9Y2F0Y2godCl7cmV0dXJuITB9fX0sZnVuY3Rpb24odCxuKXt2YXIgcj17fS50b1N0cmluZzt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHIuY2FsbCh0KS5zbGljZSg4LC0xKX19LGZ1bmN0aW9uKHQsbixyKXt2YXIgZT1yKDMyKShcIndrc1wiKSxvPXIoOSksaT1yKDApLlN5bWJvbCx1PVwiZnVuY3Rpb25cIj09dHlwZW9mIGk7KHQuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gZVt0XXx8KGVbdF09dSYmaVt0XXx8KHU/aTpvKShcIlN5bWJvbC5cIit0KSl9KS5zdG9yZT1lfSxmdW5jdGlvbih0LG4scil7dmFyIGU9cigwKSxvPXIoMiksaT1yKDgpLHU9cigyMiksYz1yKDEwKSxmPWZ1bmN0aW9uKHQsbixyKXt2YXIgYSxzLHAsbCx2PXQmZi5GLHk9dCZmLkcsaD10JmYuUyxkPXQmZi5QLHg9dCZmLkIsZz15P2U6aD9lW25dfHwoZVtuXT17fSk6KGVbbl18fHt9KS5wcm90b3R5cGUsbT15P286b1tuXXx8KG9bbl09e30pLGI9bS5wcm90b3R5cGV8fChtLnByb3RvdHlwZT17fSk7eSYmKHI9bik7Zm9yKGEgaW4gcilzPSF2JiZnJiZ2b2lkIDAhPT1nW2FdLHA9KHM/ZzpyKVthXSxsPXgmJnM/YyhwLGUpOmQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHA/YyhGdW5jdGlvbi5jYWxsLHApOnAsZyYmdShnLGEscCx0JmYuVSksbVthXSE9cCYmaShtLGEsbCksZCYmYlthXSE9cCYmKGJbYV09cCl9O2UuY29yZT1vLGYuRj0xLGYuRz0yLGYuUz00LGYuUD04LGYuQj0xNixmLlc9MzIsZi5VPTY0LGYuUj0xMjgsdC5leHBvcnRzPWZ9LGZ1bmN0aW9uKHQsbixyKXt2YXIgZT1yKDE2KSxvPXIoMjEpO3QuZXhwb3J0cz1yKDMpP2Z1bmN0aW9uKHQsbixyKXtyZXR1cm4gZS5mKHQsbixvKDEscikpfTpmdW5jdGlvbih0LG4scil7cmV0dXJuIHRbbl09cix0fX0sZnVuY3Rpb24odCxuKXt2YXIgcj0wLGU9TWF0aC5yYW5kb20oKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuXCJTeW1ib2woXCIuY29uY2F0KHZvaWQgMD09PXQ/XCJcIjp0LFwiKV9cIiwoKytyK2UpLnRvU3RyaW5nKDM2KSl9fSxmdW5jdGlvbih0LG4scil7dmFyIGU9cigyNCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsbixyKXtpZihlKHQpLHZvaWQgMD09PW4pcmV0dXJuIHQ7c3dpdGNoKHIpe2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIHQuY2FsbChuLHIpfTtjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKHIsZSl7cmV0dXJuIHQuY2FsbChuLHIsZSl9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24ocixlLG8pe3JldHVybiB0LmNhbGwobixyLGUsbyl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KG4sYXJndW1lbnRzKX19fSxmdW5jdGlvbih0LG4pe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZih2b2lkIDA9PXQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiK3QpO3JldHVybiB0fX0sZnVuY3Rpb24odCxuLHIpe3ZhciBlPXIoMjgpLG89TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB0PjA/byhlKHQpLDkwMDcxOTkyNTQ3NDA5OTEpOjB9fSxmdW5jdGlvbih0LG4scil7XCJ1c2Ugc3RyaWN0XCI7bi5fX2VzTW9kdWxlPSEwLG4uZGVmYXVsdD1mdW5jdGlvbih0LG4pe2lmKHQmJm4pe3ZhciByPUFycmF5LmlzQXJyYXkobik/bjpuLnNwbGl0KFwiLFwiKSxlPXQubmFtZXx8XCJcIixvPXQudHlwZXx8XCJcIixpPW8ucmVwbGFjZSgvXFwvLiokLyxcIlwiKTtyZXR1cm4gci5zb21lKGZ1bmN0aW9uKHQpe3ZhciBuPXQudHJpbSgpO3JldHVyblwiLlwiPT09bi5jaGFyQXQoMCk/ZS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKG4udG9Mb3dlckNhc2UoKSk6bi5lbmRzV2l0aChcIi8qXCIpP2k9PT1uLnJlcGxhY2UoL1xcLy4qJC8sXCJcIik6bz09PW59KX1yZXR1cm4hMH0scigxNCkscigzNCl9LGZ1bmN0aW9uKHQsbixyKXtyKDE1KSx0LmV4cG9ydHM9cigyKS5BcnJheS5zb21lfSxmdW5jdGlvbih0LG4scil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9cig3KSxvPXIoMjUpKDMpO2UoZS5QK2UuRiohcigzMykoW10uc29tZSwhMCksXCJBcnJheVwiLHtzb21lOmZ1bmN0aW9uKHQpe3JldHVybiBvKHRoaXMsdCxhcmd1bWVudHNbMV0pfX0pfSxmdW5jdGlvbih0LG4scil7dmFyIGU9cigxNyksbz1yKDE4KSxpPXIoMjApLHU9T2JqZWN0LmRlZmluZVByb3BlcnR5O24uZj1yKDMpP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbih0LG4scil7aWYoZSh0KSxuPWkobiwhMCksZShyKSxvKXRyeXtyZXR1cm4gdSh0LG4scil9Y2F0Y2godCl7fWlmKFwiZ2V0XCJpbiByfHxcInNldFwiaW4gcil0aHJvdyBUeXBlRXJyb3IoXCJBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCFcIik7cmV0dXJuXCJ2YWx1ZVwiaW4gciYmKHRbbl09ci52YWx1ZSksdH19LGZ1bmN0aW9uKHQsbixyKXt2YXIgZT1yKDEpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZighZSh0KSl0aHJvdyBUeXBlRXJyb3IodCtcIiBpcyBub3QgYW4gb2JqZWN0IVwiKTtyZXR1cm4gdH19LGZ1bmN0aW9uKHQsbixyKXt0LmV4cG9ydHM9IXIoMykmJiFyKDQpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyKDE5KShcImRpdlwiKSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pfSxmdW5jdGlvbih0LG4scil7dmFyIGU9cigxKSxvPXIoMCkuZG9jdW1lbnQsaT1lKG8pJiZlKG8uY3JlYXRlRWxlbWVudCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBpP28uY3JlYXRlRWxlbWVudCh0KTp7fX19LGZ1bmN0aW9uKHQsbixyKXt2YXIgZT1yKDEpO3QuZXhwb3J0cz1mdW5jdGlvbih0LG4pe2lmKCFlKHQpKXJldHVybiB0O3ZhciByLG87aWYobiYmXCJmdW5jdGlvblwiPT10eXBlb2Yocj10LnRvU3RyaW5nKSYmIWUobz1yLmNhbGwodCkpKXJldHVybiBvO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mKHI9dC52YWx1ZU9mKSYmIWUobz1yLmNhbGwodCkpKXJldHVybiBvO2lmKCFuJiZcImZ1bmN0aW9uXCI9PXR5cGVvZihyPXQudG9TdHJpbmcpJiYhZShvPXIuY2FsbCh0KSkpcmV0dXJuIG87dGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpfX0sZnVuY3Rpb24odCxuKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCxuKXtyZXR1cm57ZW51bWVyYWJsZTohKDEmdCksY29uZmlndXJhYmxlOiEoMiZ0KSx3cml0YWJsZTohKDQmdCksdmFsdWU6bn19fSxmdW5jdGlvbih0LG4scil7dmFyIGU9cigwKSxvPXIoOCksaT1yKDIzKSx1PXIoOSkoXCJzcmNcIiksYz1GdW5jdGlvbi50b1N0cmluZyxmPShcIlwiK2MpLnNwbGl0KFwidG9TdHJpbmdcIik7cigyKS5pbnNwZWN0U291cmNlPWZ1bmN0aW9uKHQpe3JldHVybiBjLmNhbGwodCl9LCh0LmV4cG9ydHM9ZnVuY3Rpb24odCxuLHIsYyl7dmFyIGE9XCJmdW5jdGlvblwiPT10eXBlb2YgcjthJiYoaShyLFwibmFtZVwiKXx8byhyLFwibmFtZVwiLG4pKSx0W25dIT09ciYmKGEmJihpKHIsdSl8fG8ocix1LHRbbl0/XCJcIit0W25dOmYuam9pbihTdHJpbmcobikpKSksdD09PWU/dFtuXT1yOmM/dFtuXT90W25dPXI6byh0LG4scik6KGRlbGV0ZSB0W25dLG8odCxuLHIpKSl9KShGdW5jdGlvbi5wcm90b3R5cGUsXCJ0b1N0cmluZ1wiLGZ1bmN0aW9uKCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcyYmdGhpc1t1XXx8Yy5jYWxsKHRoaXMpfSl9LGZ1bmN0aW9uKHQsbil7dmFyIHI9e30uaGFzT3duUHJvcGVydHk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsbil7cmV0dXJuIHIuY2FsbCh0LG4pfX0sZnVuY3Rpb24odCxuKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBUeXBlRXJyb3IodCtcIiBpcyBub3QgYSBmdW5jdGlvbiFcIik7cmV0dXJuIHR9fSxmdW5jdGlvbih0LG4scil7dmFyIGU9cigxMCksbz1yKDI2KSxpPXIoMjcpLHU9cigxMiksYz1yKDI5KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxuKXt2YXIgcj0xPT10LGY9Mj09dCxhPTM9PXQscz00PT10LHA9Nj09dCxsPTU9PXR8fHAsdj1ufHxjO3JldHVybiBmdW5jdGlvbihuLGMseSl7Zm9yKHZhciBoLGQseD1pKG4pLGc9byh4KSxtPWUoYyx5LDMpLGI9dShnLmxlbmd0aCksXz0wLHc9cj92KG4sYik6Zj92KG4sMCk6dm9pZCAwO2I+XztfKyspaWYoKGx8fF8gaW4gZykmJihoPWdbX10sZD1tKGgsXyx4KSx0KSlpZihyKXdbX109ZDtlbHNlIGlmKGQpc3dpdGNoKHQpe2Nhc2UgMzpyZXR1cm4hMDtjYXNlIDU6cmV0dXJuIGg7Y2FzZSA2OnJldHVybiBfO2Nhc2UgMjp3LnB1c2goaCl9ZWxzZSBpZihzKXJldHVybiExO3JldHVybiBwPy0xOmF8fHM/czp3fX19LGZ1bmN0aW9uKHQsbixyKXt2YXIgZT1yKDUpO3QuZXhwb3J0cz1PYmplY3QoXCJ6XCIpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApP09iamVjdDpmdW5jdGlvbih0KXtyZXR1cm5cIlN0cmluZ1wiPT1lKHQpP3Quc3BsaXQoXCJcIik6T2JqZWN0KHQpfX0sZnVuY3Rpb24odCxuLHIpe3ZhciBlPXIoMTEpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0KGUodCkpfX0sZnVuY3Rpb24odCxuKXt2YXIgcj1NYXRoLmNlaWwsZT1NYXRoLmZsb29yO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gaXNOYU4odD0rdCk/MDoodD4wP2U6cikodCl9fSxmdW5jdGlvbih0LG4scil7dmFyIGU9cigzMCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsbil7cmV0dXJuIG5ldyhlKHQpKShuKX19LGZ1bmN0aW9uKHQsbixyKXt2YXIgZT1yKDEpLG89cigzMSksaT1yKDYpKFwic3BlY2llc1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIG47cmV0dXJuIG8odCkmJihuPXQuY29uc3RydWN0b3IsXCJmdW5jdGlvblwiIT10eXBlb2Ygbnx8biE9PUFycmF5JiYhbyhuLnByb3RvdHlwZSl8fChuPXZvaWQgMCksZShuKSYmbnVsbD09PShuPW5baV0pJiYobj12b2lkIDApKSx2b2lkIDA9PT1uP0FycmF5Om59fSxmdW5jdGlvbih0LG4scil7dmFyIGU9cig1KTt0LmV4cG9ydHM9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24odCl7cmV0dXJuXCJBcnJheVwiPT1lKHQpfX0sZnVuY3Rpb24odCxuLHIpe3ZhciBlPXIoMCksbz1lW1wiX19jb3JlLWpzX3NoYXJlZF9fXCJdfHwoZVtcIl9fY29yZS1qc19zaGFyZWRfX1wiXT17fSk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBvW3RdfHwob1t0XT17fSl9fSxmdW5jdGlvbih0LG4scil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9cig0KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxuKXtyZXR1cm4hIXQmJmUoZnVuY3Rpb24oKXtuP3QuY2FsbChudWxsLGZ1bmN0aW9uKCl7fSwxKTp0LmNhbGwobnVsbCl9KX19LGZ1bmN0aW9uKHQsbixyKXtyKDM1KSx0LmV4cG9ydHM9cigyKS5TdHJpbmcuZW5kc1dpdGh9LGZ1bmN0aW9uKHQsbixyKXtcInVzZSBzdHJpY3RcIjt2YXIgZT1yKDcpLG89cigxMiksaT1yKDM2KSx1PVwiXCIuZW5kc1dpdGg7ZShlLlArZS5GKnIoMzgpKFwiZW5kc1dpdGhcIiksXCJTdHJpbmdcIix7ZW5kc1dpdGg6ZnVuY3Rpb24odCl7dmFyIG49aSh0aGlzLHQsXCJlbmRzV2l0aFwiKSxyPWFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLGU9byhuLmxlbmd0aCksYz12b2lkIDA9PT1yP2U6TWF0aC5taW4obyhyKSxlKSxmPVN0cmluZyh0KTtyZXR1cm4gdT91LmNhbGwobixmLGMpOm4uc2xpY2UoYy1mLmxlbmd0aCxjKT09PWZ9fSl9LGZ1bmN0aW9uKHQsbixyKXt2YXIgZT1yKDM3KSxvPXIoMTEpO3QuZXhwb3J0cz1mdW5jdGlvbih0LG4scil7aWYoZShuKSl0aHJvdyBUeXBlRXJyb3IoXCJTdHJpbmcjXCIrcitcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7cmV0dXJuIFN0cmluZyhvKHQpKX19LGZ1bmN0aW9uKHQsbixyKXt2YXIgZT1yKDEpLG89cig1KSxpPXIoNikoXCJtYXRjaFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIG47cmV0dXJuIGUodCkmJih2b2lkIDAhPT0obj10W2ldKT8hIW46XCJSZWdFeHBcIj09byh0KSl9fSxmdW5jdGlvbih0LG4scil7dmFyIGU9cig2KShcIm1hdGNoXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgbj0vLi87dHJ5e1wiLy4vXCJbdF0obil9Y2F0Y2gocil7dHJ5e3JldHVybiBuW2VdPSExLCFcIi8uL1wiW3RdKG4pfWNhdGNoKHQpe319cmV0dXJuITB9fV0pOyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmltcG9ydCBhY2NlcHRzIGZyb20gJ2F0dHItYWNjZXB0JzsgLy8gRmlyZWZveCB2ZXJzaW9ucyBwcmlvciB0byA1MyByZXR1cm4gYSBib2d1cyBNSU1FIHR5cGUgZm9yIGV2ZXJ5IGZpbGUgZHJhZywgc28gZHJhZ292ZXJzIHdpdGhcbi8vIHRoYXQgTUlNRSB0eXBlIHdpbGwgYWx3YXlzIGJlIGFjY2VwdGVkXG5cbmV4cG9ydCBmdW5jdGlvbiBmaWxlQWNjZXB0ZWQoZmlsZSwgYWNjZXB0KSB7XG4gIHJldHVybiBmaWxlLnR5cGUgPT09ICdhcHBsaWNhdGlvbi94LW1vei1maWxlJyB8fCBhY2NlcHRzKGZpbGUsIGFjY2VwdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZmlsZU1hdGNoU2l6ZShmaWxlLCBtYXhTaXplLCBtaW5TaXplKSB7XG4gIHJldHVybiBmaWxlLnNpemUgPD0gbWF4U2l6ZSAmJiBmaWxlLnNpemUgPj0gbWluU2l6ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhbGxGaWxlc0FjY2VwdGVkKGZpbGVzLCBhY2NlcHQpIHtcbiAgcmV0dXJuIGZpbGVzLmV2ZXJ5KGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgcmV0dXJuIGZpbGVBY2NlcHRlZChmaWxlLCBhY2NlcHQpO1xuICB9KTtcbn0gLy8gUmVhY3QncyBzeW50aGV0aWMgZXZlbnRzIGhhcyBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCxcbi8vIGJ1dCB0byByZW1haW4gY29tcGF0aWJpbGl0eSB3aXRoIG90aGVyIGxpYnMgKFByZWFjdCkgZmFsbCBiYWNrXG4vLyB0byBjaGVjayBldmVudC5jYW5jZWxCdWJibGVcblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvcGFnYXRpb25TdG9wcGVkKGV2ZW50KSB7XG4gIGlmICh0eXBlb2YgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXZlbnQuY2FuY2VsQnViYmxlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBldmVudC5jYW5jZWxCdWJibGU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNFdnRXaXRoRmlsZXMoZXZlbnQpIHtcbiAgaWYgKCFldmVudC5kYXRhVHJhbnNmZXIpIHtcbiAgICByZXR1cm4gISFldmVudC50YXJnZXQgJiYgISFldmVudC50YXJnZXQuZmlsZXM7XG4gIH0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RhdGFUcmFuc2Zlci90eXBlc1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTF9EcmFnX2FuZF9Ecm9wX0FQSS9SZWNvbW1lbmRlZF9kcmFnX3R5cGVzI2ZpbGVcblxuXG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGV2ZW50LmRhdGFUcmFuc2Zlci50eXBlcywgZnVuY3Rpb24gKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSA9PT0gJ0ZpbGVzJyB8fCB0eXBlID09PSAnYXBwbGljYXRpb24veC1tb3otZmlsZSc7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzS2luZEZpbGUoaXRlbSkge1xuICByZXR1cm4gX3R5cGVvZihpdGVtKSA9PT0gJ29iamVjdCcgJiYgaXRlbSAhPT0gbnVsbCAmJiBpdGVtLmtpbmQgPT09ICdmaWxlJztcbn0gLy8gYWxsb3cgdGhlIGVudGlyZSBkb2N1bWVudCB0byBiZSBhIGRyYWcgdGFyZ2V0XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkRvY3VtZW50RHJhZ092ZXIoZXZlbnQpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbn1cblxuZnVuY3Rpb24gaXNJZSh1c2VyQWdlbnQpIHtcbiAgcmV0dXJuIHVzZXJBZ2VudC5pbmRleE9mKCdNU0lFJykgIT09IC0xIHx8IHVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50LycpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gaXNFZGdlKHVzZXJBZ2VudCkge1xuICByZXR1cm4gdXNlckFnZW50LmluZGV4T2YoJ0VkZ2UvJykgIT09IC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJZU9yRWRnZSgpIHtcbiAgdmFyIHVzZXJBZ2VudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIHJldHVybiBpc0llKHVzZXJBZ2VudCkgfHwgaXNFZGdlKHVzZXJBZ2VudCk7XG59XG4vKipcbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCB0byBjb21wb3NlIGV2ZW50IGhhbmRsZXJzXG4gKiBUaGV5IGFyZSBleGVjdXRlZCBpbiBvcmRlciB1bnRpbCBvbmUgb2YgdGhlbSBjYWxscyBgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKWAuXG4gKiBOb3RlIHRoYXQgdGhlIGNoZWNrIGlzIGRvbmUgb24gdGhlIGZpcnN0IGludm9rZSB0b28sXG4gKiBtZWFuaW5nIHRoYXQgaWYgcHJvcGFnYXRpb24gd2FzIHN0b3BwZWQgYmVmb3JlIGludm9raW5nIHRoZSBmbnMsXG4gKiBubyBoYW5kbGVycyB3aWxsIGJlIGV4ZWN1dGVkLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZucyB0aGUgZXZlbnQgaGFubGRlciBmdW5jdGlvbnNcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0aGUgZXZlbnQgaGFuZGxlciB0byBhZGQgdG8gYW4gZWxlbWVudFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wb3NlRXZlbnRIYW5kbGVycygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZucy5zb21lKGZ1bmN0aW9uIChmbikge1xuICAgICAgaWYgKCFpc1Byb3BhZ2F0aW9uU3RvcHBlZChldmVudCkgJiYgZm4pIHtcbiAgICAgICAgZm4uYXBwbHkodm9pZCAwLCBbZXZlbnRdLmNvbmNhdChhcmdzKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc1Byb3BhZ2F0aW9uU3RvcHBlZChldmVudCk7XG4gICAgfSk7XG4gIH07XG59IiwiZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuLyogZXNsaW50IHByZWZlci10ZW1wbGF0ZTogMCAqL1xuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYsIEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VSZWR1Y2VyLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZnJvbUV2ZW50IH0gZnJvbSAnZmlsZS1zZWxlY3Rvcic7XG5pbXBvcnQgeyBhbGxGaWxlc0FjY2VwdGVkLCBjb21wb3NlRXZlbnRIYW5kbGVycywgZmlsZUFjY2VwdGVkLCBmaWxlTWF0Y2hTaXplLCBpc0V2dFdpdGhGaWxlcywgaXNJZU9yRWRnZSwgaXNQcm9wYWdhdGlvblN0b3BwZWQsIG9uRG9jdW1lbnREcmFnT3ZlciB9IGZyb20gJy4vdXRpbHMvaW5kZXgnO1xuLyoqXG4gKiBDb252ZW5pZW5jZSB3cmFwcGVyIGNvbXBvbmVudCBmb3IgdGhlIGB1c2VEcm9wem9uZWAgaG9va1xuICpcbiAqIGBgYGpzeFxuICogPERyb3B6b25lPlxuICogICB7KHtnZXRSb290UHJvcHMsIGdldElucHV0UHJvcHN9KSA9PiAoXG4gKiAgICAgPGRpdiB7Li4uZ2V0Um9vdFByb3BzKCl9PlxuICogICAgICAgPGlucHV0IHsuLi5nZXRJbnB1dFByb3BzKCl9IC8+XG4gKiAgICAgICA8cD5EcmFnICduJyBkcm9wIHNvbWUgZmlsZXMgaGVyZSwgb3IgY2xpY2sgdG8gc2VsZWN0IGZpbGVzPC9wPlxuICogICAgIDwvZGl2PlxuICogICApfVxuICogPC9Ecm9wem9uZT5cbiAqIGBgYFxuICovXG5cbnZhciBEcm9wem9uZSA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgcGFyYW1zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImNoaWxkcmVuXCJdKTtcblxuICB2YXIgX3VzZURyb3B6b25lID0gdXNlRHJvcHpvbmUocGFyYW1zKSxcbiAgICAgIG9wZW4gPSBfdXNlRHJvcHpvbmUub3BlbixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF91c2VEcm9wem9uZSwgW1wib3BlblwiXSk7XG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVmKHtcbiAgICAgICAgb3Blbjogb3BlblxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChfdHlwZW9mKHJlZikgPT09ICdvYmplY3QnICYmIHJlZiAhPT0gbnVsbCkge1xuICAgICAgcmVmLmN1cnJlbnQgPSB7XG4gICAgICAgIG9wZW46IG9wZW5cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlZihudWxsKTtcbiAgICAgIH0gZWxzZSBpZiAoX3R5cGVvZihyZWYpID09PSAnb2JqZWN0JyAmJiByZWYgIT09IG51bGwpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtyZWZdKTsgLy8gVE9ETzogRmlndXJlIG91dCB3aHkgcmVhY3Qtc3R5bGVndWlkaXN0IGNhbm5vdCBjcmVhdGUgZG9jcyBpZiB3ZSBkb24ndCByZXR1cm4gYSBqc3ggZWxlbWVudFxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKHt9LCBwcm9wcywge1xuICAgIG9wZW46IG9wZW5cbiAgfSkpKTtcbn0pO1xuRHJvcHpvbmUuZGlzcGxheU5hbWUgPSAnRHJvcHpvbmUnO1xuRHJvcHpvbmUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogUmVuZGVyIGZ1bmN0aW9uIHRoYXQgZXhwb3NlcyB0aGUgZHJvcHpvbmUgc3RhdGUgYW5kIHByb3AgZ2V0dGVyIGZuc1xuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcmFtcy5nZXRSb290UHJvcHMgUmV0dXJucyB0aGUgcHJvcHMgeW91IHNob3VsZCBhcHBseSB0byB0aGUgcm9vdCBkcm9wIGNvbnRhaW5lciB5b3UgcmVuZGVyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcmFtcy5nZXRJbnB1dFByb3BzIFJldHVybnMgdGhlIHByb3BzIHlvdSBzaG91bGQgYXBwbHkgdG8gaGlkZGVuIGZpbGUgaW5wdXQgeW91IHJlbmRlclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXJhbXMub3BlbiBPcGVuIHRoZSBuYXRpdmUgZmlsZSBzZWxlY3Rpb24gZGlhbG9nXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyYW1zLmlzRm9jdXNlZCBEcm9wem9uZSBhcmVhIGlzIGluIGZvY3VzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyYW1zLmlzRmlsZURpYWxvZ0FjdGl2ZSBGaWxlIGRpYWxvZyBpcyBvcGVuZWRcbiAgICogQHBhcmFtIHtib29sZWFufSBwYXJhbXMuaXNEcmFnQWN0aXZlIEFjdGl2ZSBkcmFnIGlzIGluIHByb2dyZXNzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyYW1zLmlzRHJhZ0FjY2VwdCBEcmFnZ2VkIGZpbGVzIGFyZSBhY2NlcHRlZFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHBhcmFtcy5pc0RyYWdSZWplY3QgU29tZSBkcmFnZ2VkIGZpbGVzIGFyZSByZWplY3RlZFxuICAgKiBAcGFyYW0ge0ZpbGVbXX0gcGFyYW1zLmRyYWdnZWRGaWxlcyBGaWxlcyBpbiBhY3RpdmUgZHJhZ1xuICAgKiBAcGFyYW0ge0ZpbGVbXX0gcGFyYW1zLmFjY2VwdGVkRmlsZXMgQWNjZXB0ZWQgZmlsZXNcbiAgICogQHBhcmFtIHtGaWxlW119IHBhcmFtcy5yZWplY3RlZEZpbGVzIFJlamVjdGVkIGZpbGVzXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFNldCBhY2NlcHRlZCBmaWxlIHR5cGVzLlxuICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL29rb25ldC9hdHRyLWFjY2VwdCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICogS2VlcCBpbiBtaW5kIHRoYXQgbWltZSB0eXBlIGRldGVybWluYXRpb24gaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBwbGF0Zm9ybXMuIENTViBmaWxlcyxcbiAgICogZm9yIGV4YW1wbGUsIGFyZSByZXBvcnRlZCBhcyB0ZXh0L3BsYWluIHVuZGVyIG1hY09TIGJ1dCBhcyBhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwgdW5kZXJcbiAgICogV2luZG93cy4gSW4gc29tZSBjYXNlcyB0aGVyZSBtaWdodCBub3QgYmUgYSBtaW1lIHR5cGUgc2V0IGF0IGFsbC5cbiAgICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtZHJvcHpvbmUvcmVhY3QtZHJvcHpvbmUvaXNzdWVzLzI3NlxuICAgKi9cbiAgYWNjZXB0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuXG4gIC8qKlxuICAgKiBBbGxvdyBkcmFnICduJyBkcm9wIChvciBzZWxlY3Rpb24gZnJvbSB0aGUgZmlsZSBkaWFsb2cpIG9mIG11bHRpcGxlIGZpbGVzXG4gICAqL1xuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGZhbHNlLCBhbGxvdyBkcm9wcGVkIGl0ZW1zIHRvIHRha2Ugb3ZlciB0aGUgY3VycmVudCBicm93c2VyIHdpbmRvd1xuICAgKi9cbiAgcHJldmVudERyb3BPbkRvY3VtZW50OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgZGlzYWJsZXMgY2xpY2sgdG8gb3BlbiB0aGUgbmF0aXZlIGZpbGUgc2VsZWN0aW9uIGRpYWxvZ1xuICAgKi9cbiAgbm9DbGljazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIGRpc2FibGVzIFNQQUNFL0VOVEVSIHRvIG9wZW4gdGhlIG5hdGl2ZSBmaWxlIHNlbGVjdGlvbiBkaWFsb2cuXG4gICAqIE5vdGUgdGhhdCBpdCBhbHNvIHN0b3BzIHRyYWNraW5nIHRoZSBmb2N1cyBzdGF0ZS5cbiAgICovXG4gIG5vS2V5Ym9hcmQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBkaXNhYmxlcyBkcmFnICduJyBkcm9wXG4gICAqL1xuICBub0RyYWc6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzdG9wcyBkcmFnIGV2ZW50IHByb3BhZ2F0aW9uIHRvIHBhcmVudHNcbiAgICovXG4gIG5vRHJhZ0V2ZW50c0J1YmJsaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWluaW11bSBmaWxlIHNpemUgKGluIGJ5dGVzKVxuICAgKi9cbiAgbWluU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogTWF4aW11bSBmaWxlIHNpemUgKGluIGJ5dGVzKVxuICAgKi9cbiAgbWF4U2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogRW5hYmxlL2Rpc2FibGUgdGhlIGRyb3B6b25lXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIHRvIHByb3ZpZGUgYSBjdXN0b20gZmlsZSBhZ2dyZWdhdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7KERyYWdFdmVudHxFdmVudCl9IGV2ZW50IEEgZHJhZyBldmVudCBvciBpbnB1dCBjaGFuZ2UgZXZlbnQgKGlmIGZpbGVzIHdlcmUgc2VsZWN0ZWQgdmlhIHRoZSBmaWxlIGRpYWxvZylcbiAgICovXG4gIGdldEZpbGVzRnJvbUV2ZW50OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2IgZm9yIHdoZW4gY2xvc2luZyB0aGUgZmlsZSBkaWFsb2cgd2l0aCBubyBzZWxlY3Rpb25cbiAgICovXG4gIG9uRmlsZURpYWxvZ0NhbmNlbDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENiIGZvciB3aGVuIHRoZSBgZHJhZ2VudGVyYCBldmVudCBvY2N1cnMuXG4gICAqXG4gICAqIEBwYXJhbSB7RHJhZ0V2ZW50fSBldmVudFxuICAgKi9cbiAgb25EcmFnRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYiBmb3Igd2hlbiB0aGUgYGRyYWdsZWF2ZWAgZXZlbnQgb2NjdXJzXG4gICAqXG4gICAqIEBwYXJhbSB7RHJhZ0V2ZW50fSBldmVudFxuICAgKi9cbiAgb25EcmFnTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYiBmb3Igd2hlbiB0aGUgYGRyYWdvdmVyYCBldmVudCBvY2N1cnNcbiAgICpcbiAgICogQHBhcmFtIHtEcmFnRXZlbnR9IGV2ZW50XG4gICAqL1xuICBvbkRyYWdPdmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2IgZm9yIHdoZW4gdGhlIGBkcm9wYCBldmVudCBvY2N1cnMuXG4gICAqIE5vdGUgdGhhdCB0aGlzIGNhbGxiYWNrIGlzIGludm9rZWQgYWZ0ZXIgdGhlIGBnZXRGaWxlc0Zyb21FdmVudGAgY2FsbGJhY2sgaXMgZG9uZS5cbiAgICpcbiAgICogRmlsZXMgYXJlIGFjY2VwdGVkIG9yIHJlamVjdGVkIGJhc2VkIG9uIHRoZSBgYWNjZXB0YCwgYG11bHRpcGxlYCwgYG1pblNpemVgIGFuZCBgbWF4U2l6ZWAgcHJvcHMuXG4gICAqIGBhY2NlcHRgIG11c3QgYmUgYSB2YWxpZCBbTUlNRSB0eXBlXShodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL21lZGlhLXR5cGVzL21lZGlhLXR5cGVzLnhodG1sKSBhY2NvcmRpbmcgdG8gW2lucHV0IGVsZW1lbnQgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly93d3cudzMub3JnL3dpa2kvSFRNTC9FbGVtZW50cy9pbnB1dC9maWxlKSBvciBhIHZhbGlkIGZpbGUgZXh0ZW5zaW9uLlxuICAgKiBJZiBgbXVsdGlwbGVgIGlzIHNldCB0byBmYWxzZSBhbmQgYWRkaXRpb25hbCBmaWxlcyBhcmUgZHJvcHBwZWQsXG4gICAqIGFsbCBmaWxlcyBiZXNpZGVzIHRoZSBmaXJzdCB3aWxsIGJlIHJlamVjdGVkLlxuICAgKiBBbnkgZmlsZSB3aGljaCBkb2VzIG5vdCBoYXZlIGEgc2l6ZSBpbiB0aGUgW2BtaW5TaXplYCwgYG1heFNpemVgXSByYW5nZSwgd2lsbCBiZSByZWplY3RlZCBhcyB3ZWxsLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhlIGBvbkRyb3BgIGNhbGxiYWNrIHdpbGwgYWx3YXlzIGJlIGludm9rZWQgcmVnYXJkbGVzcyBpZiB0aGUgZHJvcHBlZCBmaWxlcyB3ZXJlIGFjY2VwdGVkIG9yIHJlamVjdGVkLlxuICAgKiBJZiB5b3UnZCBsaWtlIHRvIHJlYWN0IHRvIGEgc3BlY2lmaWMgc2NlbmFyaW8sIHVzZSB0aGUgYG9uRHJvcEFjY2VwdGVkYC9gb25Ecm9wUmVqZWN0ZWRgIHByb3BzLlxuICAgKlxuICAgKiBgb25Ecm9wYCB3aWxsIHByb3ZpZGUgeW91IHdpdGggYW4gYXJyYXkgb2YgW0ZpbGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlKSBvYmplY3RzIHdoaWNoIHlvdSBjYW4gdGhlbiBwcm9jZXNzIGFuZCBzZW5kIHRvIGEgc2VydmVyLlxuICAgKiBGb3IgZXhhbXBsZSwgd2l0aCBbU3VwZXJBZ2VudF0oaHR0cHM6Ly9naXRodWIuY29tL3Zpc2lvbm1lZGlhL3N1cGVyYWdlbnQpIGFzIGEgaHR0cC9hamF4IGxpYnJhcnk6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGZ1bmN0aW9uIG9uRHJvcChhY2NlcHRlZEZpbGVzKSB7XG4gICAqICAgY29uc3QgcmVxID0gcmVxdWVzdC5wb3N0KCcvdXBsb2FkJylcbiAgICogICBhY2NlcHRlZEZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAqICAgICByZXEuYXR0YWNoKGZpbGUubmFtZSwgZmlsZSlcbiAgICogICB9KVxuICAgKiAgIHJlcS5lbmQoY2FsbGJhY2spXG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7RmlsZVtdfSBhY2NlcHRlZEZpbGVzXG4gICAqIEBwYXJhbSB7RmlsZVtdfSByZWplY3RlZEZpbGVzXG4gICAqIEBwYXJhbSB7KERyYWdFdmVudHxFdmVudCl9IGV2ZW50IEEgZHJhZyBldmVudCBvciBpbnB1dCBjaGFuZ2UgZXZlbnQgKGlmIGZpbGVzIHdlcmUgc2VsZWN0ZWQgdmlhIHRoZSBmaWxlIGRpYWxvZylcbiAgICovXG4gIG9uRHJvcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENiIGZvciB3aGVuIHRoZSBgZHJvcGAgZXZlbnQgb2NjdXJzLlxuICAgKiBOb3RlIHRoYXQgaWYgbm8gZmlsZXMgYXJlIGFjY2VwdGVkLCB0aGlzIGNhbGxiYWNrIGlzIG5vdCBpbnZva2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge0ZpbGVbXX0gZmlsZXNcbiAgICogQHBhcmFtIHsoRHJhZ0V2ZW50fEV2ZW50KX0gZXZlbnRcbiAgICovXG4gIG9uRHJvcEFjY2VwdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2IgZm9yIHdoZW4gdGhlIGBkcm9wYCBldmVudCBvY2N1cnMuXG4gICAqIE5vdGUgdGhhdCBpZiBubyBmaWxlcyBhcmUgcmVqZWN0ZWQsIHRoaXMgY2FsbGJhY2sgaXMgbm90IGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0W119IGZpbGVzXG4gICAqIEBwYXJhbSB7KERyYWdFdmVudHxFdmVudCl9IGV2ZW50XG4gICAqL1xuICBvbkRyb3BSZWplY3RlZDogUHJvcFR5cGVzLmZ1bmNcbn07XG5leHBvcnQgZGVmYXVsdCBEcm9wem9uZTtcbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWQgZm9yIHRoZSBgZHJhZ2VudGVyYCxcbiAqIGBkcmFnb3ZlcmAgYW5kIGBkcmFnbGVhdmVgIGV2ZW50cy5cbiAqIEl0IGlzIG5vdCBpbnZva2VkIGlmIHRoZSBpdGVtcyBhcmUgbm90IGZpbGVzIChzdWNoIGFzIGxpbmssIHRleHQsIGV0Yy4pLlxuICpcbiAqIEBjYWxsYmFjayBkcmFnQ2JcbiAqIEBwYXJhbSB7RHJhZ0V2ZW50fSBldmVudFxuICovXG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWQgZm9yIHRoZSBgZHJvcGAgb3IgaW5wdXQgY2hhbmdlIGV2ZW50LlxuICogSXQgaXMgbm90IGludm9rZWQgaWYgdGhlIGl0ZW1zIGFyZSBub3QgZmlsZXMgKHN1Y2ggYXMgbGluaywgdGV4dCwgZXRjLikuXG4gKlxuICogQGNhbGxiYWNrIGRyb3BDYlxuICogQHBhcmFtIHtGaWxlW119IGFjY2VwdGVkRmlsZXMgTGlzdCBvZiBhY2NlcHRlZCBmaWxlc1xuICogQHBhcmFtIHtGaWxlW119IHJlamVjdGVkRmlsZXMgTGlzdCBvZiByZWplY3RlZCBmaWxlc1xuICogQHBhcmFtIHsoRHJhZ0V2ZW50fEV2ZW50KX0gZXZlbnQgQSBkcmFnIGV2ZW50IG9yIGlucHV0IGNoYW5nZSBldmVudCAoaWYgZmlsZXMgd2VyZSBzZWxlY3RlZCB2aWEgdGhlIGZpbGUgZGlhbG9nKVxuICovXG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWQgZm9yIHRoZSBgZHJvcGAgb3IgaW5wdXQgY2hhbmdlIGV2ZW50LlxuICogSXQgaXMgbm90IGludm9rZWQgaWYgdGhlIGl0ZW1zIGFyZSBmaWxlcyAoc3VjaCBhcyBsaW5rLCB0ZXh0LCBldGMuKS5cbiAqXG4gKiBAY2FsbGJhY2sgZHJvcEFjY2VwdGVkQ2JcbiAqIEBwYXJhbSB7RmlsZVtdfSBmaWxlcyBMaXN0IG9mIGFjY2VwdGVkIGZpbGVzIHRoYXQgbWVldCB0aGUgZ2l2ZW4gY3JpdGVyaWFcbiAqIChgYWNjZXB0YCwgYG11bHRpcGxlYCwgYG1pblNpemVgLCBgbWF4U2l6ZWApXG4gKiBAcGFyYW0geyhEcmFnRXZlbnR8RXZlbnQpfSBldmVudCBBIGRyYWcgZXZlbnQgb3IgaW5wdXQgY2hhbmdlIGV2ZW50IChpZiBmaWxlcyB3ZXJlIHNlbGVjdGVkIHZpYSB0aGUgZmlsZSBkaWFsb2cpXG4gKi9cblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZCBmb3IgdGhlIGBkcm9wYCBvciBpbnB1dCBjaGFuZ2UgZXZlbnQuXG4gKlxuICogQGNhbGxiYWNrIGRyb3BSZWplY3RlZENiXG4gKiBAcGFyYW0ge0ZpbGVbXX0gZmlsZXMgTGlzdCBvZiByZWplY3RlZCBmaWxlcyB0aGF0IGRvIG5vdCBtZWV0IHRoZSBnaXZlbiBjcml0ZXJpYVxuICogKGBhY2NlcHRgLCBgbXVsdGlwbGVgLCBgbWluU2l6ZWAsIGBtYXhTaXplYClcbiAqIEBwYXJhbSB7KERyYWdFdmVudHxFdmVudCl9IGV2ZW50IEEgZHJhZyBldmVudCBvciBpbnB1dCBjaGFuZ2UgZXZlbnQgKGlmIGZpbGVzIHdlcmUgc2VsZWN0ZWQgdmlhIHRoZSBmaWxlIGRpYWxvZylcbiAqL1xuXG4vKipcbiAqIEEgZnVuY3Rpb24gdGhhdCBpcyB1c2VkIGFnZ3JlZ2F0ZSBmaWxlcyxcbiAqIGluIGEgYXN5bmNocm9ub3VzIGZhc2hpb24sIGZyb20gZHJhZyBvciBpbnB1dCBjaGFuZ2UgZXZlbnRzLlxuICpcbiAqIEBjYWxsYmFjayBnZXRGaWxlc0Zyb21FdmVudFxuICogQHBhcmFtIHsoRHJhZ0V2ZW50fEV2ZW50KX0gZXZlbnQgQSBkcmFnIGV2ZW50IG9yIGlucHV0IGNoYW5nZSBldmVudCAoaWYgZmlsZXMgd2VyZSBzZWxlY3RlZCB2aWEgdGhlIGZpbGUgZGlhbG9nKVxuICogQHJldHVybnMgeyhGaWxlW118UHJvbWlzZTxGaWxlW10+KX1cbiAqL1xuXG4vKipcbiAqIEFuIG9iamVjdCB3aXRoIHRoZSBjdXJyZW50IGRyb3B6b25lIHN0YXRlIGFuZCBzb21lIGhlbHBlciBmdW5jdGlvbnMuXG4gKlxuICogQHR5cGVkZWYge29iamVjdH0gRHJvcHpvbmVTdGF0ZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0Um9vdFByb3BzIFJldHVybnMgdGhlIHByb3BzIHlvdSBzaG91bGQgYXBwbHkgdG8gdGhlIHJvb3QgZHJvcCBjb250YWluZXIgeW91IHJlbmRlclxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0SW5wdXRQcm9wcyBSZXR1cm5zIHRoZSBwcm9wcyB5b3Ugc2hvdWxkIGFwcGx5IHRvIGhpZGRlbiBmaWxlIGlucHV0IHlvdSByZW5kZXJcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IG9wZW4gT3BlbiB0aGUgbmF0aXZlIGZpbGUgc2VsZWN0aW9uIGRpYWxvZ1xuICogQHByb3BlcnR5IHtib29sZWFufSBpc0ZvY3VzZWQgRHJvcHpvbmUgYXJlYSBpcyBpbiBmb2N1c1xuICogQHByb3BlcnR5IHtib29sZWFufSBpc0ZpbGVEaWFsb2dBY3RpdmUgRmlsZSBkaWFsb2cgaXMgb3BlbmVkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzRHJhZ0FjdGl2ZSBBY3RpdmUgZHJhZyBpcyBpbiBwcm9ncmVzc1xuICogQHByb3BlcnR5IHtib29sZWFufSBpc0RyYWdBY2NlcHQgRHJhZ2dlZCBmaWxlcyBhcmUgYWNjZXB0ZWRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNEcmFnUmVqZWN0IFNvbWUgZHJhZ2dlZCBmaWxlcyBhcmUgcmVqZWN0ZWRcbiAqIEBwcm9wZXJ0eSB7RmlsZVtdfSBkcmFnZ2VkRmlsZXMgRmlsZXMgaW4gYWN0aXZlIGRyYWdcbiAqIEBwcm9wZXJ0eSB7RmlsZVtdfSBhY2NlcHRlZEZpbGVzIEFjY2VwdGVkIGZpbGVzXG4gKiBAcHJvcGVydHkge0ZpbGVbXX0gcmVqZWN0ZWRGaWxlcyBSZWplY3RlZCBmaWxlc1xuICovXG5cbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gIGlzRm9jdXNlZDogZmFsc2UsXG4gIGlzRmlsZURpYWxvZ0FjdGl2ZTogZmFsc2UsXG4gIGlzRHJhZ0FjdGl2ZTogZmFsc2UsXG4gIGlzRHJhZ0FjY2VwdDogZmFsc2UsXG4gIGlzRHJhZ1JlamVjdDogZmFsc2UsXG4gIGRyYWdnZWRGaWxlczogW10sXG4gIGFjY2VwdGVkRmlsZXM6IFtdLFxuICByZWplY3RlZEZpbGVzOiBbXVxuICAvKipcbiAgICogQSBSZWFjdCBob29rIHRoYXQgY3JlYXRlcyBhIGRyYWcgJ24nIGRyb3AgYXJlYS5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGZ1bmN0aW9uIE15RHJvcHpvbmUocHJvcHMpIHtcbiAgICogICBjb25zdCB7Z2V0Um9vdFByb3BzLCBnZXRJbnB1dFByb3BzfSA9IHVzZURyb3B6b25lKHtcbiAgICogICAgIG9uRHJvcDogYWNjZXB0ZWRGaWxlcyA9PiB7XG4gICAqICAgICAgIC8vIGRvIHNvbWV0aGluZyB3aXRoIHRoZSBGaWxlIG9iamVjdHMsIGUuZy4gdXBsb2FkIHRvIHNvbWUgc2VydmVyXG4gICAqICAgICB9XG4gICAqICAgfSk7XG4gICAqICAgcmV0dXJuIChcbiAgICogICAgIDxkaXYgey4uLmdldFJvb3RQcm9wcygpfT5cbiAgICogICAgICAgPGlucHV0IHsuLi5nZXRJbnB1dFByb3BzKCl9IC8+XG4gICAqICAgICAgIDxwPkRyYWcgYW5kIGRyb3Agc29tZSBmaWxlcyBoZXJlLCBvciBjbGljayB0byBzZWxlY3QgZmlsZXM8L3A+XG4gICAqICAgICA8L2Rpdj5cbiAgICogICApXG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIEBmdW5jdGlvbiB1c2VEcm9wem9uZVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IFtwcm9wcy5hY2NlcHRdIFNldCBhY2NlcHRlZCBmaWxlIHR5cGVzLlxuICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL29rb25ldC9hdHRyLWFjY2VwdCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICogS2VlcCBpbiBtaW5kIHRoYXQgbWltZSB0eXBlIGRldGVybWluYXRpb24gaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBwbGF0Zm9ybXMuIENTViBmaWxlcyxcbiAgICogZm9yIGV4YW1wbGUsIGFyZSByZXBvcnRlZCBhcyB0ZXh0L3BsYWluIHVuZGVyIG1hY09TIGJ1dCBhcyBhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwgdW5kZXJcbiAgICogV2luZG93cy4gSW4gc29tZSBjYXNlcyB0aGVyZSBtaWdodCBub3QgYmUgYSBtaW1lIHR5cGUgc2V0IGF0IGFsbC5cbiAgICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtZHJvcHpvbmUvcmVhY3QtZHJvcHpvbmUvaXNzdWVzLzI3NlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcm9wcy5tdWx0aXBsZT10cnVlXSBBbGxvdyBkcmFnICduJyBkcm9wIChvciBzZWxlY3Rpb24gZnJvbSB0aGUgZmlsZSBkaWFsb2cpIG9mIG11bHRpcGxlIGZpbGVzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Byb3BzLnByZXZlbnREcm9wT25Eb2N1bWVudD10cnVlXSBJZiBmYWxzZSwgYWxsb3cgZHJvcHBlZCBpdGVtcyB0byB0YWtlIG92ZXIgdGhlIGN1cnJlbnQgYnJvd3NlciB3aW5kb3dcbiAgICogQHBhcmFtIHtib29sZWFufSBbcHJvcHMubm9DbGljaz1mYWxzZV0gSWYgdHJ1ZSwgZGlzYWJsZXMgY2xpY2sgdG8gb3BlbiB0aGUgbmF0aXZlIGZpbGUgc2VsZWN0aW9uIGRpYWxvZ1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcm9wcy5ub0tleWJvYXJkPWZhbHNlXSBJZiB0cnVlLCBkaXNhYmxlcyBTUEFDRS9FTlRFUiB0byBvcGVuIHRoZSBuYXRpdmUgZmlsZSBzZWxlY3Rpb24gZGlhbG9nLlxuICAgKiBOb3RlIHRoYXQgaXQgYWxzbyBzdG9wcyB0cmFja2luZyB0aGUgZm9jdXMgc3RhdGUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Byb3BzLm5vRHJhZz1mYWxzZV0gSWYgdHJ1ZSwgZGlzYWJsZXMgZHJhZyAnbicgZHJvcFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcm9wcy5ub0RyYWdFdmVudHNCdWJibGluZz1mYWxzZV0gSWYgdHJ1ZSwgc3RvcHMgZHJhZyBldmVudCBwcm9wYWdhdGlvbiB0byBwYXJlbnRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJvcHMubWluU2l6ZT0wXSBNaW5pbXVtIGZpbGUgc2l6ZSAoaW4gYnl0ZXMpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJvcHMubWF4U2l6ZT1JbmZpbml0eV0gTWF4aW11bSBmaWxlIHNpemUgKGluIGJ5dGVzKVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcm9wcy5kaXNhYmxlZD1mYWxzZV0gRW5hYmxlL2Rpc2FibGUgdGhlIGRyb3B6b25lXG4gICAqIEBwYXJhbSB7Z2V0RmlsZXNGcm9tRXZlbnR9IFtwcm9wcy5nZXRGaWxlc0Zyb21FdmVudF0gVXNlIHRoaXMgdG8gcHJvdmlkZSBhIGN1c3RvbSBmaWxlIGFnZ3JlZ2F0b3JcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BzLm9uRmlsZURpYWxvZ0NhbmNlbF0gQ2IgZm9yIHdoZW4gY2xvc2luZyB0aGUgZmlsZSBkaWFsb2cgd2l0aCBubyBzZWxlY3Rpb25cbiAgICogQHBhcmFtIHtkcmFnQ2J9IFtwcm9wcy5vbkRyYWdFbnRlcl0gQ2IgZm9yIHdoZW4gdGhlIGBkcmFnZW50ZXJgIGV2ZW50IG9jY3Vycy5cbiAgICogQHBhcmFtIHtkcmFnQ2J9IFtwcm9wcy5vbkRyYWdMZWF2ZV0gQ2IgZm9yIHdoZW4gdGhlIGBkcmFnbGVhdmVgIGV2ZW50IG9jY3Vyc1xuICAgKiBAcGFyYW0ge2RyYWdDYn0gW3Byb3BzLm9uRHJhZ092ZXJdIENiIGZvciB3aGVuIHRoZSBgZHJhZ292ZXJgIGV2ZW50IG9jY3Vyc1xuICAgKiBAcGFyYW0ge2Ryb3BDYn0gW3Byb3BzLm9uRHJvcF0gQ2IgZm9yIHdoZW4gdGhlIGBkcm9wYCBldmVudCBvY2N1cnMuXG4gICAqIE5vdGUgdGhhdCB0aGlzIGNhbGxiYWNrIGlzIGludm9rZWQgYWZ0ZXIgdGhlIGBnZXRGaWxlc0Zyb21FdmVudGAgY2FsbGJhY2sgaXMgZG9uZS5cbiAgICpcbiAgICogRmlsZXMgYXJlIGFjY2VwdGVkIG9yIHJlamVjdGVkIGJhc2VkIG9uIHRoZSBgYWNjZXB0YCwgYG11bHRpcGxlYCwgYG1pblNpemVgIGFuZCBgbWF4U2l6ZWAgcHJvcHMuXG4gICAqIGBhY2NlcHRgIG11c3QgYmUgYSB2YWxpZCBbTUlNRSB0eXBlXShodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL21lZGlhLXR5cGVzL21lZGlhLXR5cGVzLnhodG1sKSBhY2NvcmRpbmcgdG8gW2lucHV0IGVsZW1lbnQgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly93d3cudzMub3JnL3dpa2kvSFRNTC9FbGVtZW50cy9pbnB1dC9maWxlKSBvciBhIHZhbGlkIGZpbGUgZXh0ZW5zaW9uLlxuICAgKiBJZiBgbXVsdGlwbGVgIGlzIHNldCB0byBmYWxzZSBhbmQgYWRkaXRpb25hbCBmaWxlcyBhcmUgZHJvcHBwZWQsXG4gICAqIGFsbCBmaWxlcyBiZXNpZGVzIHRoZSBmaXJzdCB3aWxsIGJlIHJlamVjdGVkLlxuICAgKiBBbnkgZmlsZSB3aGljaCBkb2VzIG5vdCBoYXZlIGEgc2l6ZSBpbiB0aGUgW2BtaW5TaXplYCwgYG1heFNpemVgXSByYW5nZSwgd2lsbCBiZSByZWplY3RlZCBhcyB3ZWxsLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhlIGBvbkRyb3BgIGNhbGxiYWNrIHdpbGwgYWx3YXlzIGJlIGludm9rZWQgcmVnYXJkbGVzcyBpZiB0aGUgZHJvcHBlZCBmaWxlcyB3ZXJlIGFjY2VwdGVkIG9yIHJlamVjdGVkLlxuICAgKiBJZiB5b3UnZCBsaWtlIHRvIHJlYWN0IHRvIGEgc3BlY2lmaWMgc2NlbmFyaW8sIHVzZSB0aGUgYG9uRHJvcEFjY2VwdGVkYC9gb25Ecm9wUmVqZWN0ZWRgIHByb3BzLlxuICAgKlxuICAgKiBgb25Ecm9wYCB3aWxsIHByb3ZpZGUgeW91IHdpdGggYW4gYXJyYXkgb2YgW0ZpbGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlKSBvYmplY3RzIHdoaWNoIHlvdSBjYW4gdGhlbiBwcm9jZXNzIGFuZCBzZW5kIHRvIGEgc2VydmVyLlxuICAgKiBGb3IgZXhhbXBsZSwgd2l0aCBbU3VwZXJBZ2VudF0oaHR0cHM6Ly9naXRodWIuY29tL3Zpc2lvbm1lZGlhL3N1cGVyYWdlbnQpIGFzIGEgaHR0cC9hamF4IGxpYnJhcnk6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGZ1bmN0aW9uIG9uRHJvcChhY2NlcHRlZEZpbGVzKSB7XG4gICAqICAgY29uc3QgcmVxID0gcmVxdWVzdC5wb3N0KCcvdXBsb2FkJylcbiAgICogICBhY2NlcHRlZEZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAqICAgICByZXEuYXR0YWNoKGZpbGUubmFtZSwgZmlsZSlcbiAgICogICB9KVxuICAgKiAgIHJlcS5lbmQoY2FsbGJhY2spXG4gICAqIH1cbiAgICogYGBgXG4gICAqIEBwYXJhbSB7ZHJvcEFjY2VwdGVkQ2J9IFtwcm9wcy5vbkRyb3BBY2NlcHRlZF1cbiAgICogQHBhcmFtIHtkcm9wUmVqZWN0ZWRDYn0gW3Byb3BzLm9uRHJvcFJlamVjdGVkXVxuICAgKlxuICAgKiBAcmV0dXJucyB7RHJvcHpvbmVTdGF0ZX1cbiAgICovXG5cbn07XG5leHBvcnQgZnVuY3Rpb24gdXNlRHJvcHpvbmUoKSB7XG4gIHZhciBfcmVmMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBhY2NlcHQgPSBfcmVmMi5hY2NlcHQsXG4gICAgICBfcmVmMiRkaXNhYmxlZCA9IF9yZWYyLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcmVmMiRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRkaXNhYmxlZCxcbiAgICAgIF9yZWYyJGdldEZpbGVzRnJvbUV2ZSA9IF9yZWYyLmdldEZpbGVzRnJvbUV2ZW50LFxuICAgICAgZ2V0RmlsZXNGcm9tRXZlbnQgPSBfcmVmMiRnZXRGaWxlc0Zyb21FdmUgPT09IHZvaWQgMCA/IGZyb21FdmVudCA6IF9yZWYyJGdldEZpbGVzRnJvbUV2ZSxcbiAgICAgIF9yZWYyJG1heFNpemUgPSBfcmVmMi5tYXhTaXplLFxuICAgICAgbWF4U2l6ZSA9IF9yZWYyJG1heFNpemUgPT09IHZvaWQgMCA/IEluZmluaXR5IDogX3JlZjIkbWF4U2l6ZSxcbiAgICAgIF9yZWYyJG1pblNpemUgPSBfcmVmMi5taW5TaXplLFxuICAgICAgbWluU2l6ZSA9IF9yZWYyJG1pblNpemUgPT09IHZvaWQgMCA/IDAgOiBfcmVmMiRtaW5TaXplLFxuICAgICAgX3JlZjIkbXVsdGlwbGUgPSBfcmVmMi5tdWx0aXBsZSxcbiAgICAgIG11bHRpcGxlID0gX3JlZjIkbXVsdGlwbGUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRtdWx0aXBsZSxcbiAgICAgIG9uRHJhZ0VudGVyID0gX3JlZjIub25EcmFnRW50ZXIsXG4gICAgICBvbkRyYWdMZWF2ZSA9IF9yZWYyLm9uRHJhZ0xlYXZlLFxuICAgICAgb25EcmFnT3ZlciA9IF9yZWYyLm9uRHJhZ092ZXIsXG4gICAgICBvbkRyb3AgPSBfcmVmMi5vbkRyb3AsXG4gICAgICBvbkRyb3BBY2NlcHRlZCA9IF9yZWYyLm9uRHJvcEFjY2VwdGVkLFxuICAgICAgb25Ecm9wUmVqZWN0ZWQgPSBfcmVmMi5vbkRyb3BSZWplY3RlZCxcbiAgICAgIG9uRmlsZURpYWxvZ0NhbmNlbCA9IF9yZWYyLm9uRmlsZURpYWxvZ0NhbmNlbCxcbiAgICAgIF9yZWYyJHByZXZlbnREcm9wT25EbyA9IF9yZWYyLnByZXZlbnREcm9wT25Eb2N1bWVudCxcbiAgICAgIHByZXZlbnREcm9wT25Eb2N1bWVudCA9IF9yZWYyJHByZXZlbnREcm9wT25EbyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHByZXZlbnREcm9wT25EbyxcbiAgICAgIF9yZWYyJG5vQ2xpY2sgPSBfcmVmMi5ub0NsaWNrLFxuICAgICAgbm9DbGljayA9IF9yZWYyJG5vQ2xpY2sgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkbm9DbGljayxcbiAgICAgIF9yZWYyJG5vS2V5Ym9hcmQgPSBfcmVmMi5ub0tleWJvYXJkLFxuICAgICAgbm9LZXlib2FyZCA9IF9yZWYyJG5vS2V5Ym9hcmQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkbm9LZXlib2FyZCxcbiAgICAgIF9yZWYyJG5vRHJhZyA9IF9yZWYyLm5vRHJhZyxcbiAgICAgIG5vRHJhZyA9IF9yZWYyJG5vRHJhZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRub0RyYWcsXG4gICAgICBfcmVmMiRub0RyYWdFdmVudHNCdWIgPSBfcmVmMi5ub0RyYWdFdmVudHNCdWJibGluZyxcbiAgICAgIG5vRHJhZ0V2ZW50c0J1YmJsaW5nID0gX3JlZjIkbm9EcmFnRXZlbnRzQnViID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJG5vRHJhZ0V2ZW50c0J1YjtcblxuICB2YXIgcm9vdFJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIGlucHV0UmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIocmVkdWNlciwgaW5pdGlhbFN0YXRlKSxcbiAgICAgIF91c2VSZWR1Y2VyMiA9IF9zbGljZWRUb0FycmF5KF91c2VSZWR1Y2VyLCAyKSxcbiAgICAgIHN0YXRlID0gX3VzZVJlZHVjZXIyWzBdLFxuICAgICAgZGlzcGF0Y2ggPSBfdXNlUmVkdWNlcjJbMV07XG5cbiAgdmFyIGlzRm9jdXNlZCA9IHN0YXRlLmlzRm9jdXNlZCxcbiAgICAgIGlzRmlsZURpYWxvZ0FjdGl2ZSA9IHN0YXRlLmlzRmlsZURpYWxvZ0FjdGl2ZSxcbiAgICAgIGRyYWdnZWRGaWxlcyA9IHN0YXRlLmRyYWdnZWRGaWxlczsgLy8gRm4gZm9yIG9wZW5pbmcgdGhlIGZpbGUgZGlhbG9nIHByb2dyYW1tYXRpY2FsbHlcblxuICB2YXIgb3BlbkZpbGVEaWFsb2cgPSBmdW5jdGlvbiBvcGVuRmlsZURpYWxvZygpIHtcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCkge1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnb3BlbkRpYWxvZydcbiAgICAgIH0pO1xuICAgICAgaW5wdXRSZWYuY3VycmVudC52YWx1ZSA9IG51bGw7XG4gICAgICBpbnB1dFJlZi5jdXJyZW50LmNsaWNrKCk7XG4gICAgfVxuICB9OyAvLyBVcGRhdGUgZmlsZSBkaWFsb2cgYWN0aXZlIHN0YXRlIHdoZW4gdGhlIHdpbmRvdyBpcyBmb2N1c2VkIG9uXG5cblxuICB2YXIgb25XaW5kb3dGb2N1cyA9IGZ1bmN0aW9uIG9uV2luZG93Rm9jdXMoKSB7XG4gICAgLy8gRXhlY3V0ZSB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBmaWxlIGRpYWxvZyBpcyBvcGVuZWQgaW4gdGhlIGJyb3dzZXJcbiAgICBpZiAoaXNGaWxlRGlhbG9nQWN0aXZlKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlucHV0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICB2YXIgZmlsZXMgPSBpbnB1dFJlZi5jdXJyZW50LmZpbGVzO1xuXG4gICAgICAgICAgaWYgKCFmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2Nsb3NlRGlhbG9nJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25GaWxlRGlhbG9nQ2FuY2VsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIG9uRmlsZURpYWxvZ0NhbmNlbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgMzAwKTtcbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBvbldpbmRvd0ZvY3VzLCBmYWxzZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIG9uV2luZG93Rm9jdXMsIGZhbHNlKTtcbiAgICB9O1xuICB9LCBbaW5wdXRSZWYsIGlzRmlsZURpYWxvZ0FjdGl2ZSwgb25GaWxlRGlhbG9nQ2FuY2VsXSk7IC8vIENiIHRvIG9wZW4gdGhlIGZpbGUgZGlhbG9nIHdoZW4gU1BBQ0UvRU5URVIgb2NjdXJzIG9uIHRoZSBkcm9wem9uZVxuXG4gIHZhciBvbktleURvd25DYiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIElnbm9yZSBrZXlib2FyZCBldmVudHMgYnViYmxpbmcgdXAgdGhlIERPTSB0cmVlXG4gICAgaWYgKCFyb290UmVmLmN1cnJlbnQgfHwgIXJvb3RSZWYuY3VycmVudC5pc0VxdWFsTm9kZShldmVudC50YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDMyIHx8IGV2ZW50LmtleUNvZGUgPT09IDEzKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgb3BlbkZpbGVEaWFsb2coKTtcbiAgICB9XG4gIH0sIFtyb290UmVmLCBpbnB1dFJlZl0pOyAvLyBVcGRhdGUgZm9jdXMgc3RhdGUgZm9yIHRoZSBkcm9wem9uZVxuXG4gIHZhciBvbkZvY3VzQ2IgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogJ2ZvY3VzJ1xuICAgIH0pO1xuICB9LCBbXSk7XG4gIHZhciBvbkJsdXJDYiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnYmx1cidcbiAgICB9KTtcbiAgfSwgW10pOyAvLyBDYiB0byBvcGVuIHRoZSBmaWxlIGRpYWxvZyB3aGVuIGNsaWNrIG9jY3VycyBvbiB0aGUgZHJvcHpvbmVcblxuICB2YXIgb25DbGlja0NiID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmIChub0NsaWNrKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJbiBJRTExL0VkZ2UgdGhlIGZpbGUtYnJvd3NlciBkaWFsb2cgaXMgYmxvY2tpbmcsIHRoZXJlZm9yZSwgdXNlIHNldFRpbWVvdXQoKVxuICAgIC8vIHRvIGVuc3VyZSBSZWFjdCBjYW4gaGFuZGxlIHN0YXRlIGNoYW5nZXNcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1kcm9wem9uZS9yZWFjdC1kcm9wem9uZS9pc3N1ZXMvNDUwXG5cblxuICAgIGlmIChpc0llT3JFZGdlKCkpIHtcbiAgICAgIHNldFRpbWVvdXQob3BlbkZpbGVEaWFsb2csIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcGVuRmlsZURpYWxvZygpO1xuICAgIH1cbiAgfSwgW2lucHV0UmVmLCBub0NsaWNrXSk7XG4gIHZhciBkcmFnVGFyZ2V0c1JlZiA9IHVzZVJlZihbXSk7XG5cbiAgdmFyIG9uRG9jdW1lbnREcm9wID0gZnVuY3Rpb24gb25Eb2N1bWVudERyb3AoZXZlbnQpIHtcbiAgICBpZiAocm9vdFJlZi5jdXJyZW50ICYmIHJvb3RSZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAvLyBJZiB3ZSBpbnRlcmNlcHRlZCBhbiBldmVudCBmb3Igb3VyIGluc3RhbmNlLCBsZXQgaXQgcHJvcGFnYXRlIGRvd24gdG8gdGhlIGluc3RhbmNlJ3Mgb25Ecm9wIGhhbmRsZXJcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGRyYWdUYXJnZXRzUmVmLmN1cnJlbnQgPSBbXTtcbiAgfTtcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcmV2ZW50RHJvcE9uRG9jdW1lbnQpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgb25Eb2N1bWVudERyYWdPdmVyLCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgb25Eb2N1bWVudERyb3AsIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByZXZlbnREcm9wT25Eb2N1bWVudCkge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIG9uRG9jdW1lbnREcmFnT3Zlcik7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBvbkRvY3VtZW50RHJvcCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW3Jvb3RSZWYsIHByZXZlbnREcm9wT25Eb2N1bWVudF0pO1xuICB2YXIgb25EcmFnRW50ZXJDYiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFBlcnNpc3QgaGVyZSBiZWNhdXNlIHdlIG5lZWQgdGhlIGV2ZW50IGxhdGVyIGFmdGVyIGdldEZpbGVzRnJvbUV2ZW50KCkgaXMgZG9uZVxuXG4gICAgZXZlbnQucGVyc2lzdCgpO1xuICAgIHN0b3BQcm9wYWdhdGlvbihldmVudCk7IC8vIENvdW50IHRoZSBkcm9wem9uZSBhbmQgYW55IGNoaWxkcmVuIHRoYXQgYXJlIGVudGVyZWQuXG5cbiAgICBpZiAoZHJhZ1RhcmdldHNSZWYuY3VycmVudC5pbmRleE9mKGV2ZW50LnRhcmdldCkgPT09IC0xKSB7XG4gICAgICBkcmFnVGFyZ2V0c1JlZi5jdXJyZW50ID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShkcmFnVGFyZ2V0c1JlZi5jdXJyZW50KSwgW2V2ZW50LnRhcmdldF0pO1xuICAgIH1cblxuICAgIGlmIChpc0V2dFdpdGhGaWxlcyhldmVudCkpIHtcbiAgICAgIFByb21pc2UucmVzb2x2ZShnZXRGaWxlc0Zyb21FdmVudChldmVudCkpLnRoZW4oZnVuY3Rpb24gKGRyYWdnZWRGaWxlcykge1xuICAgICAgICBpZiAoaXNQcm9wYWdhdGlvblN0b3BwZWQoZXZlbnQpICYmICFub0RyYWdFdmVudHNCdWJibGluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICBkcmFnZ2VkRmlsZXM6IGRyYWdnZWRGaWxlcyxcbiAgICAgICAgICBpc0RyYWdBY3RpdmU6IHRydWUsXG4gICAgICAgICAgdHlwZTogJ3NldERyYWdnZWRGaWxlcydcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG9uRHJhZ0VudGVyKSB7XG4gICAgICAgICAgb25EcmFnRW50ZXIoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtnZXRGaWxlc0Zyb21FdmVudCwgb25EcmFnRW50ZXIsIG5vRHJhZ0V2ZW50c0J1YmJsaW5nXSk7XG4gIHZhciBvbkRyYWdPdmVyQ2IgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICBzdG9wUHJvcGFnYXRpb24oZXZlbnQpO1xuXG4gICAgaWYgKGV2ZW50LmRhdGFUcmFuc2Zlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnY29weSc7XG4gICAgICB9IGNhdGNoIChfdW51c2VkKSB7fVxuICAgICAgLyogZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eSAqL1xuXG4gICAgfVxuXG4gICAgaWYgKGlzRXZ0V2l0aEZpbGVzKGV2ZW50KSAmJiBvbkRyYWdPdmVyKSB7XG4gICAgICBvbkRyYWdPdmVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sIFtvbkRyYWdPdmVyLCBub0RyYWdFdmVudHNCdWJibGluZ10pO1xuICB2YXIgb25EcmFnTGVhdmVDYiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQucGVyc2lzdCgpO1xuICAgIHN0b3BQcm9wYWdhdGlvbihldmVudCk7IC8vIE9ubHkgZGVhY3RpdmF0ZSBvbmNlIHRoZSBkcm9wem9uZSBhbmQgYWxsIGNoaWxkcmVuIGhhdmUgYmVlbiBsZWZ0XG5cbiAgICB2YXIgdGFyZ2V0cyA9IGRyYWdUYXJnZXRzUmVmLmN1cnJlbnQuZmlsdGVyKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHJldHVybiB0YXJnZXQgIT09IGV2ZW50LnRhcmdldCAmJiByb290UmVmLmN1cnJlbnQgJiYgcm9vdFJlZi5jdXJyZW50LmNvbnRhaW5zKHRhcmdldCk7XG4gICAgfSk7XG4gICAgZHJhZ1RhcmdldHNSZWYuY3VycmVudCA9IHRhcmdldHM7XG5cbiAgICBpZiAodGFyZ2V0cy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgaXNEcmFnQWN0aXZlOiBmYWxzZSxcbiAgICAgIHR5cGU6ICdzZXREcmFnZ2VkRmlsZXMnLFxuICAgICAgZHJhZ2dlZEZpbGVzOiBbXVxuICAgIH0pO1xuXG4gICAgaWYgKGlzRXZ0V2l0aEZpbGVzKGV2ZW50KSAmJiBvbkRyYWdMZWF2ZSkge1xuICAgICAgb25EcmFnTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfSwgW3Jvb3RSZWYsIG9uRHJhZ0xlYXZlLCBub0RyYWdFdmVudHNCdWJibGluZ10pO1xuICB2YXIgb25Ecm9wQ2IgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBQZXJzaXN0IGhlcmUgYmVjYXVzZSB3ZSBuZWVkIHRoZSBldmVudCBsYXRlciBhZnRlciBnZXRGaWxlc0Zyb21FdmVudCgpIGlzIGRvbmVcblxuICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICBzdG9wUHJvcGFnYXRpb24oZXZlbnQpO1xuICAgIGRyYWdUYXJnZXRzUmVmLmN1cnJlbnQgPSBbXTtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAncmVzZXQnXG4gICAgfSk7XG5cbiAgICBpZiAoaXNFdnRXaXRoRmlsZXMoZXZlbnQpKSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUoZ2V0RmlsZXNGcm9tRXZlbnQoZXZlbnQpKS50aGVuKGZ1bmN0aW9uIChmaWxlcykge1xuICAgICAgICBpZiAoaXNQcm9wYWdhdGlvblN0b3BwZWQoZXZlbnQpICYmICFub0RyYWdFdmVudHNCdWJibGluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY2NlcHRlZEZpbGVzID0gW107XG4gICAgICAgIHZhciByZWplY3RlZEZpbGVzID0gW107XG4gICAgICAgIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgICBpZiAoZmlsZUFjY2VwdGVkKGZpbGUsIGFjY2VwdCkgJiYgZmlsZU1hdGNoU2l6ZShmaWxlLCBtYXhTaXplLCBtaW5TaXplKSkge1xuICAgICAgICAgICAgYWNjZXB0ZWRGaWxlcy5wdXNoKGZpbGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3RlZEZpbGVzLnB1c2goZmlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIW11bHRpcGxlICYmIGFjY2VwdGVkRmlsZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHJlamVjdGVkRmlsZXMucHVzaC5hcHBseShyZWplY3RlZEZpbGVzLCBfdG9Db25zdW1hYmxlQXJyYXkoYWNjZXB0ZWRGaWxlcy5zcGxpY2UoMCkpKTsgLy8gUmVqZWN0IGV2ZXJ5dGhpbmcgYW5kIGVtcHR5IGFjY2VwdGVkIGZpbGVzXG4gICAgICAgIH1cblxuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgYWNjZXB0ZWRGaWxlczogYWNjZXB0ZWRGaWxlcyxcbiAgICAgICAgICByZWplY3RlZEZpbGVzOiByZWplY3RlZEZpbGVzLFxuICAgICAgICAgIHR5cGU6ICdzZXRGaWxlcydcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG9uRHJvcCkge1xuICAgICAgICAgIG9uRHJvcChhY2NlcHRlZEZpbGVzLCByZWplY3RlZEZpbGVzLCBldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVqZWN0ZWRGaWxlcy5sZW5ndGggPiAwICYmIG9uRHJvcFJlamVjdGVkKSB7XG4gICAgICAgICAgb25Ecm9wUmVqZWN0ZWQocmVqZWN0ZWRGaWxlcywgZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjY2VwdGVkRmlsZXMubGVuZ3RoID4gMCAmJiBvbkRyb3BBY2NlcHRlZCkge1xuICAgICAgICAgIG9uRHJvcEFjY2VwdGVkKGFjY2VwdGVkRmlsZXMsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbXVsdGlwbGUsIGFjY2VwdCwgbWluU2l6ZSwgbWF4U2l6ZSwgZ2V0RmlsZXNGcm9tRXZlbnQsIG9uRHJvcCwgb25Ecm9wQWNjZXB0ZWQsIG9uRHJvcFJlamVjdGVkLCBub0RyYWdFdmVudHNCdWJibGluZ10pO1xuXG4gIHZhciBjb21wb3NlSGFuZGxlciA9IGZ1bmN0aW9uIGNvbXBvc2VIYW5kbGVyKGZuKSB7XG4gICAgcmV0dXJuIGRpc2FibGVkID8gbnVsbCA6IGZuO1xuICB9O1xuXG4gIHZhciBjb21wb3NlS2V5Ym9hcmRIYW5kbGVyID0gZnVuY3Rpb24gY29tcG9zZUtleWJvYXJkSGFuZGxlcihmbikge1xuICAgIHJldHVybiBub0tleWJvYXJkID8gbnVsbCA6IGNvbXBvc2VIYW5kbGVyKGZuKTtcbiAgfTtcblxuICB2YXIgY29tcG9zZURyYWdIYW5kbGVyID0gZnVuY3Rpb24gY29tcG9zZURyYWdIYW5kbGVyKGZuKSB7XG4gICAgcmV0dXJuIG5vRHJhZyA/IG51bGwgOiBjb21wb3NlSGFuZGxlcihmbik7XG4gIH07XG5cbiAgdmFyIHN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbihldmVudCkge1xuICAgIGlmIChub0RyYWdFdmVudHNCdWJibGluZykge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRSb290UHJvcHMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWYzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgICBfcmVmMyRyZWZLZXkgPSBfcmVmMy5yZWZLZXksXG4gICAgICAgICAgcmVmS2V5ID0gX3JlZjMkcmVmS2V5ID09PSB2b2lkIDAgPyAncmVmJyA6IF9yZWYzJHJlZktleSxcbiAgICAgICAgICBvbktleURvd24gPSBfcmVmMy5vbktleURvd24sXG4gICAgICAgICAgb25Gb2N1cyA9IF9yZWYzLm9uRm9jdXMsXG4gICAgICAgICAgb25CbHVyID0gX3JlZjMub25CbHVyLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfcmVmMy5vbkNsaWNrLFxuICAgICAgICAgIG9uRHJhZ0VudGVyID0gX3JlZjMub25EcmFnRW50ZXIsXG4gICAgICAgICAgb25EcmFnT3ZlciA9IF9yZWYzLm9uRHJhZ092ZXIsXG4gICAgICAgICAgb25EcmFnTGVhdmUgPSBfcmVmMy5vbkRyYWdMZWF2ZSxcbiAgICAgICAgICBvbkRyb3AgPSBfcmVmMy5vbkRyb3AsXG4gICAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMywgW1wicmVmS2V5XCIsIFwib25LZXlEb3duXCIsIFwib25Gb2N1c1wiLCBcIm9uQmx1clwiLCBcIm9uQ2xpY2tcIiwgXCJvbkRyYWdFbnRlclwiLCBcIm9uRHJhZ092ZXJcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcIm9uRHJvcFwiXSk7XG5cbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICAgIG9uS2V5RG93bjogY29tcG9zZUtleWJvYXJkSGFuZGxlcihjb21wb3NlRXZlbnRIYW5kbGVycyhvbktleURvd24sIG9uS2V5RG93bkNiKSksXG4gICAgICAgIG9uRm9jdXM6IGNvbXBvc2VLZXlib2FyZEhhbmRsZXIoY29tcG9zZUV2ZW50SGFuZGxlcnMob25Gb2N1cywgb25Gb2N1c0NiKSksXG4gICAgICAgIG9uQmx1cjogY29tcG9zZUtleWJvYXJkSGFuZGxlcihjb21wb3NlRXZlbnRIYW5kbGVycyhvbkJsdXIsIG9uQmx1ckNiKSksXG4gICAgICAgIG9uQ2xpY2s6IGNvbXBvc2VIYW5kbGVyKGNvbXBvc2VFdmVudEhhbmRsZXJzKG9uQ2xpY2ssIG9uQ2xpY2tDYikpLFxuICAgICAgICBvbkRyYWdFbnRlcjogY29tcG9zZURyYWdIYW5kbGVyKGNvbXBvc2VFdmVudEhhbmRsZXJzKG9uRHJhZ0VudGVyLCBvbkRyYWdFbnRlckNiKSksXG4gICAgICAgIG9uRHJhZ092ZXI6IGNvbXBvc2VEcmFnSGFuZGxlcihjb21wb3NlRXZlbnRIYW5kbGVycyhvbkRyYWdPdmVyLCBvbkRyYWdPdmVyQ2IpKSxcbiAgICAgICAgb25EcmFnTGVhdmU6IGNvbXBvc2VEcmFnSGFuZGxlcihjb21wb3NlRXZlbnRIYW5kbGVycyhvbkRyYWdMZWF2ZSwgb25EcmFnTGVhdmVDYikpLFxuICAgICAgICBvbkRyb3A6IGNvbXBvc2VEcmFnSGFuZGxlcihjb21wb3NlRXZlbnRIYW5kbGVycyhvbkRyb3AsIG9uRHJvcENiKSlcbiAgICAgIH0sIHJlZktleSwgcm9vdFJlZiksICFkaXNhYmxlZCAmJiAhbm9LZXlib2FyZCA/IHtcbiAgICAgICAgdGFiSW5kZXg6IDBcbiAgICAgIH0gOiB7fSwgcmVzdCk7XG4gICAgfTtcbiAgfSwgW3Jvb3RSZWYsIG9uS2V5RG93bkNiLCBvbkZvY3VzQ2IsIG9uQmx1ckNiLCBvbkNsaWNrQ2IsIG9uRHJhZ0VudGVyQ2IsIG9uRHJhZ092ZXJDYiwgb25EcmFnTGVhdmVDYiwgb25Ecm9wQ2IsIG5vS2V5Ym9hcmQsIG5vRHJhZywgZGlzYWJsZWRdKTtcbiAgdmFyIG9uSW5wdXRFbGVtZW50Q2xpY2sgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSwgW10pO1xuICB2YXIgZ2V0SW5wdXRQcm9wcyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlZjQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgICAgIF9yZWY0JHJlZktleSA9IF9yZWY0LnJlZktleSxcbiAgICAgICAgICByZWZLZXkgPSBfcmVmNCRyZWZLZXkgPT09IHZvaWQgMCA/ICdyZWYnIDogX3JlZjQkcmVmS2V5LFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3JlZjQub25DaGFuZ2UsXG4gICAgICAgICAgb25DbGljayA9IF9yZWY0Lm9uQ2xpY2ssXG4gICAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmNCwgW1wicmVmS2V5XCIsIFwib25DaGFuZ2VcIiwgXCJvbkNsaWNrXCJdKTtcblxuICAgICAgdmFyIGlucHV0UHJvcHMgPSBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgICBhY2NlcHQ6IGFjY2VwdCxcbiAgICAgICAgbXVsdGlwbGU6IG11bHRpcGxlLFxuICAgICAgICB0eXBlOiAnZmlsZScsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2hhbmdlOiBjb21wb3NlSGFuZGxlcihjb21wb3NlRXZlbnRIYW5kbGVycyhvbkNoYW5nZSwgb25Ecm9wQ2IpKSxcbiAgICAgICAgb25DbGljazogY29tcG9zZUhhbmRsZXIoY29tcG9zZUV2ZW50SGFuZGxlcnMob25DbGljaywgb25JbnB1dEVsZW1lbnRDbGljaykpLFxuICAgICAgICBhdXRvQ29tcGxldGU6ICdvZmYnLFxuICAgICAgICB0YWJJbmRleDogLTFcbiAgICAgIH0sIHJlZktleSwgaW5wdXRSZWYpO1xuXG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgaW5wdXRQcm9wcywgcmVzdCk7XG4gICAgfTtcbiAgfSwgW2lucHV0UmVmLCBhY2NlcHQsIG11bHRpcGxlLCBvbkRyb3BDYiwgZGlzYWJsZWRdKTtcbiAgdmFyIGZpbGVDb3VudCA9IGRyYWdnZWRGaWxlcy5sZW5ndGg7XG4gIHZhciBpc011bHRpcGxlQWxsb3dlZCA9IG11bHRpcGxlIHx8IGZpbGVDb3VudCA8PSAxO1xuICB2YXIgaXNEcmFnQWNjZXB0ID0gZmlsZUNvdW50ID4gMCAmJiBhbGxGaWxlc0FjY2VwdGVkKGRyYWdnZWRGaWxlcywgYWNjZXB0KTtcbiAgdmFyIGlzRHJhZ1JlamVjdCA9IGZpbGVDb3VudCA+IDAgJiYgKCFpc0RyYWdBY2NlcHQgfHwgIWlzTXVsdGlwbGVBbGxvd2VkKTtcbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7XG4gICAgaXNEcmFnQWNjZXB0OiBpc0RyYWdBY2NlcHQsXG4gICAgaXNEcmFnUmVqZWN0OiBpc0RyYWdSZWplY3QsXG4gICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWQgJiYgIWRpc2FibGVkLFxuICAgIGdldFJvb3RQcm9wczogZ2V0Um9vdFByb3BzLFxuICAgIGdldElucHV0UHJvcHM6IGdldElucHV0UHJvcHMsXG4gICAgcm9vdFJlZjogcm9vdFJlZixcbiAgICBpbnB1dFJlZjogaW5wdXRSZWYsXG4gICAgb3BlbjogY29tcG9zZUhhbmRsZXIob3BlbkZpbGVEaWFsb2cpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ2ZvY3VzJzpcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwge1xuICAgICAgICBpc0ZvY3VzZWQ6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnYmx1cic6XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHtcbiAgICAgICAgaXNGb2N1c2VkOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdvcGVuRGlhbG9nJzpcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwge1xuICAgICAgICBpc0ZpbGVEaWFsb2dBY3RpdmU6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnY2xvc2VEaWFsb2cnOlxuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7XG4gICAgICAgIGlzRmlsZURpYWxvZ0FjdGl2ZTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnc2V0RHJhZ2dlZEZpbGVzJzpcbiAgICAgIC8qIGVzbGludCBuby1jYXNlLWRlY2xhcmF0aW9uczogMCAqL1xuICAgICAgdmFyIGlzRHJhZ0FjdGl2ZSA9IGFjdGlvbi5pc0RyYWdBY3RpdmUsXG4gICAgICAgICAgZHJhZ2dlZEZpbGVzID0gYWN0aW9uLmRyYWdnZWRGaWxlcztcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwge1xuICAgICAgICBkcmFnZ2VkRmlsZXM6IGRyYWdnZWRGaWxlcyxcbiAgICAgICAgaXNEcmFnQWN0aXZlOiBpc0RyYWdBY3RpdmVcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnc2V0RmlsZXMnOlxuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7XG4gICAgICAgIGFjY2VwdGVkRmlsZXM6IGFjdGlvbi5hY2NlcHRlZEZpbGVzLFxuICAgICAgICByZWplY3RlZEZpbGVzOiBhY3Rpb24ucmVqZWN0ZWRGaWxlc1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdyZXNldCc6XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHtcbiAgICAgICAgaXNGaWxlRGlhbG9nQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgaXNEcmFnQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgZHJhZ2dlZEZpbGVzOiBbXVxuICAgICAgfSk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgaXNWaWRlbywgbm9vcCB9IGZyb20gXCIuLi9saWJzL3V0aWxzXCI7XHJcbmltcG9ydCBJY29uIGZyb20gXCIuL0ljb25cIjtcclxuaW1wb3J0IERyb3B6b25lIGZyb20gXCJyZWFjdC1kcm9wem9uZVwiO1xyXG5cclxuZnVuY3Rpb24gRmlsZVBpY2tlcihwcm9wcykge1xyXG4gIGNvbnN0IG9uRHJvcCA9IHVzZUNhbGxiYWNrKGFjY2VwdGVkRmlsZXMgPT4ge1xyXG4gICAgaWYgKGFjY2VwdGVkRmlsZXMubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IHZpZGVvID0gYWNjZXB0ZWRGaWxlc1swXTtcclxuICAgICAgY29uc3QgaGFuZGxlciA9IHByb3BzLm9uRmlsZVNlbGVjdGVkIHx8IG5vb3A7XHJcbiAgICAgIGhhbmRsZXIodmlkZW8pO1xyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuICBjb25zdCBNQVhfU0laRSA9IHByb3BzLm1heFNpemUgfHwgMTAwMDAwMjQ7XHJcbiAgY29uc3QgTUlOX1NJWkUgPSBwcm9wcy5taW5TaXplIHx8IDA7XHJcbiAgLy8gY29uc3QgaGFuZGxlRmlsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKGUgPT4ge1xyXG4gIC8vICAgaWYgKGUudGFyZ2V0LmZpbGVzLmxlbmd0aCkge1xyXG4gIC8vICAgICBjb25zdCB2aWRlbyA9IGUudGFyZ2V0LmZpbGVzWzBdO1xyXG4gIC8vICAgICBpZiAoaXNWaWRlbyh2aWRlbykpIHtcclxuICAvLyAgICAgICBjb25zdCBoYW5kbGVyID0gcHJvcHMub25GaWxlU2VsZWN0ZWQgfHwgbm9vcDtcclxuICAvLyAgICAgICBoYW5kbGVyKHZpZGVvKTtcclxuICAvLyAgICAgfSBlbHNlIHtcclxuICAvLyAgICAgICByZXR1cm4gYWxlcnQoXCJVbnN1cHBvcnRlZCBGaWxlIFR5cGVcIik7XHJcbiAgLy8gICAgIH1cclxuICAvLyAgIH1cclxuICAvLyB9KTtcclxuICBjb25zdCB0b01CID0gYnl0ZSA9PiBNYXRoLnJvdW5kKGJ5dGUgLyAxMDAwMDAwKTtcclxuICByZXR1cm4gKFxyXG4gICAgPERyb3B6b25lXHJcbiAgICAgIG9uRHJvcD17b25Ecm9wfVxyXG4gICAgICBtYXhTaXplPXtNQVhfU0laRX1cclxuICAgICAgbWluU2l6ZT17TUlOX1NJWkV9XHJcbiAgICAgIGFjY2VwdD1cInZpZGVvLypcIlxyXG4gICAgPlxyXG4gICAgICB7KHsgZ2V0Um9vdFByb3BzLCBnZXRJbnB1dFByb3BzLCBpc0RyYWdBY3RpdmUgfSkgPT4gKFxyXG4gICAgICAgIDxkaXYgey4uLmdldFJvb3RQcm9wcygpfSBjbGFzc05hbWU9XCJydnQtZmlsZS1waWNrZXJcIj5cclxuICAgICAgICAgIDxJY29uIG5hbWU9XCJtdXNpY1wiIC8+XHJcbiAgICAgICAgICA8aW5wdXQgey4uLmdldElucHV0UHJvcHMoKX0gLz5cclxuICAgICAgICAgIHtpc0RyYWdBY3RpdmUgPyAoXHJcbiAgICAgICAgICAgIDxwPkRyb3AgdGhlIHZpZGVvIGhlcmUgLi4uPC9wPlxyXG4gICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICA8cD5EcmFnICduJyBkcm9wIGEgdmlkZW8gaGVyZSwgb3IgY2xpY2sgdG8gc2VsZWN0IG9uZTwvcD5cclxuICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgIDxzbWFsbD5cclxuICAgICAgICAgICAgICAgICAgKHt0b01CKE1JTl9TSVpFKX0gLSB7dG9NQihNQVhfU0laRSl9TUIpXHJcbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxyXG4gICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApfVxyXG4gICAgPC9Ecm9wem9uZT5cclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGaWxlUGlja2VyO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5jb25zdCBTdGF0dXMgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XHJcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwicnZ0LXN0YXR1c1wiPntjaGlsZHJlbn08L2Rpdj47XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTdGF0dXM7XHJcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsb2FkIChzcmMsIG9wdHMsIGNiKSB7XG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdXG4gIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0c1xuICAgIG9wdHMgPSB7fVxuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge31cbiAgY2IgPSBjYiB8fCBmdW5jdGlvbigpIHt9XG5cbiAgc2NyaXB0LnR5cGUgPSBvcHRzLnR5cGUgfHwgJ3RleHQvamF2YXNjcmlwdCdcbiAgc2NyaXB0LmNoYXJzZXQgPSBvcHRzLmNoYXJzZXQgfHwgJ3V0ZjgnO1xuICBzY3JpcHQuYXN5bmMgPSAnYXN5bmMnIGluIG9wdHMgPyAhIW9wdHMuYXN5bmMgOiB0cnVlXG4gIHNjcmlwdC5zcmMgPSBzcmNcblxuICBpZiAob3B0cy5hdHRycykge1xuICAgIHNldEF0dHJpYnV0ZXMoc2NyaXB0LCBvcHRzLmF0dHJzKVxuICB9XG5cbiAgaWYgKG9wdHMudGV4dCkge1xuICAgIHNjcmlwdC50ZXh0ID0gJycgKyBvcHRzLnRleHRcbiAgfVxuXG4gIHZhciBvbmVuZCA9ICdvbmxvYWQnIGluIHNjcmlwdCA/IHN0ZE9uRW5kIDogaWVPbkVuZFxuICBvbmVuZChzY3JpcHQsIGNiKVxuXG4gIC8vIHNvbWUgZ29vZCBsZWdhY3kgYnJvd3NlcnMgKGZpcmVmb3gpIGZhaWwgdGhlICdpbicgZGV0ZWN0aW9uIGFib3ZlXG4gIC8vIHNvIGFzIGEgZmFsbGJhY2sgd2UgYWx3YXlzIHNldCBvbmxvYWRcbiAgLy8gb2xkIElFIHdpbGwgaWdub3JlIHRoaXMgYW5kIG5ldyBJRSB3aWxsIHNldCBvbmxvYWRcbiAgaWYgKCFzY3JpcHQub25sb2FkKSB7XG4gICAgc3RkT25FbmQoc2NyaXB0LCBjYik7XG4gIH1cblxuICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdClcbn1cblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhzY3JpcHQsIGF0dHJzKSB7XG4gIGZvciAodmFyIGF0dHIgaW4gYXR0cnMpIHtcbiAgICBzY3JpcHQuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJzW2F0dHJdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGRPbkVuZCAoc2NyaXB0LCBjYikge1xuICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMub25lcnJvciA9IHRoaXMub25sb2FkID0gbnVsbFxuICAgIGNiKG51bGwsIHNjcmlwdClcbiAgfVxuICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyB0aGlzLm9ubG9hZCA9IG51bGwgaGVyZSBpcyBuZWNlc3NhcnlcbiAgICAvLyBiZWNhdXNlIGV2ZW4gSUU5IHdvcmtzIG5vdCBsaWtlIG90aGVyc1xuICAgIHRoaXMub25lcnJvciA9IHRoaXMub25sb2FkID0gbnVsbFxuICAgIGNiKG5ldyBFcnJvcignRmFpbGVkIHRvIGxvYWQgJyArIHRoaXMuc3JjKSwgc2NyaXB0KVxuICB9XG59XG5cbmZ1bmN0aW9uIGllT25FbmQgKHNjcmlwdCwgY2IpIHtcbiAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlICE9ICdjb21wbGV0ZScgJiYgdGhpcy5yZWFkeVN0YXRlICE9ICdsb2FkZWQnKSByZXR1cm5cbiAgICB0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGxcbiAgICBjYihudWxsLCBzY3JpcHQpIC8vIHRoZXJlIGlzIG5vIHdheSB0byBjYXRjaCBsb2FkaW5nIGVycm9ycyBpbiBJRThcbiAgfVxufVxuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5kZWVwbWVyZ2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaXNNZXJnZWFibGVPYmplY3QgPSBmdW5jdGlvbiBpc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkge1xuXHRcdHJldHVybiBpc05vbk51bGxPYmplY3QodmFsdWUpXG5cdFx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxuXHR9O1xuXG5cdGZ1bmN0aW9uIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkge1xuXHRcdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcblx0fVxuXG5cdGZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuXHRcdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0XHRyZXR1cm4gc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG5cdFx0XHR8fCBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG5cdFx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcblx0fVxuXG5cdC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iNWFjOTYzZmI3OTFkMTI5OGU3ZjM5NjIzNjM4M2JjOTU1ZjkxNmMxL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvZWxlbWVudC9SZWFjdEVsZW1lbnQuanMjTDIxLUwyNVxuXHR2YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xuXHR2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gY2FuVXNlU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xuXG5cdGZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcblx0fVxuXG5cdGZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuXHRcdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG5cdH1cblxuXHRmdW5jdGlvbiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh2YWx1ZSwgb3B0aW9ucykge1xuXHRcdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0XHQ/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zKVxuXHRcdFx0OiB2YWx1ZVxuXHR9XG5cblx0ZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0XHRyZXR1cm4gdGFyZ2V0LmNvbmNhdChzb3VyY2UpLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0XHR9KVxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpIHtcblx0XHRpZiAoIW9wdGlvbnMuY3VzdG9tTWVyZ2UpIHtcblx0XHRcdHJldHVybiBkZWVwbWVyZ2Vcblx0XHR9XG5cdFx0dmFyIGN1c3RvbU1lcmdlID0gb3B0aW9ucy5jdXN0b21NZXJnZShrZXkpO1xuXHRcdHJldHVybiB0eXBlb2YgY3VzdG9tTWVyZ2UgPT09ICdmdW5jdGlvbicgPyBjdXN0b21NZXJnZSA6IGRlZXBtZXJnZVxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0RW51bWVyYWJsZU93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpIHtcblx0XHRyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc1xuXHRcdFx0PyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uKHN5bWJvbCkge1xuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LnByb3BlcnR5SXNFbnVtZXJhYmxlKHN5bWJvbClcblx0XHRcdH0pXG5cdFx0XHQ6IFtdXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRLZXlzKHRhcmdldCkge1xuXHRcdHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXQpLmNvbmNhdChnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpXG5cdH1cblxuXHRmdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuXHRcdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRcdGdldEtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodGFyZ2V0W2tleV0sIG9wdGlvbnMpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGdldEtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0aWYgKCFvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcblx0XHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBnZXRNZXJnZUZ1bmN0aW9uKGtleSwgb3B0aW9ucykodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gZGVzdGluYXRpb25cblx0fVxuXG5cdGZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0XHRvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0ID0gb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCB8fCBpc01lcmdlYWJsZU9iamVjdDtcblxuXHRcdHZhciBzb3VyY2VJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuXHRcdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHRcdHZhciBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcblxuXHRcdGlmICghc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCkge1xuXHRcdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0XHR9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcblx0XHRcdHJldHVybiBvcHRpb25zLmFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0XHR9XG5cdH1cblxuXHRkZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zKSB7XG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHRcdH1cblxuXHRcdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuXHRcdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHRcdH0sIHt9KVxuXHR9O1xuXG5cdHZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxuXHRyZXR1cm4gZGVlcG1lcmdlXzE7XG5cbn0pKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuREVQUkVDQVRFRF9DT05GSUdfUFJPUFMgPSBleHBvcnRzLmRlZmF1bHRQcm9wcyA9IGV4cG9ydHMucHJvcFR5cGVzID0gdW5kZWZpbmVkO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgc3RyaW5nID0gX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gICAgYm9vbCA9IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgICBudW1iZXIgPSBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm51bWJlcixcbiAgICBhcnJheSA9IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYXJyYXksXG4gICAgb25lT2ZUeXBlID0gX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZlR5cGUsXG4gICAgc2hhcGUgPSBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnNoYXBlLFxuICAgIG9iamVjdCA9IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub2JqZWN0LFxuICAgIGZ1bmMgPSBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmM7XG52YXIgcHJvcFR5cGVzID0gZXhwb3J0cy5wcm9wVHlwZXMgPSB7XG4gIHVybDogb25lT2ZUeXBlKFtzdHJpbmcsIGFycmF5LCBvYmplY3RdKSxcbiAgcGxheWluZzogYm9vbCxcbiAgbG9vcDogYm9vbCxcbiAgY29udHJvbHM6IGJvb2wsXG4gIHZvbHVtZTogbnVtYmVyLFxuICBtdXRlZDogYm9vbCxcbiAgcGxheWJhY2tSYXRlOiBudW1iZXIsXG4gIHdpZHRoOiBvbmVPZlR5cGUoW3N0cmluZywgbnVtYmVyXSksXG4gIGhlaWdodDogb25lT2ZUeXBlKFtzdHJpbmcsIG51bWJlcl0pLFxuICBzdHlsZTogb2JqZWN0LFxuICBwcm9ncmVzc0ludGVydmFsOiBudW1iZXIsXG4gIHBsYXlzaW5saW5lOiBib29sLFxuICBwaXA6IGJvb2wsXG4gIGxpZ2h0OiBvbmVPZlR5cGUoW2Jvb2wsIHN0cmluZ10pLFxuICB3cmFwcGVyOiBvbmVPZlR5cGUoW3N0cmluZywgZnVuYywgc2hhcGUoeyByZW5kZXI6IGZ1bmMuaXNSZXF1aXJlZCB9KV0pLFxuICBjb25maWc6IHNoYXBlKHtcbiAgICBzb3VuZGNsb3VkOiBzaGFwZSh7XG4gICAgICBvcHRpb25zOiBvYmplY3QsXG4gICAgICBwcmVsb2FkOiBib29sXG4gICAgfSksXG4gICAgeW91dHViZTogc2hhcGUoe1xuICAgICAgcGxheWVyVmFyczogb2JqZWN0LFxuICAgICAgZW1iZWRPcHRpb25zOiBvYmplY3QsXG4gICAgICBwcmVsb2FkOiBib29sXG4gICAgfSksXG4gICAgZmFjZWJvb2s6IHNoYXBlKHtcbiAgICAgIGFwcElkOiBzdHJpbmdcbiAgICB9KSxcbiAgICBkYWlseW1vdGlvbjogc2hhcGUoe1xuICAgICAgcGFyYW1zOiBvYmplY3QsXG4gICAgICBwcmVsb2FkOiBib29sXG4gICAgfSksXG4gICAgdmltZW86IHNoYXBlKHtcbiAgICAgIHBsYXllck9wdGlvbnM6IG9iamVjdCxcbiAgICAgIHByZWxvYWQ6IGJvb2xcbiAgICB9KSxcbiAgICBmaWxlOiBzaGFwZSh7XG4gICAgICBhdHRyaWJ1dGVzOiBvYmplY3QsXG4gICAgICB0cmFja3M6IGFycmF5LFxuICAgICAgZm9yY2VWaWRlbzogYm9vbCxcbiAgICAgIGZvcmNlQXVkaW86IGJvb2wsXG4gICAgICBmb3JjZUhMUzogYm9vbCxcbiAgICAgIGZvcmNlREFTSDogYm9vbCxcbiAgICAgIGhsc09wdGlvbnM6IG9iamVjdCxcbiAgICAgIGhsc1ZlcnNpb246IHN0cmluZyxcbiAgICAgIGRhc2hWZXJzaW9uOiBzdHJpbmdcbiAgICB9KSxcbiAgICB3aXN0aWE6IHNoYXBlKHtcbiAgICAgIG9wdGlvbnM6IG9iamVjdFxuICAgIH0pLFxuICAgIG1peGNsb3VkOiBzaGFwZSh7XG4gICAgICBvcHRpb25zOiBvYmplY3RcbiAgICB9KSxcbiAgICB0d2l0Y2g6IHNoYXBlKHtcbiAgICAgIG9wdGlvbnM6IG9iamVjdFxuICAgIH0pXG4gIH0pLFxuICBvblJlYWR5OiBmdW5jLFxuICBvblN0YXJ0OiBmdW5jLFxuICBvblBsYXk6IGZ1bmMsXG4gIG9uUGF1c2U6IGZ1bmMsXG4gIG9uQnVmZmVyOiBmdW5jLFxuICBvbkJ1ZmZlckVuZDogZnVuYyxcbiAgb25FbmRlZDogZnVuYyxcbiAgb25FcnJvcjogZnVuYyxcbiAgb25EdXJhdGlvbjogZnVuYyxcbiAgb25TZWVrOiBmdW5jLFxuICBvblByb2dyZXNzOiBmdW5jLFxuICBvbkVuYWJsZVBJUDogZnVuYyxcbiAgb25EaXNhYmxlUElQOiBmdW5jXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0gZXhwb3J0cy5kZWZhdWx0UHJvcHMgPSB7XG4gIHBsYXlpbmc6IGZhbHNlLFxuICBsb29wOiBmYWxzZSxcbiAgY29udHJvbHM6IGZhbHNlLFxuICB2b2x1bWU6IG51bGwsXG4gIG11dGVkOiBmYWxzZSxcbiAgcGxheWJhY2tSYXRlOiAxLFxuICB3aWR0aDogJzY0MHB4JyxcbiAgaGVpZ2h0OiAnMzYwcHgnLFxuICBzdHlsZToge30sXG4gIHByb2dyZXNzSW50ZXJ2YWw6IDEwMDAsXG4gIHBsYXlzaW5saW5lOiBmYWxzZSxcbiAgcGlwOiBmYWxzZSxcbiAgbGlnaHQ6IGZhbHNlLFxuICB3cmFwcGVyOiAnZGl2JyxcbiAgY29uZmlnOiB7XG4gICAgc291bmRjbG91ZDoge1xuICAgICAgb3B0aW9uczoge1xuICAgICAgICB2aXN1YWw6IHRydWUsIC8vIFVuZG9jdW1lbnRlZCwgYnV0IG1ha2VzIHBsYXllciBmaWxsIGNvbnRhaW5lciBhbmQgbG9vayBiZXR0ZXJcbiAgICAgICAgYnV5aW5nOiBmYWxzZSxcbiAgICAgICAgbGlraW5nOiBmYWxzZSxcbiAgICAgICAgZG93bmxvYWQ6IGZhbHNlLFxuICAgICAgICBzaGFyaW5nOiBmYWxzZSxcbiAgICAgICAgc2hvd19jb21tZW50czogZmFsc2UsXG4gICAgICAgIHNob3dfcGxheWNvdW50OiBmYWxzZVxuICAgICAgfVxuICAgIH0sXG4gICAgeW91dHViZToge1xuICAgICAgcGxheWVyVmFyczoge1xuICAgICAgICBwbGF5c2lubGluZTogMSxcbiAgICAgICAgc2hvd2luZm86IDAsXG4gICAgICAgIHJlbDogMCxcbiAgICAgICAgaXZfbG9hZF9wb2xpY3k6IDMsXG4gICAgICAgIG1vZGVzdGJyYW5kaW5nOiAxXG4gICAgICB9LFxuICAgICAgZW1iZWRPcHRpb25zOiB7fSxcbiAgICAgIHByZWxvYWQ6IGZhbHNlXG4gICAgfSxcbiAgICBmYWNlYm9vazoge1xuICAgICAgYXBwSWQ6ICcxMzA5Njk3MjA1NzcyODE5J1xuICAgIH0sXG4gICAgZGFpbHltb3Rpb246IHtcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBhcGk6IDEsXG4gICAgICAgICdlbmRzY3JlZW4tZW5hYmxlJzogZmFsc2VcbiAgICAgIH0sXG4gICAgICBwcmVsb2FkOiBmYWxzZVxuICAgIH0sXG4gICAgdmltZW86IHtcbiAgICAgIHBsYXllck9wdGlvbnM6IHtcbiAgICAgICAgYXV0b3BhdXNlOiBmYWxzZSxcbiAgICAgICAgYnlsaW5lOiBmYWxzZSxcbiAgICAgICAgcG9ydHJhaXQ6IGZhbHNlLFxuICAgICAgICB0aXRsZTogZmFsc2VcbiAgICAgIH0sXG4gICAgICBwcmVsb2FkOiBmYWxzZVxuICAgIH0sXG4gICAgZmlsZToge1xuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICB0cmFja3M6IFtdLFxuICAgICAgZm9yY2VWaWRlbzogZmFsc2UsXG4gICAgICBmb3JjZUF1ZGlvOiBmYWxzZSxcbiAgICAgIGZvcmNlSExTOiBmYWxzZSxcbiAgICAgIGZvcmNlREFTSDogZmFsc2UsXG4gICAgICBobHNPcHRpb25zOiB7fSxcbiAgICAgIGhsc1ZlcnNpb246ICcwLjEwLjEnLFxuICAgICAgZGFzaFZlcnNpb246ICcyLjkuMidcbiAgICB9LFxuICAgIHdpc3RpYToge1xuICAgICAgb3B0aW9uczoge31cbiAgICB9LFxuICAgIG1peGNsb3VkOiB7XG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGhpZGVfY292ZXI6IDFcbiAgICAgIH1cbiAgICB9LFxuICAgIHR3aXRjaDoge1xuICAgICAgb3B0aW9uczoge31cbiAgICB9XG4gIH0sXG4gIG9uUmVhZHk6IGZ1bmN0aW9uIG9uUmVhZHkoKSB7fSxcbiAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHt9LFxuICBvblBsYXk6IGZ1bmN0aW9uIG9uUGxheSgpIHt9LFxuICBvblBhdXNlOiBmdW5jdGlvbiBvblBhdXNlKCkge30sXG4gIG9uQnVmZmVyOiBmdW5jdGlvbiBvbkJ1ZmZlcigpIHt9LFxuICBvbkJ1ZmZlckVuZDogZnVuY3Rpb24gb25CdWZmZXJFbmQoKSB7fSxcbiAgb25FbmRlZDogZnVuY3Rpb24gb25FbmRlZCgpIHt9LFxuICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKCkge30sXG4gIG9uRHVyYXRpb246IGZ1bmN0aW9uIG9uRHVyYXRpb24oKSB7fSxcbiAgb25TZWVrOiBmdW5jdGlvbiBvblNlZWsoKSB7fSxcbiAgb25Qcm9ncmVzczogZnVuY3Rpb24gb25Qcm9ncmVzcygpIHt9LFxuICBvbkVuYWJsZVBJUDogZnVuY3Rpb24gb25FbmFibGVQSVAoKSB7fSxcbiAgb25EaXNhYmxlUElQOiBmdW5jdGlvbiBvbkRpc2FibGVQSVAoKSB7fVxufTtcblxudmFyIERFUFJFQ0FURURfQ09ORklHX1BST1BTID0gZXhwb3J0cy5ERVBSRUNBVEVEX0NPTkZJR19QUk9QUyA9IFsnc291bmRjbG91ZENvbmZpZycsICd5b3V0dWJlQ29uZmlnJywgJ2ZhY2Vib29rQ29uZmlnJywgJ2RhaWx5bW90aW9uQ29uZmlnJywgJ3ZpbWVvQ29uZmlnJywgJ2ZpbGVDb25maWcnLCAnd2lzdGlhQ29uZmlnJ107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuZXhwb3J0cy5wYXJzZVN0YXJ0VGltZSA9IHBhcnNlU3RhcnRUaW1lO1xuZXhwb3J0cy5wYXJzZUVuZFRpbWUgPSBwYXJzZUVuZFRpbWU7XG5leHBvcnRzLnJhbmRvbVN0cmluZyA9IHJhbmRvbVN0cmluZztcbmV4cG9ydHMucXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZztcbmV4cG9ydHMuZ2V0U0RLID0gZ2V0U0RLO1xuZXhwb3J0cy5nZXRDb25maWcgPSBnZXRDb25maWc7XG5leHBvcnRzLm9taXQgPSBvbWl0O1xuZXhwb3J0cy5jYWxsUGxheWVyID0gY2FsbFBsYXllcjtcbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcbmV4cG9ydHMuaXNFcXVhbCA9IGlzRXF1YWw7XG5leHBvcnRzLmlzTWVkaWFTdHJlYW0gPSBpc01lZGlhU3RyZWFtO1xuXG52YXIgX2xvYWRTY3JpcHQgPSByZXF1aXJlKCdsb2FkLXNjcmlwdCcpO1xuXG52YXIgX2xvYWRTY3JpcHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9hZFNjcmlwdCk7XG5cbnZhciBfZGVlcG1lcmdlID0gcmVxdWlyZSgnZGVlcG1lcmdlJyk7XG5cbnZhciBfZGVlcG1lcmdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBtZXJnZSk7XG5cbnZhciBfcHJvcHMgPSByZXF1aXJlKCcuL3Byb3BzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIE1BVENIX1NUQVJUX1FVRVJZID0gL1s/JiNdKD86c3RhcnR8dCk9KFswLTlobXNdKykvO1xudmFyIE1BVENIX0VORF9RVUVSWSA9IC9bPyYjXWVuZD0oWzAtOWhtc10rKS87XG52YXIgTUFUQ0hfU1RBUlRfU1RBTVAgPSAvKFxcZCspKGh8bXxzKS9nO1xudmFyIE1BVENIX05VTUVSSUMgPSAvXlxcZCskLztcblxuLy8gUGFyc2UgWW91VHViZSBVUkwgZm9yIGEgc3RhcnQgdGltZSBwYXJhbSwgaWUgP3Q9MWgxNG0zMHNcbi8vIGFuZCByZXR1cm4gdGhlIHN0YXJ0IHRpbWUgaW4gc2Vjb25kc1xuZnVuY3Rpb24gcGFyc2VUaW1lUGFyYW0odXJsLCBwYXR0ZXJuKSB7XG4gIHZhciBtYXRjaCA9IHVybC5tYXRjaChwYXR0ZXJuKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIHN0YW1wID0gbWF0Y2hbMV07XG4gICAgaWYgKHN0YW1wLm1hdGNoKE1BVENIX1NUQVJUX1NUQU1QKSkge1xuICAgICAgcmV0dXJuIHBhcnNlVGltZVN0cmluZyhzdGFtcCk7XG4gICAgfVxuICAgIGlmIChNQVRDSF9OVU1FUklDLnRlc3Qoc3RhbXApKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoc3RhbXApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWVTdHJpbmcoc3RhbXApIHtcbiAgdmFyIHNlY29uZHMgPSAwO1xuICB2YXIgYXJyYXkgPSBNQVRDSF9TVEFSVF9TVEFNUC5leGVjKHN0YW1wKTtcbiAgd2hpbGUgKGFycmF5ICE9PSBudWxsKSB7XG4gICAgdmFyIF9hcnJheSA9IGFycmF5LFxuICAgICAgICBfYXJyYXkyID0gX3NsaWNlZFRvQXJyYXkoX2FycmF5LCAzKSxcbiAgICAgICAgY291bnQgPSBfYXJyYXkyWzFdLFxuICAgICAgICBwZXJpb2QgPSBfYXJyYXkyWzJdO1xuXG4gICAgaWYgKHBlcmlvZCA9PT0gJ2gnKSBzZWNvbmRzICs9IHBhcnNlSW50KGNvdW50LCAxMCkgKiA2MCAqIDYwO1xuICAgIGlmIChwZXJpb2QgPT09ICdtJykgc2Vjb25kcyArPSBwYXJzZUludChjb3VudCwgMTApICogNjA7XG4gICAgaWYgKHBlcmlvZCA9PT0gJ3MnKSBzZWNvbmRzICs9IHBhcnNlSW50KGNvdW50LCAxMCk7XG4gICAgYXJyYXkgPSBNQVRDSF9TVEFSVF9TVEFNUC5leGVjKHN0YW1wKTtcbiAgfVxuICByZXR1cm4gc2Vjb25kcztcbn1cblxuZnVuY3Rpb24gcGFyc2VTdGFydFRpbWUodXJsKSB7XG4gIHJldHVybiBwYXJzZVRpbWVQYXJhbSh1cmwsIE1BVENIX1NUQVJUX1FVRVJZKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VFbmRUaW1lKHVybCkge1xuICByZXR1cm4gcGFyc2VUaW1lUGFyYW0odXJsLCBNQVRDSF9FTkRfUVVFUlkpO1xufVxuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zODYyMjU0NVxuZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDUpO1xufVxuXG5mdW5jdGlvbiBxdWVyeVN0cmluZyhvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4ga2V5ICsgJz0nICsgb2JqZWN0W2tleV07XG4gIH0pLmpvaW4oJyYnKTtcbn1cblxuLy8gVXRpbCBmdW5jdGlvbiB0byBsb2FkIGFuIGV4dGVybmFsIFNES1xuLy8gb3IgcmV0dXJuIHRoZSBTREsgaWYgaXQgaXMgYWxyZWFkeSBsb2FkZWRcbnZhciByZXNvbHZlcyA9IHt9O1xuZnVuY3Rpb24gZ2V0U0RLKHVybCwgc2RrR2xvYmFsKSB7XG4gIHZhciBzZGtSZWFkeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgdmFyIGlzTG9hZGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG4gIHZhciBmZXRjaFNjcmlwdCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogX2xvYWRTY3JpcHQyWydkZWZhdWx0J107XG5cbiAgaWYgKHdpbmRvd1tzZGtHbG9iYWxdICYmIGlzTG9hZGVkKHdpbmRvd1tzZGtHbG9iYWxdKSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod2luZG93W3Nka0dsb2JhbF0pO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gSWYgd2UgYXJlIGFscmVhZHkgbG9hZGluZyB0aGUgU0RLLCBhZGQgdGhlIHJlc29sdmVcbiAgICAvLyBmdW5jdGlvbiB0byB0aGUgZXhpc3RpbmcgYXJyYXkgb2YgcmVzb2x2ZSBmdW5jdGlvbnNcbiAgICBpZiAocmVzb2x2ZXNbdXJsXSkge1xuICAgICAgcmVzb2x2ZXNbdXJsXS5wdXNoKHJlc29sdmUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXNvbHZlc1t1cmxdID0gW3Jlc29sdmVdO1xuICAgIHZhciBvbkxvYWRlZCA9IGZ1bmN0aW9uIG9uTG9hZGVkKHNkaykge1xuICAgICAgLy8gV2hlbiBsb2FkZWQsIHJlc29sdmUgYWxsIHBlbmRpbmcgcHJvbWlzZXNcbiAgICAgIHJlc29sdmVzW3VybF0uZm9yRWFjaChmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShzZGspO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoc2RrUmVhZHkpIHtcbiAgICAgIHZhciBwcmV2aW91c09uUmVhZHkgPSB3aW5kb3dbc2RrUmVhZHldO1xuICAgICAgd2luZG93W3Nka1JlYWR5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHByZXZpb3VzT25SZWFkeSkgcHJldmlvdXNPblJlYWR5KCk7XG4gICAgICAgIG9uTG9hZGVkKHdpbmRvd1tzZGtHbG9iYWxdKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGZldGNoU2NyaXB0KHVybCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikgcmVqZWN0KGVycik7XG4gICAgICBpZiAoIXNka1JlYWR5KSB7XG4gICAgICAgIG9uTG9hZGVkKHdpbmRvd1tzZGtHbG9iYWxdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldENvbmZpZyhwcm9wcywgZGVmYXVsdFByb3BzLCBzaG93V2FybmluZykge1xuICB2YXIgY29uZmlnID0gKDAsIF9kZWVwbWVyZ2UyWydkZWZhdWx0J10pKGRlZmF1bHRQcm9wcy5jb25maWcsIHByb3BzLmNvbmZpZyk7XG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IF9wcm9wcy5ERVBSRUNBVEVEX0NPTkZJR19QUk9QU1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgIHZhciBwID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIGlmIChwcm9wc1twXSkge1xuICAgICAgICB2YXIga2V5ID0gcC5yZXBsYWNlKC9Db25maWckLywgJycpO1xuICAgICAgICBjb25maWcgPSAoMCwgX2RlZXBtZXJnZTJbJ2RlZmF1bHQnXSkoY29uZmlnLCBfZGVmaW5lUHJvcGVydHkoe30sIGtleSwgcHJvcHNbcF0pKTtcbiAgICAgICAgaWYgKHNob3dXYXJuaW5nKSB7XG4gICAgICAgICAgdmFyIGxpbmsgPSAnaHR0cHM6Ly9naXRodWIuY29tL0Nvb2tQZXRlL3JlYWN0LXBsYXllciNjb25maWctcHJvcCc7XG4gICAgICAgICAgdmFyIG1lc3NhZ2UgPSAnUmVhY3RQbGF5ZXI6ICVjJyArIHAgKyAnICVjaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSB0aGUgY29uZmlnIHByb3AgaW5zdGVhZCBcXHUyMDEzICcgKyBsaW5rO1xuICAgICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlLCAnZm9udC13ZWlnaHQ6IGJvbGQnLCAnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvclsncmV0dXJuJ10pIHtcbiAgICAgICAgX2l0ZXJhdG9yWydyZXR1cm4nXSgpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cblxuZnVuY3Rpb24gb21pdChvYmplY3QpIHtcbiAgdmFyIF9yZWY7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFycmF5cyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcnJheXNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIG9taXRLZXlzID0gKF9yZWYgPSBbXSkuY29uY2F0LmFwcGx5KF9yZWYsIGFycmF5cyk7XG4gIHZhciBvdXRwdXQgPSB7fTtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0ga2V5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgdmFyIGtleSA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgaWYgKG9taXRLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjJbJ3JldHVybiddKSB7XG4gICAgICAgIF9pdGVyYXRvcjJbJ3JldHVybiddKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGNhbGxQbGF5ZXIobWV0aG9kKSB7XG4gIHZhciBfcGxheWVyO1xuXG4gIC8vIFV0aWwgbWV0aG9kIGZvciBjYWxsaW5nIGEgbWV0aG9kIG9uIHRoaXMucGxheWVyXG4gIC8vIGJ1dCBndWFyZCBhZ2FpbnN0IGVycm9ycyBhbmQgY29uc29sZS53YXJuIGluc3RlYWRcbiAgaWYgKCF0aGlzLnBsYXllciB8fCAhdGhpcy5wbGF5ZXJbbWV0aG9kXSkge1xuICAgIHZhciBtZXNzYWdlID0gJ1JlYWN0UGxheWVyOiAnICsgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSArICcgcGxheWVyIGNvdWxkIG5vdCBjYWxsICVjJyArIG1ldGhvZCArICclYyBcXHUyMDEzICc7XG4gICAgaWYgKCF0aGlzLnBsYXllcikge1xuICAgICAgbWVzc2FnZSArPSAnVGhlIHBsYXllciB3YXMgbm90IGF2YWlsYWJsZSc7XG4gICAgfSBlbHNlIGlmICghdGhpcy5wbGF5ZXJbbWV0aG9kXSkge1xuICAgICAgbWVzc2FnZSArPSAnVGhlIG1ldGhvZCB3YXMgbm90IGF2YWlsYWJsZSc7XG4gICAgfVxuICAgIGNvbnNvbGUud2FybihtZXNzYWdlLCAnZm9udC13ZWlnaHQ6IGJvbGQnLCAnJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiAoX3BsYXllciA9IHRoaXMucGxheWVyKVttZXRob2RdLmFwcGx5KF9wbGF5ZXIsIGFyZ3MpO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAodHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsKSkgPT09ICdvYmplY3QnO1xufVxuXG4vLyBEZWVwIGNvbXBhcmlzb24gb2YgdHdvIG9iamVjdHMgYnV0IGlnbm9yaW5nXG4vLyBmdW5jdGlvbnMsIGZvciB1c2UgaW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlXG5mdW5jdGlvbiBpc0VxdWFsKGEsIGIpIHtcbiAgaWYgKHR5cGVvZiBhID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGEgaW5zdGFuY2VvZiBBcnJheSAmJiBiIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpICE9PSBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWlzRXF1YWwoYVtpXSwgYltpXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaXNPYmplY3QoYSkgJiYgaXNPYmplY3QoYikpIHtcbiAgICBpZiAoT2JqZWN0LmtleXMoYSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcbiAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gT2JqZWN0LmtleXMoYSlbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgICAgdmFyIGtleSA9IF9zdGVwMy52YWx1ZTtcblxuICAgICAgICBpZiAoIWlzRXF1YWwoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjNbJ3JldHVybiddKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yM1sncmV0dXJuJ10oKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBhID09PSBiO1xufVxuXG5mdW5jdGlvbiBpc01lZGlhU3RyZWFtKHVybCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5NZWRpYVN0cmVhbSAhPT0gJ3VuZGVmaW5lZCcgJiYgdXJsIGluc3RhbmNlb2Ygd2luZG93Lk1lZGlhU3RyZWFtO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BzNiA9IHJlcXVpcmUoJy4vcHJvcHMnKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTRUVLX09OX1BMQVlfRVhQSVJZID0gNTAwMDtcblxudmFyIFBsYXllciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQbGF5ZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBsYXllcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGxheWVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBQbGF5ZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQbGF5ZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfSAvLyBUcmFjayBwbGF5aW5nIHN0YXRlIGludGVybmFsbHkgdG8gcHJldmVudCBidWdzXG4gIC8vIFVzZSBpc0xvYWRpbmcgdG8gcHJldmVudCBvblBhdXNlIHdoZW4gc3dpdGNoaW5nIFVSTFxuXG5cbiAgX2NyZWF0ZUNsYXNzKFBsYXllciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucGxheWVyLmxvYWQodGhpcy5wcm9wcy51cmwpO1xuICAgICAgdGhpcy5wcm9ncmVzcygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5wcm9ncmVzc1RpbWVvdXQpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZHVyYXRpb25DaGVja1RpbWVvdXQpO1xuICAgICAgaWYgKHRoaXMuaXNSZWFkeSkge1xuICAgICAgICB0aGlzLnBsYXllci5zdG9wKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wbGF5ZXIuZGlzYWJsZVBJUCkge1xuICAgICAgICB0aGlzLnBsYXllci5kaXNhYmxlUElQKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAvLyBJbnZva2UgcGxheWVyIG1ldGhvZHMgYmFzZWQgb24gaW5jb21pbmcgcHJvcHNcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHVybCA9IF9wcm9wcy51cmwsXG4gICAgICAgICAgcGxheWluZyA9IF9wcm9wcy5wbGF5aW5nLFxuICAgICAgICAgIHZvbHVtZSA9IF9wcm9wcy52b2x1bWUsXG4gICAgICAgICAgbXV0ZWQgPSBfcHJvcHMubXV0ZWQsXG4gICAgICAgICAgcGxheWJhY2tSYXRlID0gX3Byb3BzLnBsYXliYWNrUmF0ZSxcbiAgICAgICAgICBwaXAgPSBfcHJvcHMucGlwLFxuICAgICAgICAgIGxvb3AgPSBfcHJvcHMubG9vcDtcblxuICAgICAgaWYgKCEoMCwgX3V0aWxzLmlzRXF1YWwpKHVybCwgbmV4dFByb3BzLnVybCkpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNMb2FkaW5nKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdSZWFjdFBsYXllcjogdGhlIGF0dGVtcHQgdG8gbG9hZCAnICsgbmV4dFByb3BzLnVybCArICcgaXMgYmVpbmcgZGVmZXJyZWQgdW50aWwgdGhlIHBsYXllciBoYXMgbG9hZGVkJyk7XG4gICAgICAgICAgdGhpcy5sb2FkT25SZWFkeSA9IG5leHRQcm9wcy51cmw7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGFydE9uUGxheSA9IHRydWU7XG4gICAgICAgIHRoaXMub25EdXJhdGlvbkNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBsYXllci5sb2FkKG5leHRQcm9wcy51cmwsIHRoaXMuaXNSZWFkeSk7XG4gICAgICB9XG4gICAgICBpZiAoIXBsYXlpbmcgJiYgbmV4dFByb3BzLnBsYXlpbmcgJiYgIXRoaXMuaXNQbGF5aW5nKSB7XG4gICAgICAgIHRoaXMucGxheWVyLnBsYXkoKTtcbiAgICAgIH1cbiAgICAgIGlmIChwbGF5aW5nICYmICFuZXh0UHJvcHMucGxheWluZyAmJiB0aGlzLmlzUGxheWluZykge1xuICAgICAgICB0aGlzLnBsYXllci5wYXVzZSgpO1xuICAgICAgfVxuICAgICAgaWYgKCFwaXAgJiYgbmV4dFByb3BzLnBpcCAmJiB0aGlzLnBsYXllci5lbmFibGVQSVApIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuZW5hYmxlUElQKCk7XG4gICAgICB9IGVsc2UgaWYgKHBpcCAmJiAhbmV4dFByb3BzLnBpcCAmJiB0aGlzLnBsYXllci5kaXNhYmxlUElQKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmRpc2FibGVQSVAoKTtcbiAgICAgIH1cbiAgICAgIGlmICh2b2x1bWUgIT09IG5leHRQcm9wcy52b2x1bWUgJiYgbmV4dFByb3BzLnZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnBsYXllci5zZXRWb2x1bWUobmV4dFByb3BzLnZvbHVtZSk7XG4gICAgICB9XG4gICAgICBpZiAobXV0ZWQgIT09IG5leHRQcm9wcy5tdXRlZCkge1xuICAgICAgICBpZiAobmV4dFByb3BzLm11dGVkKSB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIubXV0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucGxheWVyLnVubXV0ZSgpO1xuICAgICAgICAgIGlmIChuZXh0UHJvcHMudm9sdW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBTZXQgdm9sdW1lIG5leHQgdGljayB0byBmaXggYSBidWcgd2l0aCBEYWlseU1vdGlvblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIucGxheWVyLnNldFZvbHVtZShuZXh0UHJvcHMudm9sdW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBsYXliYWNrUmF0ZSAhPT0gbmV4dFByb3BzLnBsYXliYWNrUmF0ZSAmJiB0aGlzLnBsYXllci5zZXRQbGF5YmFja1JhdGUpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2V0UGxheWJhY2tSYXRlKG5leHRQcm9wcy5wbGF5YmFja1JhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKGxvb3AgIT09IG5leHRQcm9wcy5sb29wICYmIHRoaXMucGxheWVyLnNldExvb3ApIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2V0TG9vcChuZXh0UHJvcHMubG9vcCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5pc1JlYWR5KSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLnBsYXllci5nZXREdXJhdGlvbigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEN1cnJlbnRUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICBpZiAoIXRoaXMuaXNSZWFkeSkgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTZWNvbmRzTG9hZGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIGlmICghdGhpcy5pc1JlYWR5KSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLnBsYXllci5nZXRTZWNvbmRzTG9hZGVkKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKGFtb3VudCwgdHlwZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIC8vIFdoZW4gc2Vla2luZyBiZWZvcmUgcGxheWVyIGlzIHJlYWR5LCBzdG9yZSB2YWx1ZSBhbmQgc2VlayBsYXRlclxuICAgICAgaWYgKCF0aGlzLmlzUmVhZHkgJiYgYW1vdW50ICE9PSAwKSB7XG4gICAgICAgIHRoaXMuc2Vla09uUGxheSA9IGFtb3VudDtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnNlZWtPblBsYXkgPSBudWxsO1xuICAgICAgICB9LCBTRUVLX09OX1BMQVlfRVhQSVJZKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGlzRnJhY3Rpb24gPSAhdHlwZSA/IGFtb3VudCA+IDAgJiYgYW1vdW50IDwgMSA6IHR5cGUgPT09ICdmcmFjdGlvbic7XG4gICAgICBpZiAoaXNGcmFjdGlvbikge1xuICAgICAgICAvLyBDb252ZXJ0IGZyYWN0aW9uIHRvIHNlY29uZHMgYmFzZWQgb24gZHVyYXRpb25cbiAgICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKTtcbiAgICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICAgIGNvbnNvbGUud2FybignUmVhY3RQbGF5ZXI6IGNvdWxkIG5vdCBzZWVrIHVzaW5nIGZyYWN0aW9uIOKAk8KgZHVyYXRpb24gbm90IHlldCBhdmFpbGFibGUnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wbGF5ZXIuc2Vla1RvKGR1cmF0aW9uICogYW1vdW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5wbGF5ZXIuc2Vla1RvKGFtb3VudCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIFBsYXllciA9IHRoaXMucHJvcHMuYWN0aXZlUGxheWVyO1xuICAgICAgaWYgKCFQbGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoUGxheWVyLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywge1xuICAgICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgICBvblJlYWR5OiB0aGlzLm9uUmVhZHksXG4gICAgICAgIG9uUGxheTogdGhpcy5vblBsYXksXG4gICAgICAgIG9uUGF1c2U6IHRoaXMub25QYXVzZSxcbiAgICAgICAgb25FbmRlZDogdGhpcy5vbkVuZGVkLFxuICAgICAgICBvbkxvYWRlZDogdGhpcy5vbkxvYWRlZCxcbiAgICAgICAgb25FcnJvcjogdGhpcy5vbkVycm9yXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBsYXllcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblBsYXllci5kaXNwbGF5TmFtZSA9ICdQbGF5ZXInO1xuUGxheWVyLnByb3BUeXBlcyA9IF9wcm9wczYucHJvcFR5cGVzO1xuUGxheWVyLmRlZmF1bHRQcm9wcyA9IF9wcm9wczYuZGVmYXVsdFByb3BzO1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcbiAgdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcbiAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICB0aGlzLmxvYWRPblJlYWR5ID0gbnVsbDtcbiAgdGhpcy5zdGFydE9uUGxheSA9IHRydWU7XG4gIHRoaXMuc2Vla09uUGxheSA9IG51bGw7XG4gIHRoaXMub25EdXJhdGlvbkNhbGxlZCA9IGZhbHNlO1xuXG4gIHRoaXMuZ2V0SW50ZXJuYWxQbGF5ZXIgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFfdGhpczQucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM0LnBsYXllcltrZXldO1xuICB9O1xuXG4gIHRoaXMucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKF90aGlzNC5wcm9wcy51cmwgJiYgX3RoaXM0LnBsYXllciAmJiBfdGhpczQuaXNSZWFkeSkge1xuICAgICAgdmFyIHBsYXllZFNlY29uZHMgPSBfdGhpczQuZ2V0Q3VycmVudFRpbWUoKSB8fCAwO1xuICAgICAgdmFyIGxvYWRlZFNlY29uZHMgPSBfdGhpczQuZ2V0U2Vjb25kc0xvYWRlZCgpO1xuICAgICAgdmFyIGR1cmF0aW9uID0gX3RoaXM0LmdldER1cmF0aW9uKCk7XG4gICAgICBpZiAoZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHByb2dyZXNzID0ge1xuICAgICAgICAgIHBsYXllZFNlY29uZHM6IHBsYXllZFNlY29uZHMsXG4gICAgICAgICAgcGxheWVkOiBwbGF5ZWRTZWNvbmRzIC8gZHVyYXRpb25cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGxvYWRlZFNlY29uZHMgIT09IG51bGwpIHtcbiAgICAgICAgICBwcm9ncmVzcy5sb2FkZWRTZWNvbmRzID0gbG9hZGVkU2Vjb25kcztcbiAgICAgICAgICBwcm9ncmVzcy5sb2FkZWQgPSBsb2FkZWRTZWNvbmRzIC8gZHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgLy8gT25seSBjYWxsIG9uUHJvZ3Jlc3MgaWYgdmFsdWVzIGhhdmUgY2hhbmdlZFxuICAgICAgICBpZiAocHJvZ3Jlc3MucGxheWVkU2Vjb25kcyAhPT0gX3RoaXM0LnByZXZQbGF5ZWQgfHwgcHJvZ3Jlc3MubG9hZGVkU2Vjb25kcyAhPT0gX3RoaXM0LnByZXZMb2FkZWQpIHtcbiAgICAgICAgICBfdGhpczQucHJvcHMub25Qcm9ncmVzcyhwcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXM0LnByZXZQbGF5ZWQgPSBwcm9ncmVzcy5wbGF5ZWRTZWNvbmRzO1xuICAgICAgICBfdGhpczQucHJldkxvYWRlZCA9IHByb2dyZXNzLmxvYWRlZFNlY29uZHM7XG4gICAgICB9XG4gICAgfVxuICAgIF90aGlzNC5wcm9ncmVzc1RpbWVvdXQgPSBzZXRUaW1lb3V0KF90aGlzNC5wcm9ncmVzcywgX3RoaXM0LnByb3BzLnByb2dyZXNzRnJlcXVlbmN5IHx8IF90aGlzNC5wcm9wcy5wcm9ncmVzc0ludGVydmFsKTtcbiAgfTtcblxuICB0aGlzLm9uUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfdGhpczQubW91bnRlZCkgcmV0dXJuO1xuICAgIF90aGlzNC5pc1JlYWR5ID0gdHJ1ZTtcbiAgICBfdGhpczQuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgdmFyIF9wcm9wczIgPSBfdGhpczQucHJvcHMsXG4gICAgICAgIG9uUmVhZHkgPSBfcHJvcHMyLm9uUmVhZHksXG4gICAgICAgIHBsYXlpbmcgPSBfcHJvcHMyLnBsYXlpbmcsXG4gICAgICAgIHZvbHVtZSA9IF9wcm9wczIudm9sdW1lLFxuICAgICAgICBtdXRlZCA9IF9wcm9wczIubXV0ZWQ7XG5cbiAgICBvblJlYWR5KCk7XG4gICAgaWYgKCFtdXRlZCAmJiB2b2x1bWUgIT09IG51bGwpIHtcbiAgICAgIF90aGlzNC5wbGF5ZXIuc2V0Vm9sdW1lKHZvbHVtZSk7XG4gICAgfVxuICAgIGlmIChfdGhpczQubG9hZE9uUmVhZHkpIHtcbiAgICAgIF90aGlzNC5wbGF5ZXIubG9hZChfdGhpczQubG9hZE9uUmVhZHksIHRydWUpO1xuICAgICAgX3RoaXM0LmxvYWRPblJlYWR5ID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHBsYXlpbmcpIHtcbiAgICAgIF90aGlzNC5wbGF5ZXIucGxheSgpO1xuICAgIH1cbiAgICBfdGhpczQub25EdXJhdGlvbkNoZWNrKCk7XG4gIH07XG5cbiAgdGhpcy5vblBsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXM0LmlzUGxheWluZyA9IHRydWU7XG4gICAgX3RoaXM0LmlzTG9hZGluZyA9IGZhbHNlO1xuICAgIHZhciBfcHJvcHMzID0gX3RoaXM0LnByb3BzLFxuICAgICAgICBvblN0YXJ0ID0gX3Byb3BzMy5vblN0YXJ0LFxuICAgICAgICBvblBsYXkgPSBfcHJvcHMzLm9uUGxheSxcbiAgICAgICAgcGxheWJhY2tSYXRlID0gX3Byb3BzMy5wbGF5YmFja1JhdGU7XG5cbiAgICBpZiAoX3RoaXM0LnN0YXJ0T25QbGF5KSB7XG4gICAgICBpZiAoX3RoaXM0LnBsYXllci5zZXRQbGF5YmFja1JhdGUpIHtcbiAgICAgICAgX3RoaXM0LnBsYXllci5zZXRQbGF5YmFja1JhdGUocGxheWJhY2tSYXRlKTtcbiAgICAgIH1cbiAgICAgIG9uU3RhcnQoKTtcbiAgICAgIF90aGlzNC5zdGFydE9uUGxheSA9IGZhbHNlO1xuICAgIH1cbiAgICBvblBsYXkoKTtcbiAgICBpZiAoX3RoaXM0LnNlZWtPblBsYXkpIHtcbiAgICAgIF90aGlzNC5zZWVrVG8oX3RoaXM0LnNlZWtPblBsYXkpO1xuICAgICAgX3RoaXM0LnNlZWtPblBsYXkgPSBudWxsO1xuICAgIH1cbiAgICBfdGhpczQub25EdXJhdGlvbkNoZWNrKCk7XG4gIH07XG5cbiAgdGhpcy5vblBhdXNlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBfdGhpczQuaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgaWYgKCFfdGhpczQuaXNMb2FkaW5nKSB7XG4gICAgICBfdGhpczQucHJvcHMub25QYXVzZShlKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbkVuZGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcHJvcHM0ID0gX3RoaXM0LnByb3BzLFxuICAgICAgICBhY3RpdmVQbGF5ZXIgPSBfcHJvcHM0LmFjdGl2ZVBsYXllcixcbiAgICAgICAgbG9vcCA9IF9wcm9wczQubG9vcCxcbiAgICAgICAgb25FbmRlZCA9IF9wcm9wczQub25FbmRlZDtcblxuICAgIGlmIChhY3RpdmVQbGF5ZXIubG9vcE9uRW5kZWQgJiYgbG9vcCkge1xuICAgICAgX3RoaXM0LnNlZWtUbygwKTtcbiAgICB9XG4gICAgaWYgKCFsb29wKSB7XG4gICAgICBfdGhpczQuaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICBvbkVuZGVkKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub25FcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3Byb3BzNTtcblxuICAgIF90aGlzNC5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAoX3Byb3BzNSA9IF90aGlzNC5wcm9wcykub25FcnJvci5hcHBseShfcHJvcHM1LCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHRoaXMub25EdXJhdGlvbkNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGNsZWFyVGltZW91dChfdGhpczQuZHVyYXRpb25DaGVja1RpbWVvdXQpO1xuICAgIHZhciBkdXJhdGlvbiA9IF90aGlzNC5nZXREdXJhdGlvbigpO1xuICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgaWYgKCFfdGhpczQub25EdXJhdGlvbkNhbGxlZCkge1xuICAgICAgICBfdGhpczQucHJvcHMub25EdXJhdGlvbihkdXJhdGlvbik7XG4gICAgICAgIF90aGlzNC5vbkR1cmF0aW9uQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXM0LmR1cmF0aW9uQ2hlY2tUaW1lb3V0ID0gc2V0VGltZW91dChfdGhpczQub25EdXJhdGlvbkNoZWNrLCAxMDApO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFNvbWV0aW1lcyB3ZSBrbm93IGxvYWRpbmcgaGFzIHN0b3BwZWQgYnV0IG9uUmVhZHkvb25QbGF5IGFyZSBuZXZlciBjYWxsZWRcbiAgICAvLyBzbyB0aGlzIHByb3ZpZGVzIGEgd2F5IGZvciBwbGF5ZXJzIHRvIGF2b2lkIGdldHRpbmcgc3R1Y2tcbiAgICBfdGhpczQuaXNMb2FkaW5nID0gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5yZWYgPSBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgaWYgKHBsYXllcikge1xuICAgICAgX3RoaXM0LnBsYXllciA9IHBsYXllcjtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBQbGF5ZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVTaW5nbGVQbGF5ZXI7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wczIgPSByZXF1aXJlKCcuL3Byb3BzJyk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBfUGxheWVyID0gcmVxdWlyZSgnLi9QbGF5ZXInKTtcblxudmFyIF9QbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTVVBQT1JURURfUFJPUFMgPSBPYmplY3Qua2V5cyhfcHJvcHMyLnByb3BUeXBlcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNpbmdsZVBsYXllcihhY3RpdmVQbGF5ZXIpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXAyO1xuXG4gIHJldHVybiBfdGVtcDIgPSBfY2xhc3MgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhTaW5nbGVQbGF5ZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gU2luZ2xlUGxheWVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaW5nbGVQbGF5ZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gU2luZ2xlUGxheWVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2luZ2xlUGxheWVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY29uZmlnID0gKDAsIF91dGlscy5nZXRDb25maWcpKF90aGlzLnByb3BzLCBfcHJvcHMyLmRlZmF1bHRQcm9wcywgdHJ1ZSksIF90aGlzLmdldER1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKTtcbiAgICAgIH0sIF90aGlzLmdldEN1cnJlbnRUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgIH0sIF90aGlzLmdldFNlY29uZHNMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX3RoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzLnBsYXllci5nZXRTZWNvbmRzTG9hZGVkKCk7XG4gICAgICB9LCBfdGhpcy5nZXRJbnRlcm5hbFBsYXllciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3BsYXllcic7XG5cbiAgICAgICAgaWYgKCFfdGhpcy5wbGF5ZXIpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXMucGxheWVyLmdldEludGVybmFsUGxheWVyKGtleSk7XG4gICAgICB9LCBfdGhpcy5zZWVrVG8gPSBmdW5jdGlvbiAoZnJhY3Rpb24sIHR5cGUpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5wbGF5ZXIpIHJldHVybiBudWxsO1xuICAgICAgICBfdGhpcy5wbGF5ZXIuc2Vla1RvKGZyYWN0aW9uLCB0eXBlKTtcbiAgICAgIH0sIF90aGlzLnJlZiA9IGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgX3RoaXMucGxheWVyID0gcGxheWVyO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFNpbmdsZVBsYXllciwgW3tcbiAgICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgICByZXR1cm4gISgwLCBfdXRpbHMuaXNFcXVhbCkodGhpcy5wcm9wcywgbmV4dFByb3BzKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdjb21wb25lbnRXaWxsVXBkYXRlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLmNvbmZpZyA9ICgwLCBfdXRpbHMuZ2V0Q29uZmlnKShuZXh0UHJvcHMsIF9wcm9wczIuZGVmYXVsdFByb3BzKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF9jb25maWckZmlsZSA9IHRoaXMuY29uZmlnLmZpbGUsXG4gICAgICAgICAgICBmb3JjZVZpZGVvID0gX2NvbmZpZyRmaWxlLmZvcmNlVmlkZW8sXG4gICAgICAgICAgICBmb3JjZUF1ZGlvID0gX2NvbmZpZyRmaWxlLmZvcmNlQXVkaW8sXG4gICAgICAgICAgICBmb3JjZUhMUyA9IF9jb25maWckZmlsZS5mb3JjZUhMUyxcbiAgICAgICAgICAgIGZvcmNlREFTSCA9IF9jb25maWckZmlsZS5mb3JjZURBU0g7XG5cbiAgICAgICAgdmFyIHNraXBDYW5QbGF5ID0gZm9yY2VWaWRlbyB8fCBmb3JjZUF1ZGlvIHx8IGZvcmNlSExTIHx8IGZvcmNlREFTSDtcbiAgICAgICAgaWYgKCFhY3RpdmVQbGF5ZXIuY2FuUGxheSh0aGlzLnByb3BzLnVybCkgJiYgIXNraXBDYW5QbGF5KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgICAgIHdpZHRoID0gX3Byb3BzLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0ID0gX3Byb3BzLmhlaWdodCxcbiAgICAgICAgICAgIFdyYXBwZXIgPSBfcHJvcHMud3JhcHBlcjtcblxuICAgICAgICB2YXIgb3RoZXJQcm9wcyA9ICgwLCBfdXRpbHMub21pdCkodGhpcy5wcm9wcywgU1VQUE9SVEVEX1BST1BTLCBfcHJvcHMyLkRFUFJFQ0FURURfQ09ORklHX1BST1BTKTtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFdyYXBwZXIsXG4gICAgICAgICAgX2V4dGVuZHMoeyBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlLCB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSkgfSwgb3RoZXJQcm9wcyksXG4gICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX1BsYXllcjJbJ2RlZmF1bHQnXSwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHtcbiAgICAgICAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICAgICAgICBhY3RpdmVQbGF5ZXI6IGFjdGl2ZVBsYXllcixcbiAgICAgICAgICAgIGNvbmZpZzogdGhpcy5jb25maWdcbiAgICAgICAgICB9KSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2luZ2xlUGxheWVyO1xuICB9KF9yZWFjdC5Db21wb25lbnQpLCBfY2xhc3MuZGlzcGxheU5hbWUgPSBhY3RpdmVQbGF5ZXIuZGlzcGxheU5hbWUgKyAnUGxheWVyJywgX2NsYXNzLnByb3BUeXBlcyA9IF9wcm9wczIucHJvcFR5cGVzLCBfY2xhc3MuZGVmYXVsdFByb3BzID0gX3Byb3BzMi5kZWZhdWx0UHJvcHMsIF9jbGFzcy5jYW5QbGF5ID0gYWN0aXZlUGxheWVyLmNhblBsYXksIF90ZW1wMjtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLllvdVR1YmUgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGknO1xudmFyIFNES19HTE9CQUwgPSAnWVQnO1xudmFyIFNES19HTE9CQUxfUkVBRFkgPSAnb25Zb3VUdWJlSWZyYW1lQVBJUmVhZHknO1xudmFyIE1BVENIX1VSTCA9IC8oPzp5b3V0dVxcLmJlXFwvfHlvdXR1YmVcXC5jb21cXC8oPzplbWJlZFxcL3x2XFwvfHdhdGNoXFw/dj18d2F0Y2hcXD8uKyZ2PSkpKChcXHd8LSl7MTF9KXx5b3V0dWJlXFwuY29tXFwvcGxheWxpc3RcXD9saXN0PS87XG52YXIgTUFUQ0hfUExBWUxJU1QgPSAvbGlzdD0oW2EtekEtWjAtOV8tXSspLztcblxuZnVuY3Rpb24gcGFyc2VQbGF5bGlzdCh1cmwpIHtcbiAgaWYgKE1BVENIX1BMQVlMSVNULnRlc3QodXJsKSkge1xuICAgIHZhciBfdXJsJG1hdGNoID0gdXJsLm1hdGNoKE1BVENIX1BMQVlMSVNUKSxcbiAgICAgICAgX3VybCRtYXRjaDIgPSBfc2xpY2VkVG9BcnJheShfdXJsJG1hdGNoLCAyKSxcbiAgICAgICAgcGxheWxpc3RJZCA9IF91cmwkbWF0Y2gyWzFdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpc3RUeXBlOiAncGxheWxpc3QnLFxuICAgICAgbGlzdDogcGxheWxpc3RJZFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHt9O1xufVxuXG52YXIgWW91VHViZSA9IGV4cG9ydHMuWW91VHViZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhZb3VUdWJlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBZb3VUdWJlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBZb3VUdWJlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBZb3VUdWJlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoWW91VHViZSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNhbGxQbGF5ZXIgPSBfdXRpbHMuY2FsbFBsYXllciwgX3RoaXMub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25QbGF5ID0gX3RoaXMkcHJvcHMub25QbGF5LFxuICAgICAgICAgIG9uUGF1c2UgPSBfdGhpcyRwcm9wcy5vblBhdXNlLFxuICAgICAgICAgIG9uQnVmZmVyID0gX3RoaXMkcHJvcHMub25CdWZmZXIsXG4gICAgICAgICAgb25CdWZmZXJFbmQgPSBfdGhpcyRwcm9wcy5vbkJ1ZmZlckVuZCxcbiAgICAgICAgICBvbkVuZGVkID0gX3RoaXMkcHJvcHMub25FbmRlZCxcbiAgICAgICAgICBvblJlYWR5ID0gX3RoaXMkcHJvcHMub25SZWFkeSxcbiAgICAgICAgICBsb29wID0gX3RoaXMkcHJvcHMubG9vcDtcbiAgICAgIHZhciBfd2luZG93JFNES19HTE9CQUwkUGwgPSB3aW5kb3dbU0RLX0dMT0JBTF0uUGxheWVyU3RhdGUsXG4gICAgICAgICAgUExBWUlORyA9IF93aW5kb3ckU0RLX0dMT0JBTCRQbC5QTEFZSU5HLFxuICAgICAgICAgIFBBVVNFRCA9IF93aW5kb3ckU0RLX0dMT0JBTCRQbC5QQVVTRUQsXG4gICAgICAgICAgQlVGRkVSSU5HID0gX3dpbmRvdyRTREtfR0xPQkFMJFBsLkJVRkZFUklORyxcbiAgICAgICAgICBFTkRFRCA9IF93aW5kb3ckU0RLX0dMT0JBTCRQbC5FTkRFRCxcbiAgICAgICAgICBDVUVEID0gX3dpbmRvdyRTREtfR0xPQkFMJFBsLkNVRUQ7XG5cbiAgICAgIGlmIChkYXRhID09PSBQTEFZSU5HKSB7XG4gICAgICAgIG9uUGxheSgpO1xuICAgICAgICBvbkJ1ZmZlckVuZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEgPT09IFBBVVNFRCkgb25QYXVzZSgpO1xuICAgICAgaWYgKGRhdGEgPT09IEJVRkZFUklORykgb25CdWZmZXIoKTtcbiAgICAgIGlmIChkYXRhID09PSBFTkRFRCkge1xuICAgICAgICB2YXIgaXNQbGF5bGlzdCA9ICEhX3RoaXMuY2FsbFBsYXllcignZ2V0UGxheWxpc3QnKTtcbiAgICAgICAgaWYgKGxvb3AgJiYgIWlzUGxheWxpc3QpIHtcbiAgICAgICAgICBfdGhpcy5wbGF5KCk7IC8vIE9ubHkgbG9vcCBtYW51YWxseSBpZiBub3QgcGxheWluZyBhIHBsYXlsaXN0XG4gICAgICAgIH1cbiAgICAgICAgb25FbmRlZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEgPT09IENVRUQpIG9uUmVhZHkoKTtcbiAgICB9LCBfdGhpcy5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignbXV0ZScpO1xuICAgIH0sIF90aGlzLnVubXV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxQbGF5ZXIoJ3VuTXV0ZScpO1xuICAgIH0sIF90aGlzLnJlZiA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICAgIF90aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhZb3VUdWJlLCBbe1xuICAgIGtleTogJ2xvYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCwgaXNSZWFkeSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBsYXlpbmcgPSBfcHJvcHMucGxheWluZyxcbiAgICAgICAgICBtdXRlZCA9IF9wcm9wcy5tdXRlZCxcbiAgICAgICAgICBwbGF5c2lubGluZSA9IF9wcm9wcy5wbGF5c2lubGluZSxcbiAgICAgICAgICBjb250cm9scyA9IF9wcm9wcy5jb250cm9scyxcbiAgICAgICAgICBsb29wID0gX3Byb3BzLmxvb3AsXG4gICAgICAgICAgY29uZmlnID0gX3Byb3BzLmNvbmZpZyxcbiAgICAgICAgICBfb25FcnJvciA9IF9wcm9wcy5vbkVycm9yO1xuICAgICAgdmFyIF9jb25maWckeW91dHViZSA9IGNvbmZpZy55b3V0dWJlLFxuICAgICAgICAgIHBsYXllclZhcnMgPSBfY29uZmlnJHlvdXR1YmUucGxheWVyVmFycyxcbiAgICAgICAgICBlbWJlZE9wdGlvbnMgPSBfY29uZmlnJHlvdXR1YmUuZW1iZWRPcHRpb25zO1xuXG4gICAgICB2YXIgaWQgPSB1cmwgJiYgdXJsLm1hdGNoKE1BVENIX1VSTClbMV07XG4gICAgICBpZiAoaXNSZWFkeSkge1xuICAgICAgICBpZiAoTUFUQ0hfUExBWUxJU1QudGVzdCh1cmwpKSB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIubG9hZFBsYXlsaXN0KHBhcnNlUGxheWxpc3QodXJsKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGxheWVyLmN1ZVZpZGVvQnlJZCh7XG4gICAgICAgICAgdmlkZW9JZDogaWQsXG4gICAgICAgICAgc3RhcnRTZWNvbmRzOiAoMCwgX3V0aWxzLnBhcnNlU3RhcnRUaW1lKSh1cmwpIHx8IHBsYXllclZhcnMuc3RhcnQsXG4gICAgICAgICAgZW5kU2Vjb25kczogKDAsIF91dGlscy5wYXJzZUVuZFRpbWUpKHVybCkgfHwgcGxheWVyVmFycy5lbmRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMLCBTREtfR0xPQkFMX1JFQURZLCBmdW5jdGlvbiAoWVQpIHtcbiAgICAgICAgcmV0dXJuIFlULmxvYWRlZDtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKFlUKSB7XG4gICAgICAgIGlmICghX3RoaXMyLmNvbnRhaW5lcikgcmV0dXJuO1xuICAgICAgICBfdGhpczIucGxheWVyID0gbmV3IFlULlBsYXllcihfdGhpczIuY29udGFpbmVyLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICB2aWRlb0lkOiBpZCxcbiAgICAgICAgICBwbGF5ZXJWYXJzOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgICBhdXRvcGxheTogcGxheWluZyA/IDEgOiAwLFxuICAgICAgICAgICAgbXV0ZTogbXV0ZWQgPyAxIDogMCxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBjb250cm9scyA/IDEgOiAwLFxuICAgICAgICAgICAgc3RhcnQ6ICgwLCBfdXRpbHMucGFyc2VTdGFydFRpbWUpKHVybCksXG4gICAgICAgICAgICBlbmQ6ICgwLCBfdXRpbHMucGFyc2VFbmRUaW1lKSh1cmwpLFxuICAgICAgICAgICAgb3JpZ2luOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICAgICAgcGxheXNpbmxpbmU6IHBsYXlzaW5saW5lXG4gICAgICAgICAgfSwgcGFyc2VQbGF5bGlzdCh1cmwpLCBwbGF5ZXJWYXJzKSxcbiAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgICAgICAgICAgIGlmIChsb29wKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMyLnBsYXllci5zZXRMb29wKHRydWUpOyAvLyBFbmFibGUgcGxheWxpc3QgbG9vcGluZ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlYWR5KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25TdGF0ZUNoYW5nZTogX3RoaXMyLm9uU3RhdGVDaGFuZ2UsXG4gICAgICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfb25FcnJvcihldmVudC5kYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIGVtYmVkT3B0aW9ucykpO1xuICAgICAgfSwgX29uRXJyb3IpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BsYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwbGF5VmlkZW8nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXVzZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwYXVzZVZpZGVvJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICBpZiAoIWRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5jYWxsUGxheWVyKCdnZXRJZnJhbWUnKSkpIHJldHVybjtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc3RvcFZpZGVvJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKGFtb3VudCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZWVrVG8nLCBhbW91bnQpO1xuICAgICAgaWYgKCF0aGlzLnByb3BzLnBsYXlpbmcpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFZvbHVtZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRWb2x1bWUnLCBmcmFjdGlvbiAqIDEwMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UGxheWJhY2tSYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0UGxheWJhY2tSYXRlJywgcmF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0TG9vcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldExvb3AobG9vcCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRMb29wJywgbG9vcCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2dldER1cmF0aW9uJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q3VycmVudFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2dldEN1cnJlbnRUaW1lJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U2Vjb25kc0xvYWRlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsUGxheWVyKCdnZXRWaWRlb0xvYWRlZEZyYWN0aW9uJykgKiB0aGlzLmdldER1cmF0aW9uKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHN0eWxlID0ge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlIH0sXG4gICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHJlZjogdGhpcy5yZWYgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFlvdVR1YmU7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Zb3VUdWJlLmRpc3BsYXlOYW1lID0gJ1lvdVR1YmUnO1xuXG5Zb3VUdWJlLmNhblBsYXkgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiBNQVRDSF9VUkwudGVzdCh1cmwpO1xufTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gKDAsIF9zaW5nbGVQbGF5ZXIyWydkZWZhdWx0J10pKFlvdVR1YmUpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU291bmRDbG91ZCA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJ2h0dHBzOi8vdy5zb3VuZGNsb3VkLmNvbS9wbGF5ZXIvYXBpLmpzJztcbnZhciBTREtfR0xPQkFMID0gJ1NDJztcbnZhciBNQVRDSF9VUkwgPSAvKHNvdW5kY2xvdWRcXC5jb218c25kXFwuc2MpXFwvLiskLztcblxudmFyIFNvdW5kQ2xvdWQgPSBleHBvcnRzLlNvdW5kQ2xvdWQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU291bmRDbG91ZCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU291bmRDbG91ZCgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU291bmRDbG91ZCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gU291bmRDbG91ZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNvdW5kQ2xvdWQpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jYWxsUGxheWVyID0gX3V0aWxzLmNhbGxQbGF5ZXIsIF90aGlzLmR1cmF0aW9uID0gbnVsbCwgX3RoaXMuY3VycmVudFRpbWUgPSBudWxsLCBfdGhpcy5mcmFjdGlvbkxvYWRlZCA9IG51bGwsIF90aGlzLm11dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRWb2x1bWUoMCk7XG4gICAgfSwgX3RoaXMudW5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5zZXRWb2x1bWUoX3RoaXMucHJvcHMudm9sdW1lKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5yZWYgPSBmdW5jdGlvbiAoaWZyYW1lKSB7XG4gICAgICBfdGhpcy5pZnJhbWUgPSBpZnJhbWU7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU291bmRDbG91ZCwgW3tcbiAgICBrZXk6ICdsb2FkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCh1cmwsIGlzUmVhZHkpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbihmdW5jdGlvbiAoU0MpIHtcbiAgICAgICAgaWYgKCFfdGhpczIuaWZyYW1lKSByZXR1cm47XG4gICAgICAgIHZhciBfU0MkV2lkZ2V0JEV2ZW50cyA9IFNDLldpZGdldC5FdmVudHMsXG4gICAgICAgICAgICBQTEFZID0gX1NDJFdpZGdldCRFdmVudHMuUExBWSxcbiAgICAgICAgICAgIFBMQVlfUFJPR1JFU1MgPSBfU0MkV2lkZ2V0JEV2ZW50cy5QTEFZX1BST0dSRVNTLFxuICAgICAgICAgICAgUEFVU0UgPSBfU0MkV2lkZ2V0JEV2ZW50cy5QQVVTRSxcbiAgICAgICAgICAgIEZJTklTSCA9IF9TQyRXaWRnZXQkRXZlbnRzLkZJTklTSCxcbiAgICAgICAgICAgIEVSUk9SID0gX1NDJFdpZGdldCRFdmVudHMuRVJST1I7XG5cbiAgICAgICAgaWYgKCFpc1JlYWR5KSB7XG4gICAgICAgICAgX3RoaXMyLnBsYXllciA9IFNDLldpZGdldChfdGhpczIuaWZyYW1lKTtcbiAgICAgICAgICBfdGhpczIucGxheWVyLmJpbmQoUExBWSwgX3RoaXMyLnByb3BzLm9uUGxheSk7XG4gICAgICAgICAgX3RoaXMyLnBsYXllci5iaW5kKFBBVVNFLCBfdGhpczIucHJvcHMub25QYXVzZSk7XG4gICAgICAgICAgX3RoaXMyLnBsYXllci5iaW5kKFBMQVlfUFJPR1JFU1MsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBfdGhpczIuY3VycmVudFRpbWUgPSBlLmN1cnJlbnRQb3NpdGlvbiAvIDEwMDA7XG4gICAgICAgICAgICBfdGhpczIuZnJhY3Rpb25Mb2FkZWQgPSBlLmxvYWRlZFByb2dyZXNzO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIF90aGlzMi5wbGF5ZXIuYmluZChGSU5JU0gsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIucHJvcHMub25FbmRlZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIF90aGlzMi5wbGF5ZXIuYmluZChFUlJPUiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIucHJvcHMub25FcnJvcihlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczIucGxheWVyLmxvYWQodXJsLCBfZXh0ZW5kcyh7fSwgX3RoaXMyLnByb3BzLmNvbmZpZy5zb3VuZGNsb3VkLm9wdGlvbnMsIHtcbiAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICAgICAgICBfdGhpczIucGxheWVyLmdldER1cmF0aW9uKGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgICAgICAgICAgICBfdGhpczIuZHVyYXRpb24gPSBkdXJhdGlvbiAvIDEwMDA7XG4gICAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlYWR5KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BsYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwbGF5Jyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGF1c2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGF1c2UnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzdG9wJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIC8vIE5vdGhpbmcgdG8gZG9cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZWVrVG8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWVrVG8oc2Vjb25kcykge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZWVrVG8nLCBzZWNvbmRzICogMTAwMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Vm9sdW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vm9sdW1lKGZyYWN0aW9uKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldFZvbHVtZScsIGZyYWN0aW9uICogMTAwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXREdXJhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZHVyYXRpb247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q3VycmVudFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRUaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFNlY29uZHNMb2FkZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZnJhY3Rpb25Mb2FkZWQgKiB0aGlzLmR1cmF0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScsIHtcbiAgICAgICAgcmVmOiB0aGlzLnJlZixcbiAgICAgICAgc3JjOiAnaHR0cHM6Ly93LnNvdW5kY2xvdWQuY29tL3BsYXllci8/dXJsPScgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5wcm9wcy51cmwpLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIGZyYW1lQm9yZGVyOiAwLFxuICAgICAgICBhbGxvdzogJ2F1dG9wbGF5J1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNvdW5kQ2xvdWQ7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Tb3VuZENsb3VkLmRpc3BsYXlOYW1lID0gJ1NvdW5kQ2xvdWQnO1xuXG5Tb3VuZENsb3VkLmNhblBsYXkgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiBNQVRDSF9VUkwudGVzdCh1cmwpO1xufTtcblxuU291bmRDbG91ZC5sb29wT25FbmRlZCA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSAoMCwgX3NpbmdsZVBsYXllcjJbJ2RlZmF1bHQnXSkoU291bmRDbG91ZCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5WaW1lbyA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJ2h0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS9hcGkvcGxheWVyLmpzJztcbnZhciBTREtfR0xPQkFMID0gJ1ZpbWVvJztcbnZhciBNQVRDSF9VUkwgPSAvdmltZW9cXC5jb21cXC8uKy87XG52YXIgTUFUQ0hfRklMRV9VUkwgPSAvdmltZW9cXC5jb21cXC9leHRlcm5hbFxcL1swLTldK1xcLi4rLztcblxudmFyIFZpbWVvID0gZXhwb3J0cy5WaW1lbyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhWaW1lbywgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVmltZW8oKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpbWVvKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBWaW1lby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFZpbWVvKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY2FsbFBsYXllciA9IF91dGlscy5jYWxsUGxheWVyLCBfdGhpcy5kdXJhdGlvbiA9IG51bGwsIF90aGlzLmN1cnJlbnRUaW1lID0gbnVsbCwgX3RoaXMuc2Vjb25kc0xvYWRlZCA9IG51bGwsIF90aGlzLm11dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRWb2x1bWUoMCk7XG4gICAgfSwgX3RoaXMudW5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5zZXRWb2x1bWUoX3RoaXMucHJvcHMudm9sdW1lKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5yZWYgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgICBfdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVmltZW8sIFt7XG4gICAga2V5OiAnbG9hZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQodXJsKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5kdXJhdGlvbiA9IG51bGw7XG4gICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbihmdW5jdGlvbiAoVmltZW8pIHtcbiAgICAgICAgaWYgKCFfdGhpczIuY29udGFpbmVyKSByZXR1cm47XG4gICAgICAgIF90aGlzMi5wbGF5ZXIgPSBuZXcgVmltZW8uUGxheWVyKF90aGlzMi5jb250YWluZXIsIF9leHRlbmRzKHtcbiAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICBhdXRvcGxheTogX3RoaXMyLnByb3BzLnBsYXlpbmcsXG4gICAgICAgICAgbXV0ZWQ6IF90aGlzMi5wcm9wcy5tdXRlZCxcbiAgICAgICAgICBsb29wOiBfdGhpczIucHJvcHMubG9vcCxcbiAgICAgICAgICBwbGF5c2lubGluZTogX3RoaXMyLnByb3BzLnBsYXlzaW5saW5lXG4gICAgICAgIH0sIF90aGlzMi5wcm9wcy5jb25maWcudmltZW8ucGxheWVyT3B0aW9ucykpO1xuICAgICAgICBfdGhpczIucGxheWVyLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGlmcmFtZSA9IF90aGlzMi5jb250YWluZXIucXVlcnlTZWxlY3RvcignaWZyYW1lJyk7XG4gICAgICAgICAgaWZyYW1lLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICAgIGlmcmFtZS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIH0pWydjYXRjaCddKF90aGlzMi5wcm9wcy5vbkVycm9yKTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5vbignbG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlYWR5KCk7XG4gICAgICAgICAgX3RoaXMyLnJlZnJlc2hEdXJhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5vbigncGxheScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25QbGF5KCk7XG4gICAgICAgICAgX3RoaXMyLnJlZnJlc2hEdXJhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5vbigncGF1c2UnLCBfdGhpczIucHJvcHMub25QYXVzZSk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3NlZWtlZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5wcm9wcy5vblNlZWsoZS5zZWNvbmRzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ2VuZGVkJywgX3RoaXMyLnByb3BzLm9uRW5kZWQpO1xuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdlcnJvcicsIF90aGlzMi5wcm9wcy5vbkVycm9yKTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5vbigndGltZXVwZGF0ZScsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgIHZhciBzZWNvbmRzID0gX3JlZjIuc2Vjb25kcztcblxuICAgICAgICAgIF90aGlzMi5jdXJyZW50VGltZSA9IHNlY29uZHM7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdwcm9ncmVzcycsIGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICAgIHZhciBzZWNvbmRzID0gX3JlZjMuc2Vjb25kcztcblxuICAgICAgICAgIF90aGlzMi5zZWNvbmRzTG9hZGVkID0gc2Vjb25kcztcbiAgICAgICAgfSk7XG4gICAgICB9LCB0aGlzLnByb3BzLm9uRXJyb3IpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlZnJlc2hEdXJhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZnJlc2hEdXJhdGlvbigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB0aGlzLnBsYXllci5nZXREdXJhdGlvbigpLnRoZW4oZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgIF90aGlzMy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGxheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuY2FsbFBsYXllcigncGxheScpO1xuICAgICAgaWYgKHByb21pc2UpIHtcbiAgICAgICAgcHJvbWlzZVsnY2F0Y2gnXSh0aGlzLnByb3BzLm9uRXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3VubG9hZCcpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NlZWtUbycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWtUbyhzZWNvbmRzKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldEN1cnJlbnRUaW1lJywgc2Vjb25kcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Vm9sdW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vm9sdW1lKGZyYWN0aW9uKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldFZvbHVtZScsIGZyYWN0aW9uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRMb29wJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TG9vcChsb29wKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldExvb3AnLCBsb29wKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXREdXJhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZHVyYXRpb247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q3VycmVudFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRUaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFNlY29uZHNMb2FkZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2Vjb25kc0xvYWRlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JsYWNrJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICBrZXk6IHRoaXMucHJvcHMudXJsLFxuICAgICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBWaW1lbztcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblZpbWVvLmRpc3BsYXlOYW1lID0gJ1ZpbWVvJztcblxuVmltZW8uY2FuUGxheSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgaWYgKE1BVENIX0ZJTEVfVVJMLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gTUFUQ0hfVVJMLnRlc3QodXJsKTtcbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9ICgwLCBfc2luZ2xlUGxheWVyMlsnZGVmYXVsdCddKShWaW1lbyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5GYWNlYm9vayA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJy8vY29ubmVjdC5mYWNlYm9vay5uZXQvZW5fVVMvc2RrLmpzJztcbnZhciBTREtfR0xPQkFMID0gJ0ZCJztcbnZhciBTREtfR0xPQkFMX1JFQURZID0gJ2ZiQXN5bmNJbml0JztcbnZhciBNQVRDSF9VUkwgPSAvZmFjZWJvb2tcXC5jb21cXC8oW14vP10uK1xcLyk/dmlkZW8oc3xcXC5waHApWy8/XS4qJC87XG52YXIgUExBWUVSX0lEX1BSRUZJWCA9ICdmYWNlYm9vay1wbGF5ZXItJztcblxudmFyIEZhY2Vib29rID0gZXhwb3J0cy5GYWNlYm9vayA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhGYWNlYm9vaywgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmFjZWJvb2soKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZhY2Vib29rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBGYWNlYm9vay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZhY2Vib29rKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY2FsbFBsYXllciA9IF91dGlscy5jYWxsUGxheWVyLCBfdGhpcy5wbGF5ZXJJRCA9IFBMQVlFUl9JRF9QUkVGSVggKyAoMCwgX3V0aWxzLnJhbmRvbVN0cmluZykoKSwgX3RoaXMubXV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxQbGF5ZXIoJ211dGUnKTtcbiAgICB9LCBfdGhpcy51bm11dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYWxsUGxheWVyKCd1bm11dGUnKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGYWNlYm9vaywgW3tcbiAgICBrZXk6ICdsb2FkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCh1cmwsIGlzUmVhZHkpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoaXNSZWFkeSkge1xuICAgICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCwgU0RLX0dMT0JBTF9SRUFEWSkudGhlbihmdW5jdGlvbiAoRkIpIHtcbiAgICAgICAgICByZXR1cm4gRkIuWEZCTUwucGFyc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMLCBTREtfR0xPQkFMX1JFQURZKS50aGVuKGZ1bmN0aW9uIChGQikge1xuICAgICAgICBGQi5pbml0KHtcbiAgICAgICAgICBhcHBJZDogX3RoaXMyLnByb3BzLmNvbmZpZy5mYWNlYm9vay5hcHBJZCxcbiAgICAgICAgICB4ZmJtbDogdHJ1ZSxcbiAgICAgICAgICB2ZXJzaW9uOiAndjIuNSdcbiAgICAgICAgfSk7XG4gICAgICAgIEZCLkV2ZW50LnN1YnNjcmliZSgneGZibWwucmVuZGVyJywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgIC8vIEhlcmUgd2Uga25vdyB0aGUgU0RLIGhhcyBsb2FkZWQsIGV2ZW4gaWYgb25SZWFkeS9vblBsYXlcbiAgICAgICAgICAvLyBpcyBub3QgY2FsbGVkIGR1ZSB0byBhIHZpZGVvIHRoYXQgY2Fubm90IGJlIGVtYmVkZGVkXG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uTG9hZGVkKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBGQi5FdmVudC5zdWJzY3JpYmUoJ3hmYm1sLnJlYWR5JywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgIGlmIChtc2cudHlwZSA9PT0gJ3ZpZGVvJyAmJiBtc2cuaWQgPT09IF90aGlzMi5wbGF5ZXJJRCkge1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllciA9IG1zZy5pbnN0YW5jZTtcbiAgICAgICAgICAgIF90aGlzMi5wbGF5ZXIuc3Vic2NyaWJlKCdzdGFydGVkUGxheWluZycsIF90aGlzMi5wcm9wcy5vblBsYXkpO1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5zdWJzY3JpYmUoJ3BhdXNlZCcsIF90aGlzMi5wcm9wcy5vblBhdXNlKTtcbiAgICAgICAgICAgIF90aGlzMi5wbGF5ZXIuc3Vic2NyaWJlKCdmaW5pc2hlZFBsYXlpbmcnLCBfdGhpczIucHJvcHMub25FbmRlZCk7XG4gICAgICAgICAgICBfdGhpczIucGxheWVyLnN1YnNjcmliZSgnc3RhcnRlZEJ1ZmZlcmluZycsIF90aGlzMi5wcm9wcy5vbkJ1ZmZlcik7XG4gICAgICAgICAgICBfdGhpczIucGxheWVyLnN1YnNjcmliZSgnZmluaXNoZWRCdWZmZXJpbmcnLCBfdGhpczIucHJvcHMub25CdWZmZXJFbmQpO1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5zdWJzY3JpYmUoJ2Vycm9yJywgX3RoaXMyLnByb3BzLm9uRXJyb3IpO1xuICAgICAgICAgICAgaWYgKCFfdGhpczIucHJvcHMubXV0ZWQpIHtcbiAgICAgICAgICAgICAgLy8gUGxheWVyIGlzIG11dGVkIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgICAgX3RoaXMyLmNhbGxQbGF5ZXIoJ3VubXV0ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMyLnByb3BzLm9uUmVhZHkoKTtcblxuICAgICAgICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIEZhY2Vib29rIGhhdmUgYWRkZWQgYHZpc2liaWxpdHk6IGhpZGRlbmBcbiAgICAgICAgICAgIC8vIHRvIHRoZSBpZnJhbWUgd2hlbiBhdXRvcGxheSBmYWlscywgc28gaGVyZSB3ZSBzZXQgaXQgYmFja1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoX3RoaXMyLnBsYXllcklEKS5xdWVyeVNlbGVjdG9yKCdpZnJhbWUnKS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwbGF5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGxheScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2VlaycsIHNlY29uZHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFZvbHVtZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRWb2x1bWUnLCBmcmFjdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2dldER1cmF0aW9uJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q3VycmVudFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2dldEN1cnJlbnRQb3NpdGlvbicpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFNlY29uZHNMb2FkZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHN0eWxlID0ge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgaWQ6IHRoaXMucGxheWVySUQsXG4gICAgICAgIGNsYXNzTmFtZTogJ2ZiLXZpZGVvJyxcbiAgICAgICAgJ2RhdGEtaHJlZic6IHRoaXMucHJvcHMudXJsLFxuICAgICAgICAnZGF0YS1hdXRvcGxheSc6IHRoaXMucHJvcHMucGxheWluZyA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICAgICdkYXRhLWFsbG93ZnVsbHNjcmVlbic6ICd0cnVlJyxcbiAgICAgICAgJ2RhdGEtY29udHJvbHMnOiB0aGlzLnByb3BzLmNvbnRyb2xzID8gJ3RydWUnIDogJ2ZhbHNlJ1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZhY2Vib29rO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuRmFjZWJvb2suZGlzcGxheU5hbWUgPSAnRmFjZWJvb2snO1xuXG5GYWNlYm9vay5jYW5QbGF5ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gTUFUQ0hfVVJMLnRlc3QodXJsKTtcbn07XG5cbkZhY2Vib29rLmxvb3BPbkVuZGVkID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9ICgwLCBfc2luZ2xlUGxheWVyMlsnZGVmYXVsdCddKShGYWNlYm9vayk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TdHJlYW1hYmxlID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgX3NpbmdsZVBsYXllciA9IHJlcXVpcmUoJy4uL3NpbmdsZVBsYXllcicpO1xuXG52YXIgX3NpbmdsZVBsYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW5nbGVQbGF5ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNES19VUkwgPSAnLy9jZG4uZW1iZWQubHkvcGxheWVyLTAuMS4wLm1pbi5qcyc7XG52YXIgU0RLX0dMT0JBTCA9ICdwbGF5ZXJqcyc7XG52YXIgTUFUQ0hfVVJMID0gL3N0cmVhbWFibGVcXC5jb21cXC8oW2EtejAtOV0rKSQvO1xuXG52YXIgU3RyZWFtYWJsZSA9IGV4cG9ydHMuU3RyZWFtYWJsZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTdHJlYW1hYmxlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdHJlYW1hYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdHJlYW1hYmxlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBTdHJlYW1hYmxlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3RyZWFtYWJsZSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNhbGxQbGF5ZXIgPSBfdXRpbHMuY2FsbFBsYXllciwgX3RoaXMuZHVyYXRpb24gPSBudWxsLCBfdGhpcy5jdXJyZW50VGltZSA9IG51bGwsIF90aGlzLnNlY29uZHNMb2FkZWQgPSBudWxsLCBfdGhpcy5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignbXV0ZScpO1xuICAgIH0sIF90aGlzLnVubXV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxQbGF5ZXIoJ3VubXV0ZScpO1xuICAgIH0sIF90aGlzLnJlZiA9IGZ1bmN0aW9uIChpZnJhbWUpIHtcbiAgICAgIF90aGlzLmlmcmFtZSA9IGlmcmFtZTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTdHJlYW1hYmxlLCBbe1xuICAgIGtleTogJ2xvYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChwbGF5ZXJqcykge1xuICAgICAgICBpZiAoIV90aGlzMi5pZnJhbWUpIHJldHVybjtcbiAgICAgICAgX3RoaXMyLnBsYXllciA9IG5ldyBwbGF5ZXJqcy5QbGF5ZXIoX3RoaXMyLmlmcmFtZSk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIuc2V0TG9vcChfdGhpczIucHJvcHMubG9vcCk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3JlYWR5JywgX3RoaXMyLnByb3BzLm9uUmVhZHkpO1xuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdwbGF5JywgX3RoaXMyLnByb3BzLm9uUGxheSk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3BhdXNlJywgX3RoaXMyLnByb3BzLm9uUGF1c2UpO1xuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdzZWVrZWQnLCBfdGhpczIucHJvcHMub25TZWVrKTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5vbignZW5kZWQnLCBfdGhpczIucHJvcHMub25FbmRlZCk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ2Vycm9yJywgX3RoaXMyLnByb3BzLm9uRXJyb3IpO1xuICAgICAgICBfdGhpczIucGxheWVyLm9uKCd0aW1ldXBkYXRlJywgZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gX3JlZjIuZHVyYXRpb24sXG4gICAgICAgICAgICAgIHNlY29uZHMgPSBfcmVmMi5zZWNvbmRzO1xuXG4gICAgICAgICAgX3RoaXMyLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgICAgX3RoaXMyLmN1cnJlbnRUaW1lID0gc2Vjb25kcztcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ2J1ZmZlcmVkJywgZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgICAgdmFyIHBlcmNlbnQgPSBfcmVmMy5wZXJjZW50O1xuXG4gICAgICAgICAgaWYgKF90aGlzMi5kdXJhdGlvbikge1xuICAgICAgICAgICAgX3RoaXMyLnNlY29uZHNMb2FkZWQgPSBfdGhpczIuZHVyYXRpb24gKiBwZXJjZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChfdGhpczIucHJvcHMubXV0ZWQpIHtcbiAgICAgICAgICBfdGhpczIucGxheWVyLm11dGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcy5wcm9wcy5vbkVycm9yKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwbGF5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGxheScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0Q3VycmVudFRpbWUnLCBzZWNvbmRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRWb2x1bWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUoZnJhY3Rpb24pIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0Vm9sdW1lJywgZnJhY3Rpb24gKiAxMDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldExvb3AnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMb29wKGxvb3ApIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0TG9vcCcsIGxvb3ApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldER1cmF0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RHVyYXRpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5kdXJhdGlvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRDdXJyZW50VGltZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRpbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U2Vjb25kc0xvYWRlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWNvbmRzTG9hZGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBpZCA9IHRoaXMucHJvcHMudXJsLm1hdGNoKE1BVENIX1VSTClbMV07XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdpZnJhbWUnLCB7XG4gICAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICAgIHNyYzogJ2h0dHBzOi8vc3RyZWFtYWJsZS5jb20vby8nICsgaWQsXG4gICAgICAgIGZyYW1lQm9yZGVyOiAnMCcsXG4gICAgICAgIHNjcm9sbGluZzogJ25vJyxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBhbGxvd0Z1bGxTY3JlZW46IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdHJlYW1hYmxlO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuU3RyZWFtYWJsZS5kaXNwbGF5TmFtZSA9ICdTdHJlYW1hYmxlJztcblxuU3RyZWFtYWJsZS5jYW5QbGF5ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gTUFUQ0hfVVJMLnRlc3QodXJsKTtcbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9ICgwLCBfc2luZ2xlUGxheWVyMlsnZGVmYXVsdCddKShTdHJlYW1hYmxlKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLldpc3RpYSA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJy8vZmFzdC53aXN0aWEuY29tL2Fzc2V0cy9leHRlcm5hbC9FLXYxLmpzJztcbnZhciBTREtfR0xPQkFMID0gJ1dpc3RpYSc7XG52YXIgTUFUQ0hfVVJMID0gLyg/Ondpc3RpYVxcLmNvbXx3aVxcLnN0KVxcLyg/Om1lZGlhc3xlbWJlZClcXC8oLiopJC87XG5cbnZhciBXaXN0aWEgPSBleHBvcnRzLldpc3RpYSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhXaXN0aWEsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFdpc3RpYSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2lzdGlhKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBXaXN0aWEuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihXaXN0aWEpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jYWxsUGxheWVyID0gX3V0aWxzLmNhbGxQbGF5ZXIsIF90aGlzLm11dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYWxsUGxheWVyKCdtdXRlJyk7XG4gICAgfSwgX3RoaXMudW5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcigndW5tdXRlJyk7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoV2lzdGlhLCBbe1xuICAgIGtleTogJ2dldElEJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SUQodXJsKSB7XG4gICAgICByZXR1cm4gdXJsICYmIHVybC5tYXRjaChNQVRDSF9VUkwpWzFdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xvYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBsYXlpbmcgPSBfcHJvcHMucGxheWluZyxcbiAgICAgICAgICBtdXRlZCA9IF9wcm9wcy5tdXRlZCxcbiAgICAgICAgICBjb250cm9scyA9IF9wcm9wcy5jb250cm9scyxcbiAgICAgICAgICBfb25SZWFkeSA9IF9wcm9wcy5vblJlYWR5LFxuICAgICAgICAgIG9uUGxheSA9IF9wcm9wcy5vblBsYXksXG4gICAgICAgICAgb25QYXVzZSA9IF9wcm9wcy5vblBhdXNlLFxuICAgICAgICAgIG9uU2VlayA9IF9wcm9wcy5vblNlZWssXG4gICAgICAgICAgb25FbmRlZCA9IF9wcm9wcy5vbkVuZGVkLFxuICAgICAgICAgIGNvbmZpZyA9IF9wcm9wcy5jb25maWcsXG4gICAgICAgICAgb25FcnJvciA9IF9wcm9wcy5vbkVycm9yO1xuXG4gICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpbmRvdy5fd3EgPSB3aW5kb3cuX3dxIHx8IFtdO1xuICAgICAgICB3aW5kb3cuX3dxLnB1c2goe1xuICAgICAgICAgIGlkOiBfdGhpczIuZ2V0SUQodXJsKSxcbiAgICAgICAgICBvcHRpb25zOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgICBhdXRvUGxheTogcGxheWluZyxcbiAgICAgICAgICAgIHNpbGVudEF1dG9QbGF5OiAnYWxsb3cnLFxuICAgICAgICAgICAgbXV0ZWQ6IG11dGVkLFxuICAgICAgICAgICAgY29udHJvbHNWaXNpYmxlT25Mb2FkOiBjb250cm9sc1xuICAgICAgICAgIH0sIGNvbmZpZy53aXN0aWEub3B0aW9ucyksXG4gICAgICAgICAgb25SZWFkeTogZnVuY3Rpb24gb25SZWFkeShwbGF5ZXIpIHtcbiAgICAgICAgICAgIF90aGlzMi5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgICAgICAgICBfdGhpczIudW5iaW5kKCk7XG4gICAgICAgICAgICBfdGhpczIucGxheWVyLmJpbmQoJ3BsYXknLCBvblBsYXkpO1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5iaW5kKCdwYXVzZScsIG9uUGF1c2UpO1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5iaW5kKCdzZWVrJywgb25TZWVrKTtcbiAgICAgICAgICAgIF90aGlzMi5wbGF5ZXIuYmluZCgnZW5kJywgb25FbmRlZCk7XG4gICAgICAgICAgICBfb25SZWFkeSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LCBvbkVycm9yKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwbGF5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGxheScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndW5iaW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG9uUGxheSA9IF9wcm9wczIub25QbGF5LFxuICAgICAgICAgIG9uUGF1c2UgPSBfcHJvcHMyLm9uUGF1c2UsXG4gICAgICAgICAgb25TZWVrID0gX3Byb3BzMi5vblNlZWssXG4gICAgICAgICAgb25FbmRlZCA9IF9wcm9wczIub25FbmRlZDtcblxuICAgICAgdGhpcy5wbGF5ZXIudW5iaW5kKCdwbGF5Jywgb25QbGF5KTtcbiAgICAgIHRoaXMucGxheWVyLnVuYmluZCgncGF1c2UnLCBvblBhdXNlKTtcbiAgICAgIHRoaXMucGxheWVyLnVuYmluZCgnc2VlaycsIG9uU2Vlayk7XG4gICAgICB0aGlzLnBsYXllci51bmJpbmQoJ2VuZCcsIG9uRW5kZWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N0b3AnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncmVtb3ZlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigndGltZScsIHNlY29uZHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFZvbHVtZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCd2b2x1bWUnLCBmcmFjdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UGxheWJhY2tSYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGxheWJhY2tSYXRlJywgcmF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2R1cmF0aW9uJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q3VycmVudFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ3RpbWUnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTZWNvbmRzTG9hZGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBpZCA9IHRoaXMuZ2V0SUQodGhpcy5wcm9wcy51cmwpO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICd3aXN0aWFfZW1iZWQgd2lzdGlhX2FzeW5jXycgKyBpZDtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsga2V5OiBpZCwgY2xhc3NOYW1lOiBjbGFzc05hbWUsIHN0eWxlOiBzdHlsZSB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2lzdGlhO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuV2lzdGlhLmRpc3BsYXlOYW1lID0gJ1dpc3RpYSc7XG5cbldpc3RpYS5jYW5QbGF5ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gTUFUQ0hfVVJMLnRlc3QodXJsKTtcbn07XG5cbldpc3RpYS5sb29wT25FbmRlZCA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSAoMCwgX3NpbmdsZVBsYXllcjJbJ2RlZmF1bHQnXSkoV2lzdGlhKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlR3aXRjaCA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJ2h0dHBzOi8vcGxheWVyLnR3aXRjaC50di9qcy9lbWJlZC92MS5qcyc7XG52YXIgU0RLX0dMT0JBTCA9ICdUd2l0Y2gnO1xudmFyIE1BVENIX1ZJREVPX1VSTCA9IC8oPzp3d3dcXC58Z29cXC4pP3R3aXRjaFxcLnR2XFwvdmlkZW9zXFwvKFxcZCspKCR8XFw/KS87XG52YXIgTUFUQ0hfQ0hBTk5FTF9VUkwgPSAvKD86d3d3XFwufGdvXFwuKT90d2l0Y2hcXC50dlxcLyhbYS16MC05X10rKSgkfFxcPykvO1xudmFyIFBMQVlFUl9JRF9QUkVGSVggPSAndHdpdGNoLXBsYXllci0nO1xuXG52YXIgVHdpdGNoID0gZXhwb3J0cy5Ud2l0Y2ggPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVHdpdGNoLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUd2l0Y2goKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFR3aXRjaCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gVHdpdGNoLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVHdpdGNoKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY2FsbFBsYXllciA9IF91dGlscy5jYWxsUGxheWVyLCBfdGhpcy5wbGF5ZXJJRCA9IFBMQVlFUl9JRF9QUkVGSVggKyAoMCwgX3V0aWxzLnJhbmRvbVN0cmluZykoKSwgX3RoaXMubXV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxQbGF5ZXIoJ3NldE11dGVkJywgdHJ1ZSk7XG4gICAgfSwgX3RoaXMudW5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignc2V0TXV0ZWQnLCBmYWxzZSk7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVHdpdGNoLCBbe1xuICAgIGtleTogJ2xvYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCwgaXNSZWFkeSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBsYXlzaW5saW5lID0gX3Byb3BzLnBsYXlzaW5saW5lLFxuICAgICAgICAgIG9uRXJyb3IgPSBfcHJvcHMub25FcnJvcixcbiAgICAgICAgICBjb25maWcgPSBfcHJvcHMuY29uZmlnO1xuXG4gICAgICB2YXIgaXNDaGFubmVsID0gTUFUQ0hfQ0hBTk5FTF9VUkwudGVzdCh1cmwpO1xuICAgICAgdmFyIGlkID0gaXNDaGFubmVsID8gdXJsLm1hdGNoKE1BVENIX0NIQU5ORUxfVVJMKVsxXSA6IHVybC5tYXRjaChNQVRDSF9WSURFT19VUkwpWzFdO1xuICAgICAgaWYgKGlzUmVhZHkpIHtcbiAgICAgICAgaWYgKGlzQ2hhbm5lbCkge1xuICAgICAgICAgIHRoaXMucGxheWVyLnNldENoYW5uZWwoaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucGxheWVyLnNldFZpZGVvKCd2JyArIGlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbihmdW5jdGlvbiAoVHdpdGNoKSB7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIgPSBuZXcgVHdpdGNoLlBsYXllcihfdGhpczIucGxheWVySUQsIF9leHRlbmRzKHtcbiAgICAgICAgICB2aWRlbzogaXNDaGFubmVsID8gJycgOiBpZCxcbiAgICAgICAgICBjaGFubmVsOiBpc0NoYW5uZWwgPyBpZCA6ICcnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgcGxheXNpbmxpbmU6IHBsYXlzaW5saW5lLFxuICAgICAgICAgIGF1dG9wbGF5OiBfdGhpczIucHJvcHMucGxheWluZyxcbiAgICAgICAgICBtdXRlZDogX3RoaXMyLnByb3BzLm11dGVkXG4gICAgICAgIH0sIGNvbmZpZy50d2l0Y2gub3B0aW9ucykpO1xuICAgICAgICB2YXIgX1R3aXRjaCRQbGF5ZXIgPSBUd2l0Y2guUGxheWVyLFxuICAgICAgICAgICAgUkVBRFkgPSBfVHdpdGNoJFBsYXllci5SRUFEWSxcbiAgICAgICAgICAgIFBMQVlJTkcgPSBfVHdpdGNoJFBsYXllci5QTEFZSU5HLFxuICAgICAgICAgICAgUEFVU0UgPSBfVHdpdGNoJFBsYXllci5QQVVTRSxcbiAgICAgICAgICAgIEVOREVEID0gX1R3aXRjaCRQbGF5ZXIuRU5ERUQsXG4gICAgICAgICAgICBPTkxJTkUgPSBfVHdpdGNoJFBsYXllci5PTkxJTkUsXG4gICAgICAgICAgICBPRkZMSU5FID0gX1R3aXRjaCRQbGF5ZXIuT0ZGTElORTtcblxuICAgICAgICBfdGhpczIucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoUkVBRFksIF90aGlzMi5wcm9wcy5vblJlYWR5KTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5hZGRFdmVudExpc3RlbmVyKFBMQVlJTkcsIF90aGlzMi5wcm9wcy5vblBsYXkpO1xuICAgICAgICBfdGhpczIucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoUEFVU0UsIF90aGlzMi5wcm9wcy5vblBhdXNlKTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5hZGRFdmVudExpc3RlbmVyKEVOREVELCBfdGhpczIucHJvcHMub25FbmRlZCk7XG5cbiAgICAgICAgLy8gUHJldmVudCB3ZWlyZCBpc0xvYWRpbmcgYmVoYXZpb3VyIHdoZW4gc3RyZWFtcyBhcmUgb2ZmbGluZVxuICAgICAgICBfdGhpczIucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoT05MSU5FLCBfdGhpczIucHJvcHMub25Mb2FkZWQpO1xuICAgICAgICBfdGhpczIucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoT0ZGTElORSwgX3RoaXMyLnByb3BzLm9uTG9hZGVkKTtcbiAgICAgIH0sIG9uRXJyb3IpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BsYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwbGF5Jyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGF1c2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGF1c2UnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzdG9wJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGF1c2UnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZWVrVG8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWVrVG8oc2Vjb25kcykge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZWVrJywgc2Vjb25kcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Vm9sdW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vm9sdW1lKGZyYWN0aW9uKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldFZvbHVtZScsIGZyYWN0aW9uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXREdXJhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcignZ2V0RHVyYXRpb24nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRDdXJyZW50VGltZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcignZ2V0Q3VycmVudFRpbWUnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTZWNvbmRzTG9hZGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlLCBpZDogdGhpcy5wbGF5ZXJJRCB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVHdpdGNoO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuVHdpdGNoLmRpc3BsYXlOYW1lID0gJ1R3aXRjaCc7XG5cblR3aXRjaC5jYW5QbGF5ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gTUFUQ0hfVklERU9fVVJMLnRlc3QodXJsKSB8fCBNQVRDSF9DSEFOTkVMX1VSTC50ZXN0KHVybCk7XG59O1xuXG5Ud2l0Y2gubG9vcE9uRW5kZWQgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0gKDAsIF9zaW5nbGVQbGF5ZXIyWydkZWZhdWx0J10pKFR3aXRjaCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5EYWlseU1vdGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgX3NpbmdsZVBsYXllciA9IHJlcXVpcmUoJy4uL3NpbmdsZVBsYXllcicpO1xuXG52YXIgX3NpbmdsZVBsYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW5nbGVQbGF5ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNES19VUkwgPSAnaHR0cHM6Ly9hcGkuZG1jZG4ubmV0L2FsbC5qcyc7XG52YXIgU0RLX0dMT0JBTCA9ICdETSc7XG52YXIgU0RLX0dMT0JBTF9SRUFEWSA9ICdkbUFzeW5jSW5pdCc7XG52YXIgTUFUQ0hfVVJMID0gL14oPzooPzpodHRwcz8pOik/KD86XFwvXFwvKT8oPzp3d3dcXC4pPyg/Oig/OmRhaWx5bW90aW9uXFwuY29tKD86XFwvZW1iZWQpP1xcL3ZpZGVvKXxkYWlcXC5seSlcXC8oW2EtekEtWjAtOV0rKSg/Ol9bXFx3Xy1dKyk/JC87XG5cbnZhciBEYWlseU1vdGlvbiA9IGV4cG9ydHMuRGFpbHlNb3Rpb24gPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRGFpbHlNb3Rpb24sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERhaWx5TW90aW9uKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYWlseU1vdGlvbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gRGFpbHlNb3Rpb24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEYWlseU1vdGlvbikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNhbGxQbGF5ZXIgPSBfdXRpbHMuY2FsbFBsYXllciwgX3RoaXMub25EdXJhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkdXJhdGlvbiA9IF90aGlzLmdldER1cmF0aW9uKCk7XG4gICAgICBfdGhpcy5wcm9wcy5vbkR1cmF0aW9uKGR1cmF0aW9uKTtcbiAgICB9LCBfdGhpcy5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignc2V0TXV0ZWQnLCB0cnVlKTtcbiAgICB9LCBfdGhpcy51bm11dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYWxsUGxheWVyKCdzZXRNdXRlZCcsIGZhbHNlKTtcbiAgICB9LCBfdGhpcy5yZWYgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgICBfdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGFpbHlNb3Rpb24sIFt7XG4gICAga2V5OiAnbG9hZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQodXJsKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY29udHJvbHMgPSBfcHJvcHMuY29udHJvbHMsXG4gICAgICAgICAgY29uZmlnID0gX3Byb3BzLmNvbmZpZyxcbiAgICAgICAgICBvbkVycm9yID0gX3Byb3BzLm9uRXJyb3IsXG4gICAgICAgICAgcGxheWluZyA9IF9wcm9wcy5wbGF5aW5nO1xuXG4gICAgICB2YXIgX3VybCRtYXRjaCA9IHVybC5tYXRjaChNQVRDSF9VUkwpLFxuICAgICAgICAgIF91cmwkbWF0Y2gyID0gX3NsaWNlZFRvQXJyYXkoX3VybCRtYXRjaCwgMiksXG4gICAgICAgICAgaWQgPSBfdXJsJG1hdGNoMlsxXTtcblxuICAgICAgaWYgKHRoaXMucGxheWVyKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmxvYWQoaWQsIHtcbiAgICAgICAgICBzdGFydDogKDAsIF91dGlscy5wYXJzZVN0YXJ0VGltZSkodXJsKSxcbiAgICAgICAgICBhdXRvcGxheTogcGxheWluZ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgKDAsIF91dGlscy5nZXRTREspKFNES19VUkwsIFNES19HTE9CQUwsIFNES19HTE9CQUxfUkVBRFksIGZ1bmN0aW9uIChETSkge1xuICAgICAgICByZXR1cm4gRE0ucGxheWVyO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoRE0pIHtcbiAgICAgICAgaWYgKCFfdGhpczIuY29udGFpbmVyKSByZXR1cm47XG4gICAgICAgIHZhciBQbGF5ZXIgPSBETS5wbGF5ZXI7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIgPSBuZXcgUGxheWVyKF90aGlzMi5jb250YWluZXIsIHtcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIHZpZGVvOiBpZCxcbiAgICAgICAgICBwYXJhbXM6IF9leHRlbmRzKHtcbiAgICAgICAgICAgIGNvbnRyb2xzOiBjb250cm9scyxcbiAgICAgICAgICAgIGF1dG9wbGF5OiBfdGhpczIucHJvcHMucGxheWluZyxcbiAgICAgICAgICAgIG11dGU6IF90aGlzMi5wcm9wcy5tdXRlZCxcbiAgICAgICAgICAgIHN0YXJ0OiAoMCwgX3V0aWxzLnBhcnNlU3RhcnRUaW1lKSh1cmwpLFxuICAgICAgICAgICAgb3JpZ2luOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luXG4gICAgICAgICAgfSwgY29uZmlnLmRhaWx5bW90aW9uLnBhcmFtcyksXG4gICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICBhcGlyZWFkeTogX3RoaXMyLnByb3BzLm9uUmVhZHksXG4gICAgICAgICAgICBzZWVrZWQ6IGZ1bmN0aW9uIHNlZWtlZCgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5wcm9wcy5vblNlZWsoX3RoaXMyLnBsYXllci5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlkZW9fZW5kOiBfdGhpczIucHJvcHMub25FbmRlZCxcbiAgICAgICAgICAgIGR1cmF0aW9uY2hhbmdlOiBfdGhpczIub25EdXJhdGlvbkNoYW5nZSxcbiAgICAgICAgICAgIHBhdXNlOiBfdGhpczIucHJvcHMub25QYXVzZSxcbiAgICAgICAgICAgIHBsYXlpbmc6IF90aGlzMi5wcm9wcy5vblBsYXksXG4gICAgICAgICAgICB3YWl0aW5nOiBfdGhpczIucHJvcHMub25CdWZmZXIsXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoZXZlbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9uRXJyb3IoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LCBvbkVycm9yKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwbGF5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGxheScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2VlaycsIHNlY29uZHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFZvbHVtZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRWb2x1bWUnLCBmcmFjdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnBsYXllci5kdXJhdGlvbiB8fCBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEN1cnJlbnRUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuY3VycmVudFRpbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U2Vjb25kc0xvYWRlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuYnVmZmVyZWRUaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JsYWNrJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlIH0sXG4gICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHJlZjogdGhpcy5yZWYgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERhaWx5TW90aW9uO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuRGFpbHlNb3Rpb24uZGlzcGxheU5hbWUgPSAnRGFpbHlNb3Rpb24nO1xuXG5EYWlseU1vdGlvbi5jYW5QbGF5ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gTUFUQ0hfVVJMLnRlc3QodXJsKTtcbn07XG5cbkRhaWx5TW90aW9uLmxvb3BPbkVuZGVkID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9ICgwLCBfc2luZ2xlUGxheWVyMlsnZGVmYXVsdCddKShEYWlseU1vdGlvbik7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5NaXhjbG91ZCA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJy8vd2lkZ2V0Lm1peGNsb3VkLmNvbS9tZWRpYS9qcy93aWRnZXRBcGkuanMnO1xudmFyIFNES19HTE9CQUwgPSAnTWl4Y2xvdWQnO1xudmFyIE1BVENIX1VSTCA9IC9taXhjbG91ZFxcLmNvbVxcLyhbXi9dK1xcL1teL10rKS87XG5cbnZhciBNaXhjbG91ZCA9IGV4cG9ydHMuTWl4Y2xvdWQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWl4Y2xvdWQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1peGNsb3VkKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNaXhjbG91ZCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTWl4Y2xvdWQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNaXhjbG91ZCkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNhbGxQbGF5ZXIgPSBfdXRpbHMuY2FsbFBsYXllciwgX3RoaXMuZHVyYXRpb24gPSBudWxsLCBfdGhpcy5jdXJyZW50VGltZSA9IG51bGwsIF90aGlzLnNlY29uZHNMb2FkZWQgPSBudWxsLCBfdGhpcy5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gTm8gdm9sdW1lIHN1cHBvcnRcbiAgICB9LCBfdGhpcy51bm11dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBObyB2b2x1bWUgc3VwcG9ydFxuICAgIH0sIF90aGlzLnJlZiA9IGZ1bmN0aW9uIChpZnJhbWUpIHtcbiAgICAgIF90aGlzLmlmcmFtZSA9IGlmcmFtZTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNaXhjbG91ZCwgW3tcbiAgICBrZXk6ICdsb2FkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCh1cmwpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbihmdW5jdGlvbiAoTWl4Y2xvdWQpIHtcbiAgICAgICAgX3RoaXMyLnBsYXllciA9IE1peGNsb3VkLlBsYXllcldpZGdldChfdGhpczIuaWZyYW1lKTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5yZWFkeS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucGxheWVyLmV2ZW50cy5wbGF5Lm9uKF90aGlzMi5wcm9wcy5vblBsYXkpO1xuICAgICAgICAgIF90aGlzMi5wbGF5ZXIuZXZlbnRzLnBhdXNlLm9uKF90aGlzMi5wcm9wcy5vblBhdXNlKTtcbiAgICAgICAgICBfdGhpczIucGxheWVyLmV2ZW50cy5lbmRlZC5vbihfdGhpczIucHJvcHMub25FbmRlZCk7XG4gICAgICAgICAgX3RoaXMyLnBsYXllci5ldmVudHMuZXJyb3Iub24oX3RoaXMyLnByb3BzLmVycm9yKTtcbiAgICAgICAgICBfdGhpczIucGxheWVyLmV2ZW50cy5wcm9ncmVzcy5vbihmdW5jdGlvbiAoc2Vjb25kcywgZHVyYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzMi5jdXJyZW50VGltZSA9IHNlY29uZHM7XG4gICAgICAgICAgICBfdGhpczIuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25SZWFkeSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIHRoaXMucHJvcHMub25FcnJvcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGxheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BsYXknKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXVzZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwYXVzZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N0b3AnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgLy8gTm90aGluZyB0byBkb1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NlZWtUbycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWtUbyhzZWNvbmRzKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NlZWsnLCBzZWNvbmRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRWb2x1bWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUoZnJhY3Rpb24pIHtcbiAgICAgIC8vIE5vIHZvbHVtZSBzdXBwb3J0XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmR1cmF0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEN1cnJlbnRUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50VGltZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTZWNvbmRzTG9hZGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHVybCA9IF9wcm9wcy51cmwsXG4gICAgICAgICAgY29uZmlnID0gX3Byb3BzLmNvbmZpZztcblxuICAgICAgdmFyIGlkID0gdXJsLm1hdGNoKE1BVENIX1VSTClbMV07XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9O1xuICAgICAgdmFyIHF1ZXJ5ID0gKDAsIF91dGlscy5xdWVyeVN0cmluZykoX2V4dGVuZHMoe30sIGNvbmZpZy5taXhjbG91ZC5vcHRpb25zLCB7XG4gICAgICAgIGZlZWQ6ICcvJyArIGlkICsgJy8nXG4gICAgICB9KSk7XG4gICAgICAvLyBXZSBoYXZlIHRvIGdpdmUgdGhlIGlmcmFtZSBhIGtleSBoZXJlIHRvIHByZXZlbnQgYVxuICAgICAgLy8gd2VpcmQgZGlhbG9nIGFwcGVhcmluZyB3aGVuIGxvYWRpbmcgYSBuZXcgdHJhY2tcbiAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnaWZyYW1lJywge1xuICAgICAgICBrZXk6IGlkLFxuICAgICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIHNyYzogJ2h0dHBzOi8vd3d3Lm1peGNsb3VkLmNvbS93aWRnZXQvaWZyYW1lLz8nICsgcXVlcnksXG4gICAgICAgIGZyYW1lQm9yZGVyOiAnMCdcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNaXhjbG91ZDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbk1peGNsb3VkLmRpc3BsYXlOYW1lID0gJ01peGNsb3VkJztcblxuTWl4Y2xvdWQuY2FuUGxheSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgcmV0dXJuIE1BVENIX1VSTC50ZXN0KHVybCk7XG59O1xuXG5NaXhjbG91ZC5sb29wT25FbmRlZCA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSAoMCwgX3NpbmdsZVBsYXllcjJbJ2RlZmF1bHQnXSkoTWl4Y2xvdWQpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRmlsZVBsYXllciA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBJT1MgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lk1TU3RyZWFtO1xudmFyIEFVRElPX0VYVEVOU0lPTlMgPSAvXFwuKG00YXxtcDRhfG1wZ2F8bXAyfG1wMmF8bXAzfG0yYXxtM2F8d2F2fHdlYmF8YWFjfG9nYXxzcHgpKCR8XFw/KS9pO1xudmFyIFZJREVPX0VYVEVOU0lPTlMgPSAvXFwuKG1wNHxvZ1tndl18d2VibXxtb3Z8bTR2KSgkfFxcPykvaTtcbnZhciBITFNfRVhURU5TSU9OUyA9IC9cXC4obTN1OCkoJHxcXD8pL2k7XG52YXIgSExTX1NES19VUkwgPSAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvaGxzLmpzL1ZFUlNJT04vaGxzLm1pbi5qcyc7XG52YXIgSExTX0dMT0JBTCA9ICdIbHMnO1xudmFyIERBU0hfRVhURU5TSU9OUyA9IC9cXC4obXBkKSgkfFxcPykvaTtcbnZhciBEQVNIX1NES19VUkwgPSAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzL1ZFUlNJT04vZGFzaC5hbGwubWluLmpzJztcbnZhciBEQVNIX0dMT0JBTCA9ICdkYXNoanMnO1xudmFyIE1BVENIX0RST1BCT1hfVVJMID0gL3d3d1xcLmRyb3Bib3hcXC5jb21cXC8uKy87XG5cbmZ1bmN0aW9uIGNhblBsYXkodXJsKSB7XG4gIGlmICh1cmwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gdXJsW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICB2YXIgaXRlbSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycgJiYgY2FuUGxheShpdGVtKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYW5QbGF5KGl0ZW0uc3JjKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvclsncmV0dXJuJ10pIHtcbiAgICAgICAgICBfaXRlcmF0b3JbJ3JldHVybiddKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICgoMCwgX3V0aWxzLmlzTWVkaWFTdHJlYW0pKHVybCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gQVVESU9fRVhURU5TSU9OUy50ZXN0KHVybCkgfHwgVklERU9fRVhURU5TSU9OUy50ZXN0KHVybCkgfHwgSExTX0VYVEVOU0lPTlMudGVzdCh1cmwpIHx8IERBU0hfRVhURU5TSU9OUy50ZXN0KHVybCk7XG59XG5cbmZ1bmN0aW9uIGNhbkVuYWJsZVBJUCh1cmwpIHtcbiAgcmV0dXJuIGNhblBsYXkodXJsKSAmJiAhIWRvY3VtZW50LnBpY3R1cmVJblBpY3R1cmVFbmFibGVkICYmICFBVURJT19FWFRFTlNJT05TLnRlc3QodXJsKTtcbn1cblxudmFyIEZpbGVQbGF5ZXIgPSBleHBvcnRzLkZpbGVQbGF5ZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRmlsZVBsYXllciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmlsZVBsYXllcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZVBsYXllcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gRmlsZVBsYXllci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZpbGVQbGF5ZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5vbkRpc2FibGVQSVAgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25EaXNhYmxlUElQID0gX3RoaXMkcHJvcHMub25EaXNhYmxlUElQLFxuICAgICAgICAgIHBsYXlpbmcgPSBfdGhpcyRwcm9wcy5wbGF5aW5nO1xuXG4gICAgICBvbkRpc2FibGVQSVAoZSk7XG4gICAgICBpZiAocGxheWluZykge1xuICAgICAgICBfdGhpcy5wbGF5KCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMub25TZWVrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnByb3BzLm9uU2VlayhlLnRhcmdldC5jdXJyZW50VGltZSk7XG4gICAgfSwgX3RoaXMubXV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnBsYXllci5tdXRlZCA9IHRydWU7XG4gICAgfSwgX3RoaXMudW5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucGxheWVyLm11dGVkID0gZmFsc2U7XG4gICAgfSwgX3RoaXMucmVuZGVyU291cmNlRWxlbWVudCA9IGZ1bmN0aW9uIChzb3VyY2UsIGluZGV4KSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdzb3VyY2UnLCB7IGtleTogaW5kZXgsIHNyYzogc291cmNlIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdzb3VyY2UnLCBfZXh0ZW5kcyh7IGtleTogaW5kZXggfSwgc291cmNlKSk7XG4gICAgfSwgX3RoaXMucmVuZGVyVHJhY2sgPSBmdW5jdGlvbiAodHJhY2ssIGluZGV4KSB7XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3RyYWNrJywgX2V4dGVuZHMoeyBrZXk6IGluZGV4IH0sIHRyYWNrKSk7XG4gICAgfSwgX3RoaXMucmVmID0gZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgX3RoaXMucGxheWVyID0gcGxheWVyO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZpbGVQbGF5ZXIsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKCk7XG4gICAgICBpZiAoSU9TKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmxvYWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnNob3VsZFVzZUF1ZGlvKHRoaXMucHJvcHMpICE9PSB0aGlzLnNob3VsZFVzZUF1ZGlvKG5leHRQcm9wcykpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICBpZiAodGhpcy5zaG91bGRVc2VBdWRpbyh0aGlzLnByb3BzKSAhPT0gdGhpcy5zaG91bGRVc2VBdWRpbyhwcmV2UHJvcHMpKSB7XG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYWRkTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb25SZWFkeSA9IF9wcm9wcy5vblJlYWR5LFxuICAgICAgICAgIG9uUGxheSA9IF9wcm9wcy5vblBsYXksXG4gICAgICAgICAgb25CdWZmZXIgPSBfcHJvcHMub25CdWZmZXIsXG4gICAgICAgICAgb25CdWZmZXJFbmQgPSBfcHJvcHMub25CdWZmZXJFbmQsXG4gICAgICAgICAgb25QYXVzZSA9IF9wcm9wcy5vblBhdXNlLFxuICAgICAgICAgIG9uRW5kZWQgPSBfcHJvcHMub25FbmRlZCxcbiAgICAgICAgICBvbkVycm9yID0gX3Byb3BzLm9uRXJyb3IsXG4gICAgICAgICAgcGxheXNpbmxpbmUgPSBfcHJvcHMucGxheXNpbmxpbmUsXG4gICAgICAgICAgb25FbmFibGVQSVAgPSBfcHJvcHMub25FbmFibGVQSVA7XG5cbiAgICAgIHRoaXMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCBvblJlYWR5KTtcbiAgICAgIHRoaXMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCBvblBsYXkpO1xuICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIG9uQnVmZmVyKTtcbiAgICAgIHRoaXMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCBvbkJ1ZmZlckVuZCk7XG4gICAgICB0aGlzLnBsYXllci5hZGRFdmVudExpc3RlbmVyKCdwYXVzZScsIG9uUGF1c2UpO1xuICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignc2Vla2VkJywgdGhpcy5vblNlZWspO1xuICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBvbkVuZGVkKTtcbiAgICAgIHRoaXMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XG4gICAgICB0aGlzLnBsYXllci5hZGRFdmVudExpc3RlbmVyKCdlbnRlcnBpY3R1cmVpbnBpY3R1cmUnLCBvbkVuYWJsZVBJUCk7XG4gICAgICB0aGlzLnBsYXllci5hZGRFdmVudExpc3RlbmVyKCdsZWF2ZXBpY3R1cmVpbnBpY3R1cmUnLCB0aGlzLm9uRGlzYWJsZVBJUCk7XG4gICAgICBpZiAocGxheXNpbmxpbmUpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsICcnKTtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2V0QXR0cmlidXRlKCd3ZWJraXQtcGxheXNpbmxpbmUnLCAnJyk7XG4gICAgICAgIHRoaXMucGxheWVyLnNldEF0dHJpYnV0ZSgneDUtcGxheXNpbmxpbmUnLCAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG9uUmVhZHkgPSBfcHJvcHMyLm9uUmVhZHksXG4gICAgICAgICAgb25QbGF5ID0gX3Byb3BzMi5vblBsYXksXG4gICAgICAgICAgb25CdWZmZXIgPSBfcHJvcHMyLm9uQnVmZmVyLFxuICAgICAgICAgIG9uQnVmZmVyRW5kID0gX3Byb3BzMi5vbkJ1ZmZlckVuZCxcbiAgICAgICAgICBvblBhdXNlID0gX3Byb3BzMi5vblBhdXNlLFxuICAgICAgICAgIG9uRW5kZWQgPSBfcHJvcHMyLm9uRW5kZWQsXG4gICAgICAgICAgb25FcnJvciA9IF9wcm9wczIub25FcnJvcixcbiAgICAgICAgICBvbkVuYWJsZVBJUCA9IF9wcm9wczIub25FbmFibGVQSVA7XG5cbiAgICAgIHRoaXMucGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCBvblJlYWR5KTtcbiAgICAgIHRoaXMucGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BsYXknLCBvblBsYXkpO1xuICAgICAgdGhpcy5wbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIG9uQnVmZmVyKTtcbiAgICAgIHRoaXMucGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCBvbkJ1ZmZlckVuZCk7XG4gICAgICB0aGlzLnBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdwYXVzZScsIG9uUGF1c2UpO1xuICAgICAgdGhpcy5wbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Vla2VkJywgdGhpcy5vblNlZWspO1xuICAgICAgdGhpcy5wbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBvbkVuZGVkKTtcbiAgICAgIHRoaXMucGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XG4gICAgICB0aGlzLnBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdlbnRlcnBpY3R1cmVpbnBpY3R1cmUnLCBvbkVuYWJsZVBJUCk7XG4gICAgICB0aGlzLnBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdsZWF2ZXBpY3R1cmVpbnBpY3R1cmUnLCB0aGlzLm9uRGlzYWJsZVBJUCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkVXNlQXVkaW8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRVc2VBdWRpbyhwcm9wcykge1xuICAgICAgaWYgKHByb3BzLmNvbmZpZy5maWxlLmZvcmNlVmlkZW8pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLmNvbmZpZy5maWxlLmF0dHJpYnV0ZXMucG9zdGVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gVXNlIDx2aWRlbz4gc28gdGhhdCBwb3N0ZXIgaXMgc2hvd25cbiAgICAgIH1cbiAgICAgIHJldHVybiBBVURJT19FWFRFTlNJT05TLnRlc3QocHJvcHMudXJsKSB8fCBwcm9wcy5jb25maWcuZmlsZS5mb3JjZUF1ZGlvO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZFVzZUhMUycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZFVzZUhMUyh1cmwpIHtcbiAgICAgIHJldHVybiBITFNfRVhURU5TSU9OUy50ZXN0KHVybCkgJiYgIUlPUyB8fCB0aGlzLnByb3BzLmNvbmZpZy5maWxlLmZvcmNlSExTO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZFVzZURBU0gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRVc2VEQVNIKHVybCkge1xuICAgICAgcmV0dXJuIERBU0hfRVhURU5TSU9OUy50ZXN0KHVybCkgfHwgdGhpcy5wcm9wcy5jb25maWcuZmlsZS5mb3JjZURBU0g7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbG9hZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQodXJsKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyRjb25maWckZmlsZSA9IHRoaXMucHJvcHMuY29uZmlnLmZpbGUsXG4gICAgICAgICAgaGxzVmVyc2lvbiA9IF9wcm9wcyRjb25maWckZmlsZS5obHNWZXJzaW9uLFxuICAgICAgICAgIGRhc2hWZXJzaW9uID0gX3Byb3BzJGNvbmZpZyRmaWxlLmRhc2hWZXJzaW9uO1xuXG4gICAgICBpZiAodGhpcy5zaG91bGRVc2VITFModXJsKSkge1xuICAgICAgICAoMCwgX3V0aWxzLmdldFNESykoSExTX1NES19VUkwucmVwbGFjZSgnVkVSU0lPTicsIGhsc1ZlcnNpb24pLCBITFNfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChIbHMpIHtcbiAgICAgICAgICBfdGhpczIuaGxzID0gbmV3IEhscyhfdGhpczIucHJvcHMuY29uZmlnLmZpbGUuaGxzT3B0aW9ucyk7XG4gICAgICAgICAgX3RoaXMyLmhscy5vbihIbHMuRXZlbnRzLkVSUk9SLCBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgX3RoaXMyLnByb3BzLm9uRXJyb3IoZSwgZGF0YSwgX3RoaXMyLmhscywgSGxzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBfdGhpczIuaGxzLmxvYWRTb3VyY2UodXJsKTtcbiAgICAgICAgICBfdGhpczIuaGxzLmF0dGFjaE1lZGlhKF90aGlzMi5wbGF5ZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNob3VsZFVzZURBU0godXJsKSkge1xuICAgICAgICAoMCwgX3V0aWxzLmdldFNESykoREFTSF9TREtfVVJMLnJlcGxhY2UoJ1ZFUlNJT04nLCBkYXNoVmVyc2lvbiksIERBU0hfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChkYXNoanMpIHtcbiAgICAgICAgICBfdGhpczIuZGFzaCA9IGRhc2hqcy5NZWRpYVBsYXllcigpLmNyZWF0ZSgpO1xuICAgICAgICAgIF90aGlzMi5kYXNoLmluaXRpYWxpemUoX3RoaXMyLnBsYXllciwgdXJsLCBfdGhpczIucHJvcHMucGxheWluZyk7XG4gICAgICAgICAgX3RoaXMyLmRhc2guZ2V0RGVidWcoKS5zZXRMb2dUb0Jyb3dzZXJDb25zb2xlKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh1cmwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAvLyBXaGVuIHNldHRpbmcgbmV3IHVybHMgKDxzb3VyY2U+KSBvbiBhbiBhbHJlYWR5IGxvYWRlZCB2aWRlbyxcbiAgICAgICAgLy8gSFRNTE1lZGlhRWxlbWVudC5sb2FkKCkgaXMgbmVlZGVkIHRvIHJlc2V0IHRoZSBtZWRpYSBlbGVtZW50XG4gICAgICAgIC8vIGFuZCByZXN0YXJ0IHRoZSBtZWRpYSByZXNvdXJjZS4gSnVzdCByZXBsYWNpbmcgY2hpbGRyZW4gc291cmNlXG4gICAgICAgIC8vIGRvbSBub2RlcyBpcyBub3QgZW5vdWdoXG4gICAgICAgIHRoaXMucGxheWVyLmxvYWQoKTtcbiAgICAgIH0gZWxzZSBpZiAoKDAsIF91dGlscy5pc01lZGlhU3RyZWFtKSh1cmwpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIuc3JjT2JqZWN0ID0gdXJsO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIuc3JjID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwodXJsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BsYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdmFyIHByb21pc2UgPSB0aGlzLnBsYXllci5wbGF5KCk7XG4gICAgICBpZiAocHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlWydjYXRjaCddKHRoaXMucHJvcHMub25FcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGF1c2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIHRoaXMucGxheWVyLnBhdXNlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLnBsYXllci5yZW1vdmVBdHRyaWJ1dGUoJ3NyYycpO1xuICAgICAgaWYgKHRoaXMuaGxzKSB7XG4gICAgICAgIHRoaXMuaGxzLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmRhc2gpIHtcbiAgICAgICAgdGhpcy5kYXNoLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMucGxheWVyLmN1cnJlbnRUaW1lID0gc2Vjb25kcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRWb2x1bWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUoZnJhY3Rpb24pIHtcbiAgICAgIHRoaXMucGxheWVyLnZvbHVtZSA9IGZyYWN0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZVBJUCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZVBJUCgpIHtcbiAgICAgIGlmICh0aGlzLnBsYXllci5yZXF1ZXN0UGljdHVyZUluUGljdHVyZSAmJiBkb2N1bWVudC5waWN0dXJlSW5QaWN0dXJlRWxlbWVudCAhPT0gdGhpcy5wbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIucmVxdWVzdFBpY3R1cmVJblBpY3R1cmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNhYmxlUElQJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZVBJUCgpIHtcbiAgICAgIGlmIChkb2N1bWVudC5leGl0UGljdHVyZUluUGljdHVyZSAmJiBkb2N1bWVudC5waWN0dXJlSW5QaWN0dXJlRWxlbWVudCA9PT0gdGhpcy5wbGF5ZXIpIHtcbiAgICAgICAgZG9jdW1lbnQuZXhpdFBpY3R1cmVJblBpY3R1cmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRQbGF5YmFja1JhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQbGF5YmFja1JhdGUocmF0ZSkge1xuICAgICAgdGhpcy5wbGF5ZXIucGxheWJhY2tSYXRlID0gcmF0ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXREdXJhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgX3BsYXllciA9IHRoaXMucGxheWVyLFxuICAgICAgICAgIGR1cmF0aW9uID0gX3BsYXllci5kdXJhdGlvbixcbiAgICAgICAgICBzZWVrYWJsZSA9IF9wbGF5ZXIuc2Vla2FibGU7XG4gICAgICAvLyBvbiBpT1MsIGxpdmUgc3RyZWFtcyByZXR1cm4gSW5maW5pdHkgZm9yIHRoZSBkdXJhdGlvblxuICAgICAgLy8gc28gaW5zdGVhZCB3ZSB1c2UgdGhlIGVuZCBvZiB0aGUgc2Vla2FibGUgdGltZXJhbmdlXG5cbiAgICAgIGlmIChkdXJhdGlvbiA9PT0gSW5maW5pdHkgJiYgc2Vla2FibGUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gc2Vla2FibGUuZW5kKHNlZWthYmxlLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGR1cmF0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEN1cnJlbnRUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICBpZiAoIXRoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLnBsYXllci5jdXJyZW50VGltZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTZWNvbmRzTG9hZGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIGlmICghdGhpcy5wbGF5ZXIpIHJldHVybiBudWxsO1xuICAgICAgdmFyIGJ1ZmZlcmVkID0gdGhpcy5wbGF5ZXIuYnVmZmVyZWQ7XG5cbiAgICAgIGlmIChidWZmZXJlZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICB2YXIgZW5kID0gYnVmZmVyZWQuZW5kKGJ1ZmZlcmVkLmxlbmd0aCAtIDEpO1xuICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuICAgICAgaWYgKGVuZCA+IGR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBkdXJhdGlvbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbmQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U291cmNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U291cmNlKHVybCkge1xuICAgICAgdmFyIHVzZUhMUyA9IHRoaXMuc2hvdWxkVXNlSExTKHVybCk7XG4gICAgICB2YXIgdXNlREFTSCA9IHRoaXMuc2hvdWxkVXNlREFTSCh1cmwpO1xuICAgICAgaWYgKHVybCBpbnN0YW5jZW9mIEFycmF5IHx8ICgwLCBfdXRpbHMuaXNNZWRpYVN0cmVhbSkodXJsKSB8fCB1c2VITFMgfHwgdXNlREFTSCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKE1BVENIX0RST1BCT1hfVVJMLnRlc3QodXJsKSkge1xuICAgICAgICByZXR1cm4gdXJsLnJlcGxhY2UoJ3d3dy5kcm9wYm94LmNvbScsICdkbC5kcm9wYm94dXNlcmNvbnRlbnQuY29tJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB1cmwgPSBfcHJvcHMzLnVybCxcbiAgICAgICAgICBwbGF5aW5nID0gX3Byb3BzMy5wbGF5aW5nLFxuICAgICAgICAgIGxvb3AgPSBfcHJvcHMzLmxvb3AsXG4gICAgICAgICAgY29udHJvbHMgPSBfcHJvcHMzLmNvbnRyb2xzLFxuICAgICAgICAgIG11dGVkID0gX3Byb3BzMy5tdXRlZCxcbiAgICAgICAgICBjb25maWcgPSBfcHJvcHMzLmNvbmZpZyxcbiAgICAgICAgICB3aWR0aCA9IF9wcm9wczMud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gX3Byb3BzMy5oZWlnaHQ7XG5cbiAgICAgIHZhciB1c2VBdWRpbyA9IHRoaXMuc2hvdWxkVXNlQXVkaW8odGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudCA9IHVzZUF1ZGlvID8gJ2F1ZGlvJyA6ICd2aWRlbyc7XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCA9PT0gJ2F1dG8nID8gd2lkdGggOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0ID09PSAnYXV0bycgPyBoZWlnaHQgOiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIEVsZW1lbnQsXG4gICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgICAgIHNyYzogdGhpcy5nZXRTb3VyY2UodXJsKSxcbiAgICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgICAgcHJlbG9hZDogJ2F1dG8nLFxuICAgICAgICAgIGF1dG9QbGF5OiBwbGF5aW5nIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICBjb250cm9sczogY29udHJvbHMsXG4gICAgICAgICAgbXV0ZWQ6IG11dGVkLFxuICAgICAgICAgIGxvb3A6IGxvb3BcbiAgICAgICAgfSwgY29uZmlnLmZpbGUuYXR0cmlidXRlcyksXG4gICAgICAgIHVybCBpbnN0YW5jZW9mIEFycmF5ICYmIHVybC5tYXAodGhpcy5yZW5kZXJTb3VyY2VFbGVtZW50KSxcbiAgICAgICAgY29uZmlnLmZpbGUudHJhY2tzLm1hcCh0aGlzLnJlbmRlclRyYWNrKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRmlsZVBsYXllcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkZpbGVQbGF5ZXIuZGlzcGxheU5hbWUgPSAnRmlsZVBsYXllcic7XG5GaWxlUGxheWVyLmNhblBsYXkgPSBjYW5QbGF5O1xuRmlsZVBsYXllci5jYW5FbmFibGVQSVAgPSBjYW5FbmFibGVQSVA7XG5leHBvcnRzWydkZWZhdWx0J10gPSAoMCwgX3NpbmdsZVBsYXllcjJbJ2RlZmF1bHQnXSkoRmlsZVBsYXllcik7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1lvdVR1YmUgPSByZXF1aXJlKCcuL1lvdVR1YmUnKTtcblxudmFyIF9Tb3VuZENsb3VkID0gcmVxdWlyZSgnLi9Tb3VuZENsb3VkJyk7XG5cbnZhciBfVmltZW8gPSByZXF1aXJlKCcuL1ZpbWVvJyk7XG5cbnZhciBfRmFjZWJvb2sgPSByZXF1aXJlKCcuL0ZhY2Vib29rJyk7XG5cbnZhciBfU3RyZWFtYWJsZSA9IHJlcXVpcmUoJy4vU3RyZWFtYWJsZScpO1xuXG52YXIgX1dpc3RpYSA9IHJlcXVpcmUoJy4vV2lzdGlhJyk7XG5cbnZhciBfVHdpdGNoID0gcmVxdWlyZSgnLi9Ud2l0Y2gnKTtcblxudmFyIF9EYWlseU1vdGlvbiA9IHJlcXVpcmUoJy4vRGFpbHlNb3Rpb24nKTtcblxudmFyIF9NaXhjbG91ZCA9IHJlcXVpcmUoJy4vTWl4Y2xvdWQnKTtcblxudmFyIF9GaWxlUGxheWVyID0gcmVxdWlyZSgnLi9GaWxlUGxheWVyJyk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFtfWW91VHViZS5Zb3VUdWJlLCBfU291bmRDbG91ZC5Tb3VuZENsb3VkLCBfVmltZW8uVmltZW8sIF9GYWNlYm9vay5GYWNlYm9vaywgX1N0cmVhbWFibGUuU3RyZWFtYWJsZSwgX1dpc3RpYS5XaXN0aWEsIF9Ud2l0Y2guVHdpdGNoLCBfRGFpbHlNb3Rpb24uRGFpbHlNb3Rpb24sIF9NaXhjbG91ZC5NaXhjbG91ZCwgX0ZpbGVQbGF5ZXIuRmlsZVBsYXllcl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSUNPTl9TSVpFID0gJzY0cHgnO1xuXG52YXIgUHJldmlldyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQcmV2aWV3LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcmV2aWV3KCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcmV2aWV3KTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBQcmV2aWV3Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUHJldmlldykpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLm1vdW50ZWQgPSBmYWxzZSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBpbWFnZTogbnVsbFxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFByZXZpZXcsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgICB0aGlzLmZldGNoSW1hZ2UodGhpcy5wcm9wcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB1cmwgPSBfcHJvcHMudXJsLFxuICAgICAgICAgIGxpZ2h0ID0gX3Byb3BzLmxpZ2h0O1xuXG4gICAgICBpZiAodXJsICE9PSBuZXh0UHJvcHMudXJsIHx8IGxpZ2h0ICE9PSBuZXh0UHJvcHMubGlnaHQpIHtcbiAgICAgICAgdGhpcy5mZXRjaEltYWdlKG5leHRQcm9wcyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2ZldGNoSW1hZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaEltYWdlKF9yZWYyKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHVybCA9IF9yZWYyLnVybCxcbiAgICAgICAgICBsaWdodCA9IF9yZWYyLmxpZ2h0O1xuXG4gICAgICBpZiAodHlwZW9mIGxpZ2h0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaW1hZ2U6IGxpZ2h0IH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaW1hZ2U6IG51bGwgfSk7XG4gICAgICByZXR1cm4gd2luZG93LmZldGNoKCdodHRwczovL25vZW1iZWQuY29tL2VtYmVkP3VybD0nICsgdXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YS50aHVtYm5haWxfdXJsICYmIF90aGlzMi5tb3VudGVkKSB7XG4gICAgICAgICAgdmFyIGltYWdlID0gZGF0YS50aHVtYm5haWxfdXJsLnJlcGxhY2UoJ2hlaWdodD0xMDAnLCAnaGVpZ2h0PTQ4MCcpO1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7IGltYWdlOiBpbWFnZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIG9uQ2xpY2sgPSB0aGlzLnByb3BzLm9uQ2xpY2s7XG4gICAgICB2YXIgaW1hZ2UgPSB0aGlzLnN0YXRlLmltYWdlO1xuXG4gICAgICB2YXIgZmxleENlbnRlciA9IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gICAgICB9O1xuICAgICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgICAgcHJldmlldzogX2V4dGVuZHMoe1xuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBpbWFnZSA/ICd1cmwoJyArIGltYWdlICsgJyknIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY292ZXInLFxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJ2NlbnRlcicsXG4gICAgICAgICAgY3Vyc29yOiAncG9pbnRlcidcbiAgICAgICAgfSwgZmxleENlbnRlciksXG4gICAgICAgIHNoYWRvdzogX2V4dGVuZHMoe1xuICAgICAgICAgIGJhY2tncm91bmQ6ICdyYWRpYWwtZ3JhZGllbnQocmdiKDAsIDAsIDAsIDAuMyksIHJnYmEoMCwgMCwgMCwgMCkgNjAlKScsXG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiBJQ09OX1NJWkUsXG4gICAgICAgICAgd2lkdGg6IElDT05fU0laRSxcbiAgICAgICAgICBoZWlnaHQ6IElDT05fU0laRVxuICAgICAgICB9LCBmbGV4Q2VudGVyKSxcbiAgICAgICAgcGxheUljb246IHtcbiAgICAgICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICAgICAgICBib3JkZXJXaWR0aDogJzE2cHggMCAxNnB4IDI2cHgnLFxuICAgICAgICAgIGJvcmRlckNvbG9yOiAndHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgd2hpdGUnLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6ICc3cHgnXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMucHJldmlldywgY2xhc3NOYW1lOiAncmVhY3QtcGxheWVyX19wcmV2aWV3Jywgb25DbGljazogb25DbGljayB9LFxuICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc2hhZG93LCBjbGFzc05hbWU6ICdyZWFjdC1wbGF5ZXJfX3NoYWRvdycgfSxcbiAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnBsYXlJY29uLCBjbGFzc05hbWU6ICdyZWFjdC1wbGF5ZXJfX3BsYXktaWNvbicgfSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJldmlldztcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFByZXZpZXc7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gcmVuZGVyUHJlbG9hZFBsYXllcnM7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9QbGF5ZXIgPSByZXF1aXJlKCcuL1BsYXllcicpO1xuXG52YXIgX1BsYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QbGF5ZXIpO1xuXG52YXIgX1lvdVR1YmUgPSByZXF1aXJlKCcuL3BsYXllcnMvWW91VHViZScpO1xuXG52YXIgX1NvdW5kQ2xvdWQgPSByZXF1aXJlKCcuL3BsYXllcnMvU291bmRDbG91ZCcpO1xuXG52YXIgX1ZpbWVvID0gcmVxdWlyZSgnLi9wbGF5ZXJzL1ZpbWVvJyk7XG5cbnZhciBfRGFpbHlNb3Rpb24gPSByZXF1aXJlKCcuL3BsYXllcnMvRGFpbHlNb3Rpb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgUFJFTE9BRF9QTEFZRVJTID0gW3tcbiAgUGxheWVyOiBfWW91VHViZS5Zb3VUdWJlLFxuICBjb25maWdLZXk6ICd5b3V0dWJlJyxcbiAgdXJsOiAnaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1HbENtQUM0TUhlaydcbn0sIHtcbiAgUGxheWVyOiBfU291bmRDbG91ZC5Tb3VuZENsb3VkLFxuICBjb25maWdLZXk6ICdzb3VuZGNsb3VkJyxcbiAgdXJsOiAnaHR0cHM6Ly9zb3VuZGNsb3VkLmNvbS9zZXVjaGV1L2pvaG4tY2FnZS00MzMtOC1iaXQtdmVyc2lvbidcbn0sIHtcbiAgUGxheWVyOiBfVmltZW8uVmltZW8sXG4gIGNvbmZpZ0tleTogJ3ZpbWVvJyxcbiAgdXJsOiAnaHR0cHM6Ly92aW1lby5jb20vMzAwOTcwNTA2J1xufSwge1xuICBQbGF5ZXI6IF9EYWlseU1vdGlvbi5EYWlseU1vdGlvbixcbiAgY29uZmlnS2V5OiAnZGFpbHltb3Rpb24nLFxuICB1cmw6ICdodHRwOi8vd3d3LmRhaWx5bW90aW9uLmNvbS92aWRlby94cWRweWsnXG59XTtcblxuZnVuY3Rpb24gcmVuZGVyUHJlbG9hZFBsYXllcnModXJsLCBjb250cm9scywgY29uZmlnKSB7XG4gIHZhciBwbGF5ZXJzID0gW107XG5cbiAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gUFJFTE9BRF9QTEFZRVJTW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgdmFyIHBsYXllciA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICBpZiAoIXBsYXllci5QbGF5ZXIuY2FuUGxheSh1cmwpICYmIGNvbmZpZ1twbGF5ZXIuY29uZmlnS2V5XS5wcmVsb2FkKSB7XG4gICAgICAgIHBsYXllcnMucHVzaChfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfUGxheWVyMlsnZGVmYXVsdCddLCB7XG4gICAgICAgICAga2V5OiBwbGF5ZXIuUGxheWVyLmRpc3BsYXlOYW1lLFxuICAgICAgICAgIGFjdGl2ZVBsYXllcjogcGxheWVyLlBsYXllcixcbiAgICAgICAgICB1cmw6IHBsYXllci51cmwsXG4gICAgICAgICAgY29udHJvbHM6IGNvbnRyb2xzLFxuICAgICAgICAgIHBsYXlpbmc6IHRydWUsXG4gICAgICAgICAgbXV0ZWQ6IHRydWUsXG4gICAgICAgICAgc3R5bGU6IHsgZGlzcGxheTogJ25vbmUnIH1cbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yWydyZXR1cm4nXSkge1xuICAgICAgICBfaXRlcmF0b3JbJ3JldHVybiddKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGxheWVycztcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBJY29uIGZyb20gXCIuL0ljb25cIjtcclxuXHJcbmNvbnN0IENvbnRyb2xzID0gKHtcclxuICBvblBsYXlQYXVzZUNsaWNrLFxyXG4gIHBsYXlpbmcsXHJcbiAgb25SZXNlbGVjdEZpbGUsXHJcbiAgcHJvY2Vzc2luZyxcclxuICBvbkVuY29kZSxcclxuICBzaG93RW5jb2RlQnRuLFxyXG4gIGNhbkRvd25sb2FkLFxyXG4gIG9uRG93bmxvYWQsXHJcbiAgZnJhbWVDdXJyZW50WCxcclxuICBmcmFtZUN1cnJlbnRXaWR0aCxcclxuICBmcmFtZUN1cnJlbnRQbGF5ZWRYXHJcbn0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJydnQtY29udHJvbHMtY29udFwiPlxyXG5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWRlb1NlbGVjdGVkVGltZUZyYW1lQ29udGFpbmVyXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWRlb1NlbGVjdGVkVGltZUZyYW1lQ29udGFpbmVyQ3VycmVudFwiIHN0eWxlPXt7XHJcbiAgICAgICAgICAgIGxlZnQ6IGAke2ZyYW1lQ3VycmVudFh9JWAsXHJcbiAgICAgICAgICAgIHdpZHRoOiBgJHtmcmFtZUN1cnJlbnRXaWR0aH0lYFxyXG4gICAgICAgICAgfX0+PC9kaXY+XHJcblxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWRlb1NlbGVjdGVkVGltZUZyYW1lQ29udGFpbmVyQ3VycmVudFBsYXllZFwiIHN0eWxlPXt7XHJcbiAgICAgICAgICAgIGxlZnQ6IGAke2ZyYW1lQ3VycmVudFBsYXllZFh9JWAsXHJcbiAgICAgICAgICB9fT48L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcblxyXG5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJweC0yIHBiLTBcIj5cclxuICAgICAgICA8YVxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwicnZ0LWNvbnRyb2xsZXItaXRlbVwiXHJcbiAgICAgICAgICB0aXRsZT1cIlBhdXNlXCJcclxuICAgICAgICAgIG9uQ2xpY2s9e29uUGxheVBhdXNlQ2xpY2t9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPEljb24gbmFtZT17cGxheWluZyA/IFwicGF1c2VcIiA6IFwicGxheVwifSAvPlxyXG4gICAgICAgIDwvYT5cclxuXHJcbiAgICAgICAge3Nob3dFbmNvZGVCdG4gJiYgKFxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJydnQtY29udHJvbGxlci1kcm9wZG93biBydnQtY29udHJvbGxlci1saXN0LXdyYXBcIj5cclxuICAgICAgICAgICAge2NhbkRvd25sb2FkID8gKFxyXG4gICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cInJ2dC1jb250cm9sbGVyLWl0ZW1cIiBvbkNsaWNrPXtvbkRvd25sb2FkfT5cclxuICAgICAgICAgICAgICAgIDxJY29uIG5hbWU9XCJkb3dubG9hZFwiIC8+XHJcbiAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cInJ2dC1jb250cm9sbGVyLWl0ZW1cIiBvbkNsaWNrPXtvbkVuY29kZX0+XHJcbiAgICAgICAgICAgICAgICA8SWNvbiBuYW1lPXtwcm9jZXNzaW5nID8gXCJzcGluXCIgOiBcInJlcGxheVwifSAvPlxyXG4gICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xzO1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkZpbGVQbGF5ZXIgPSBleHBvcnRzLk1peGNsb3VkID0gZXhwb3J0cy5EYWlseU1vdGlvbiA9IGV4cG9ydHMuVHdpdGNoID0gZXhwb3J0cy5XaXN0aWEgPSBleHBvcnRzLlN0cmVhbWFibGUgPSBleHBvcnRzLkZhY2Vib29rID0gZXhwb3J0cy5WaW1lbyA9IGV4cG9ydHMuU291bmRDbG91ZCA9IGV4cG9ydHMuWW91VHViZSA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9Zb3VUdWJlID0gcmVxdWlyZSgnLi9wbGF5ZXJzL1lvdVR1YmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdZb3VUdWJlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfWW91VHViZSlbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfU291bmRDbG91ZCA9IHJlcXVpcmUoJy4vcGxheWVycy9Tb3VuZENsb3VkJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU291bmRDbG91ZCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NvdW5kQ2xvdWQpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX1ZpbWVvID0gcmVxdWlyZSgnLi9wbGF5ZXJzL1ZpbWVvJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnVmltZW8nLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9WaW1lbylbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfRmFjZWJvb2sgPSByZXF1aXJlKCcuL3BsYXllcnMvRmFjZWJvb2snKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdGYWNlYm9vaycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ZhY2Vib29rKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9TdHJlYW1hYmxlID0gcmVxdWlyZSgnLi9wbGF5ZXJzL1N0cmVhbWFibGUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTdHJlYW1hYmxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3RyZWFtYWJsZSlbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfV2lzdGlhID0gcmVxdWlyZSgnLi9wbGF5ZXJzL1dpc3RpYScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1dpc3RpYScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1dpc3RpYSlbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfVHdpdGNoID0gcmVxdWlyZSgnLi9wbGF5ZXJzL1R3aXRjaCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1R3aXRjaCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1R3aXRjaClbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfRGFpbHlNb3Rpb24gPSByZXF1aXJlKCcuL3BsYXllcnMvRGFpbHlNb3Rpb24nKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdEYWlseU1vdGlvbicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RhaWx5TW90aW9uKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9NaXhjbG91ZCA9IHJlcXVpcmUoJy4vcGxheWVycy9NaXhjbG91ZCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ01peGNsb3VkJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWl4Y2xvdWQpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX0ZpbGVQbGF5ZXIgPSByZXF1aXJlKCcuL3BsYXllcnMvRmlsZVBsYXllcicpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0ZpbGVQbGF5ZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9GaWxlUGxheWVyKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BzMiA9IHJlcXVpcmUoJy4vcHJvcHMnKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIF9wbGF5ZXJzID0gcmVxdWlyZSgnLi9wbGF5ZXJzJyk7XG5cbnZhciBfcGxheWVyczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF5ZXJzKTtcblxudmFyIF9QbGF5ZXI0ID0gcmVxdWlyZSgnLi9QbGF5ZXInKTtcblxudmFyIF9QbGF5ZXI1ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGxheWVyNCk7XG5cbnZhciBfUHJldmlldyA9IHJlcXVpcmUoJy4vUHJldmlldycpO1xuXG52YXIgX1ByZXZpZXcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHJldmlldyk7XG5cbnZhciBfcHJlbG9hZCA9IHJlcXVpcmUoJy4vcHJlbG9hZCcpO1xuXG52YXIgX3ByZWxvYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlbG9hZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNVUFBPUlRFRF9QUk9QUyA9IE9iamVjdC5rZXlzKF9wcm9wczIucHJvcFR5cGVzKTtcblxudmFyIGN1c3RvbVBsYXllcnMgPSBbXTtcblxudmFyIFJlYWN0UGxheWVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlYWN0UGxheWVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWFjdFBsYXllcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVhY3RQbGF5ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IFJlYWN0UGxheWVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmVhY3RQbGF5ZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jb25maWcgPSAoMCwgX3V0aWxzLmdldENvbmZpZykoX3RoaXMucHJvcHMsIF9wcm9wczIuZGVmYXVsdFByb3BzLCB0cnVlKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzaG93UHJldmlldzogISFfdGhpcy5wcm9wcy5saWdodFxuICAgIH0sIF90aGlzLm9uQ2xpY2tQcmV2aWV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBzaG93UHJldmlldzogZmFsc2UgfSk7XG4gICAgfSwgX3RoaXMuZ2V0RHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gX3RoaXMucGxheWVyLmdldER1cmF0aW9uKCk7XG4gICAgfSwgX3RoaXMuZ2V0Q3VycmVudFRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gX3RoaXMucGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XG4gICAgfSwgX3RoaXMuZ2V0U2Vjb25kc0xvYWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBfdGhpcy5wbGF5ZXIuZ2V0U2Vjb25kc0xvYWRlZCgpO1xuICAgIH0sIF90aGlzLmdldEludGVybmFsUGxheWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3BsYXllcic7XG5cbiAgICAgIGlmICghX3RoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBfdGhpcy5wbGF5ZXIuZ2V0SW50ZXJuYWxQbGF5ZXIoa2V5KTtcbiAgICB9LCBfdGhpcy5zZWVrVG8gPSBmdW5jdGlvbiAoZnJhY3Rpb24sIHR5cGUpIHtcbiAgICAgIGlmICghX3RoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgIF90aGlzLnBsYXllci5zZWVrVG8oZnJhY3Rpb24sIHR5cGUpO1xuICAgIH0sIF90aGlzLm9uUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5wcm9wcy5vblJlYWR5KF90aGlzKTtcbiAgICB9LCBfdGhpcy53cmFwcGVyUmVmID0gZnVuY3Rpb24gKHdyYXBwZXIpIHtcbiAgICAgIF90aGlzLndyYXBwZXIgPSB3cmFwcGVyO1xuICAgIH0sIF90aGlzLmFjdGl2ZVBsYXllclJlZiA9IGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgIF90aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZWFjdFBsYXllciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMucHJvZ3Jlc3NGcmVxdWVuY3kpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSAnUmVhY3RQbGF5ZXI6ICVjcHJvZ3Jlc3NGcmVxdWVuY3klYyBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlICVjcHJvZ3Jlc3NJbnRlcnZhbCVjIGluc3RlYWQnO1xuICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSwgJ2ZvbnQtd2VpZ2h0OiBib2xkJywgJycsICdmb250LXdlaWdodDogYm9sZCcsICcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzaG91bGRDb21wb25lbnRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgIHJldHVybiAhKDAsIF91dGlscy5pc0VxdWFsKSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8ICEoMCwgX3V0aWxzLmlzRXF1YWwpKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgICB0aGlzLmNvbmZpZyA9ICgwLCBfdXRpbHMuZ2V0Q29uZmlnKShuZXh0UHJvcHMsIF9wcm9wczIuZGVmYXVsdFByb3BzKTtcbiAgICAgIGlmICghdGhpcy5wcm9wcy5saWdodCAmJiBuZXh0UHJvcHMubGlnaHQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dQcmV2aWV3OiB0cnVlIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEFjdGl2ZVBsYXllcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFjdGl2ZVBsYXllcih1cmwpIHtcbiAgICAgIHZhciBfYXJyID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjdXN0b21QbGF5ZXJzKSwgX3RvQ29uc3VtYWJsZUFycmF5KF9wbGF5ZXJzMlsnZGVmYXVsdCddKSk7XG5cbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBfYXJyLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgX1BsYXllciA9IF9hcnJbX2ldO1xuICAgICAgICBpZiAoX1BsYXllci5jYW5QbGF5KHVybCkpIHtcbiAgICAgICAgICByZXR1cm4gX1BsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRmFsbCBiYWNrIHRvIEZpbGVQbGF5ZXIgaWYgbm90aGluZyBlbHNlIGNhbiBwbGF5IHRoZSBVUkxcbiAgICAgIHJldHVybiBfRmlsZVBsYXllci5GaWxlUGxheWVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlckFjdGl2ZVBsYXllcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckFjdGl2ZVBsYXllcih1cmwsIGFjdGl2ZVBsYXllcikge1xuICAgICAgaWYgKCF1cmwpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9QbGF5ZXI1WydkZWZhdWx0J10sIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7XG4gICAgICAgIGtleTogYWN0aXZlUGxheWVyLmRpc3BsYXlOYW1lLFxuICAgICAgICByZWY6IHRoaXMuYWN0aXZlUGxheWVyUmVmLFxuICAgICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgICBhY3RpdmVQbGF5ZXI6IGFjdGl2ZVBsYXllcixcbiAgICAgICAgb25SZWFkeTogdGhpcy5vblJlYWR5XG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc29ydFBsYXllcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzb3J0UGxheWVycyhhLCBiKSB7XG4gICAgICAvLyBSZXRhaW4gcGxheWVyIG9yZGVyIHRvIHByZXZlbnQgd2VpcmQgaWZyYW1lIGJlaGF2aW91ciB3aGVuIHN3aXRjaGluZyBwbGF5ZXJzXG4gICAgICBpZiAoYSAmJiBiKSB7XG4gICAgICAgIHJldHVybiBhLmtleSA8IGIua2V5ID8gLTEgOiAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgdXJsID0gX3Byb3BzLnVybCxcbiAgICAgICAgICBjb250cm9scyA9IF9wcm9wcy5jb250cm9scyxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgICB3aWR0aCA9IF9wcm9wcy53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBfcHJvcHMuaGVpZ2h0LFxuICAgICAgICAgIGxpZ2h0ID0gX3Byb3BzLmxpZ2h0LFxuICAgICAgICAgIFdyYXBwZXIgPSBfcHJvcHMud3JhcHBlcjtcblxuICAgICAgdmFyIHNob3dQcmV2aWV3ID0gdGhpcy5zdGF0ZS5zaG93UHJldmlldyAmJiB1cmw7XG4gICAgICB2YXIgb3RoZXJQcm9wcyA9ICgwLCBfdXRpbHMub21pdCkodGhpcy5wcm9wcywgU1VQUE9SVEVEX1BST1BTLCBfcHJvcHMyLkRFUFJFQ0FURURfQ09ORklHX1BST1BTKTtcbiAgICAgIHZhciBhY3RpdmVQbGF5ZXIgPSB0aGlzLmdldEFjdGl2ZVBsYXllcih1cmwpO1xuICAgICAgdmFyIHJlbmRlcmVkQWN0aXZlUGxheWVyID0gdGhpcy5yZW5kZXJBY3RpdmVQbGF5ZXIodXJsLCBhY3RpdmVQbGF5ZXIpO1xuICAgICAgdmFyIHByZWxvYWRQbGF5ZXJzID0gKDAsIF9wcmVsb2FkMlsnZGVmYXVsdCddKSh1cmwsIGNvbnRyb2xzLCB0aGlzLmNvbmZpZyk7XG4gICAgICB2YXIgcGxheWVycyA9IFtyZW5kZXJlZEFjdGl2ZVBsYXllcl0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwcmVsb2FkUGxheWVycykpLnNvcnQodGhpcy5zb3J0UGxheWVycyk7XG4gICAgICB2YXIgcHJldmlldyA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9QcmV2aWV3MlsnZGVmYXVsdCddLCB7IHVybDogdXJsLCBsaWdodDogbGlnaHQsIG9uQ2xpY2s6IHRoaXMub25DbGlja1ByZXZpZXcgfSk7XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFdyYXBwZXIsXG4gICAgICAgIF9leHRlbmRzKHsgcmVmOiB0aGlzLndyYXBwZXJSZWYsIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGUsIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9KSB9LCBvdGhlclByb3BzKSxcbiAgICAgICAgc2hvd1ByZXZpZXcgPyBwcmV2aWV3IDogcGxheWVyc1xuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVhY3RQbGF5ZXI7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5SZWFjdFBsYXllci5hZGRDdXN0b21QbGF5ZXIgPSBmdW5jdGlvbiAocGxheWVyKSB7XG4gIGN1c3RvbVBsYXllcnMucHVzaChwbGF5ZXIpO1xufTtcblxuUmVhY3RQbGF5ZXIucmVtb3ZlQ3VzdG9tUGxheWVycyA9IGZ1bmN0aW9uICgpIHtcbiAgY3VzdG9tUGxheWVycyA9IFtdO1xufTtcblxuUmVhY3RQbGF5ZXIuZGlzcGxheU5hbWUgPSAnUmVhY3RQbGF5ZXInO1xuUmVhY3RQbGF5ZXIucHJvcFR5cGVzID0gX3Byb3BzMi5wcm9wVHlwZXM7XG5SZWFjdFBsYXllci5kZWZhdWx0UHJvcHMgPSBfcHJvcHMyLmRlZmF1bHRQcm9wcztcblxuUmVhY3RQbGF5ZXIuY2FuUGxheSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgdmFyIF9hcnIyID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjdXN0b21QbGF5ZXJzKSwgX3RvQ29uc3VtYWJsZUFycmF5KF9wbGF5ZXJzMlsnZGVmYXVsdCddKSk7XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgX2FycjIubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBfUGxheWVyMiA9IF9hcnIyW19pMl07XG4gICAgaWYgKF9QbGF5ZXIyLmNhblBsYXkodXJsKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblJlYWN0UGxheWVyLmNhbkVuYWJsZVBJUCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgdmFyIF9hcnIzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjdXN0b21QbGF5ZXJzKSwgX3RvQ29uc3VtYWJsZUFycmF5KF9wbGF5ZXJzMlsnZGVmYXVsdCddKSk7XG5cbiAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgX2FycjMubGVuZ3RoOyBfaTMrKykge1xuICAgIHZhciBfUGxheWVyMyA9IF9hcnIzW19pM107XG4gICAgaWYgKF9QbGF5ZXIzLmNhbkVuYWJsZVBJUCAmJiBfUGxheWVyMy5jYW5FbmFibGVQSVAodXJsKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFJlYWN0UGxheWVyOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFJlYWN0UGxheWVyIGZyb20gXCJyZWFjdC1wbGF5ZXJcIjtcclxuaW1wb3J0IHsgZm9ybWF0U2Vjb25kcywgbm9vcCwgbGVmdFplcm8gfSBmcm9tIFwiLi4vbGlicy91dGlsc1wiO1xyXG5cclxuY2xhc3MgUGxheWVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBzdGF0ZSA9IHtcclxuICAgIHBsYXlpbmc6IHRoaXMucHJvcHMucGxheVZpZGVvIHx8IGZhbHNlXHJcbiAgfTtcclxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzKSB7XHJcbiAgICBjb25zdCBuZXdUaW1lUmFuZ2UgPSBuZXdQcm9wcy50aW1lUmFuZ2U7XHJcbiAgICBjb25zdCBvbGRUaW1lUmFuZ2UgPSB0aGlzLnByb3BzLnRpbWVSYW5nZTtcclxuXHJcblxyXG4gICAgY29uc3QgY2FuU2VlayA9XHJcbiAgICAgIChvbGRUaW1lUmFuZ2UgJiYgbmV3VGltZVJhbmdlLnN0YXJ0ICE9PSBvbGRUaW1lUmFuZ2Uuc3RhcnQpIHx8XHJcbiAgICAgICghb2xkVGltZVJhbmdlICYmIG5ld1RpbWVSYW5nZS5zdGFydCA+IDApO1xyXG5cclxuXHJcbiAgICBpZiAoY2FuU2Vlaykge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgcGxheWluZzogZmFsc2UgfSk7XHJcbiAgICAgIHRoaXMucGxheWVyLnNlZWtUbyhuZXdUaW1lUmFuZ2Uuc3RhcnQsIFwic2Vjb25kc1wiKTtcclxuICAgIH1cclxuICAgIGlmIChuZXdQcm9wcy5wbGF5VmlkZW8gIT09IHRoaXMucHJvcHMucGxheVZpZGVvKSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBwbGF5aW5nOiBuZXdQcm9wcy5wbGF5VmlkZW8gfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGhhbmRsZVBsYXllclByb2dyZXNzID0gZGF0YSA9PiB7XHJcbiAgICBpZiAoZGF0YS5sb2FkZWQpIHtcclxuICAgICAgY29uc3QgeyBwbGF5ZWRTZWNvbmRzIH0gPSBkYXRhO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coXCJoYW5kbGVQbGF5ZXJQcm9ncmVzcyBcIiArIHBsYXllZFNlY29uZHMpO1xyXG4gICAgICBjb25zdCBzdGFydFRpbWVSYW5nZSA9IHRoaXMucHJvcHMudGltZVJhbmdlLnN0YXJ0O1xyXG4gICAgICBjb25zdCBlbmRUaW1lUmFuZ2UgPSB0aGlzLnByb3BzLnRpbWVSYW5nZS5lbmQ7XHJcbiAgICAgIGNvbnN0IHBsYXllZFNlY29uZHNJc0xvd2VyVGhhblN0YXJ0VGltZSA9IHBsYXllZFNlY29uZHMgPD0gc3RhcnRUaW1lUmFuZ2U7XHJcbiAgICAgIGNvbnN0IHBsYXllZFNlY29uZHNJc0dyZWF0ZXJUaGFuRW5kVGltZSA9IHBsYXllZFNlY29uZHMgPj0gZW5kVGltZVJhbmdlO1xyXG4gICAgICBpZiAocGxheWVkU2Vjb25kc0lzTG93ZXJUaGFuU3RhcnRUaW1lKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2Vla1RvKHN0YXJ0VGltZVJhbmdlLCBcInNlY29uZHNcIik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHBsYXllZFNlY29uZHNJc0dyZWF0ZXJUaGFuRW5kVGltZSkge1xyXG4gICAgICAgIHRoaXMucGxheWVyLnNlZWtUbyhzdGFydFRpbWVSYW5nZSwgXCJzZWNvbmRzXCIpO1xyXG4gICAgICAgIC8vIHRoaXMuc2V0U3RhdGUoeyBwbGF5aW5nOiBmYWxzZSB9KTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5wcm9wcy5vblBsYXllclByb2dyZXNzIHx8IG5vb3A7XHJcbiAgICAgIGhhbmRsZXIocGxheWVkU2Vjb25kcyk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBkaXNwbGF5U2Vjb25kcyhzZWNvbmRzKSB7XHJcbiAgICByZXR1cm4gc2Vjb25kcy50b0ZpeGVkKDIpICsgXCJzXCI7XHJcbiAgfVxyXG4gIGhhbmRsZU9uUGF1c2UgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5wcm9wcy5vblBsYXllclBhdXNlIHx8IG5vb3A7XHJcbiAgICBoYW5kbGVyKCk7XHJcbiAgfTtcclxuICBoYW5kbGVPblBsYXkgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5wcm9wcy5vblBsYXllclBsYXkgfHwgbm9vcDtcclxuICAgIGhhbmRsZXIoKTtcclxuICB9O1xyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgc3RhcnQsIGVuZCB9ID0gdGhpcy5wcm9wcy50aW1lUmFuZ2U7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJ2dC1wbGF5ZXItY29udFwiIG9uQ29udGV4dE1lbnU9eygpID0+IHt9fT5cclxuICAgICAgICB7LyogPHZpZGVvIHNyYz17cHJvcHMuc3JjfSBjb250cm9scz17ZmFsc2V9IC8+ICovfVxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllci13cmFwcGVyXCI+XHJcbiAgICAgICAgICA8UmVhY3RQbGF5ZXJcclxuICAgICAgICAgICAgb25QbGF5PXt0aGlzLmhhbmRsZU9uUGF1c2V9XHJcbiAgICAgICAgICAgIG9uUGxheT17dGhpcy5oYW5kbGVPblBsYXl9XHJcbiAgICAgICAgICAgIG9uUHJvZ3Jlc3M9e3RoaXMuaGFuZGxlUGxheWVyUHJvZ3Jlc3N9XHJcbiAgICAgICAgICAgIHVybD17dGhpcy5wcm9wcy5zcmN9XHJcbiAgICAgICAgICAgIHJlZj17ZWwgPT4gKHRoaXMucGxheWVyID0gZWwpfVxyXG4gICAgICAgICAgICBwbGF5aW5nPXt0aGlzLnN0YXRlLnBsYXlpbmd9XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT0ncmVhY3QtcGxheWVyJ1xyXG4gICAgICAgICAgICB3aWR0aD0nMTAwJSdcclxuICAgICAgICAgICAgaGVpZ2h0PScxMDAlJ1xyXG4gICAgICAgICAgPjwvUmVhY3RQbGF5ZXI+XHJcbiAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIFxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJ2dC1wbGF5ZXItdGltZS1yYW5nZS1jb250XCI+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJydnQtcGxheWVyLXRpbWUtcmFuZ2VcIj5cclxuICAgICAgICAgICAgRnJvbTogPHN0cm9uZz57dGhpcy5kaXNwbGF5U2Vjb25kcyhzdGFydCl9PC9zdHJvbmc+XHJcbiAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJydnQtcGxheWVyLXRpbWUtcmFuZ2VcIj5cclxuICAgICAgICAgICAgVG86IDxzdHJvbmc+e3RoaXMuZGlzcGxheVNlY29uZHMoZW5kKX08L3N0cm9uZz5cclxuICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJ2dC1wbGF5ZXItdGltZS1yYW5nZVwiPlxyXG4gICAgICAgICAgICBTZWxlY3RlZCA8c3Ryb25nPnt0aGlzLmRpc3BsYXlTZWNvbmRzKGVuZCAtIHN0YXJ0KX08L3N0cm9uZz4gb2Z7XCIgXCJ9XHJcbiAgICAgICAgICAgIDxzdHJvbmc+e3RoaXMuZGlzcGxheVNlY29uZHModGhpcy5wcm9wcy50aW1lTGltaXQpfTwvc3Ryb25nPiBhbGxvd2VkXHJcbiAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJydnQtcGxheWVyLXRpbWUtcmFuZ2VcIj5cclxuICAgICAgICAgICAgPHN0cm9uZz57dGhpcy5kaXNwbGF5U2Vjb25kcyh0aGlzLnByb3BzLnZpZER1cmF0aW9uKX08L3N0cm9uZz4gdmlkIGxlbmd0aFxyXG4gICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQbGF5ZXI7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcmFnZ2VyIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XHJcbiAgX3NjcmVlblggPSBudWxsO1xyXG4gIF9zY3JlZW5ZID0gbnVsbDtcclxuICBfb3ggPSBudWxsO1xyXG4gIF9veSA9IG51bGw7XHJcblxyXG4gIGhhbmRsZU1vdXNlRG93biA9IGUgPT4ge1xyXG4gICAgdGhpcy5fc2NyZWVuWCA9IGUuc2NyZWVuWDtcclxuICAgIHRoaXMuX3NjcmVlblkgPSBlLnNjcmVlblk7XHJcbiAgICB0aGlzLl9veCA9IHRoaXMucHJvcHMueDtcclxuICAgIHRoaXMuX295ID0gdGhpcy5wcm9wcy55O1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuaGFuZGxlTW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5oYW5kbGVNb3VzZVVwLCBmYWxzZSk7XHJcbiAgfTtcclxuXHJcbiAgaGFuZGxlTW91c2VNb3ZlID0gZSA9PiB7XHJcbiAgICB0aGlzLnByb3BzLm9uRHJhZyh7XHJcbiAgICAgIHg6IGUuc2NyZWVuWCAtIHRoaXMuX3NjcmVlblggKyB0aGlzLl9veCxcclxuICAgICAgeTogZS5zY3JlZW5ZIC0gdGhpcy5fc2NyZWVuWSArIHRoaXMuX295XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBoYW5kbGVNb3VzZVVwID0gKCkgPT4ge1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuaGFuZGxlTW91c2VVcCk7XHJcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5wcm9wcy5vbkRyYWdTdG9wIHx8ICgoKSA9PiB7fSk7XHJcbiAgICBoYW5kbGVyKCk7XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdlxyXG4gICAgICAgIGNsYXNzTmFtZT17XCJydnQtZHJhZ2dlciBcIiArIHRoaXMucHJvcHMuY2xhc3NOYW1lIHx8IFwiXCJ9XHJcbiAgICAgICAgb25Nb3VzZURvd249e3RoaXMuaGFuZGxlTW91c2VEb3dufVxyXG4gICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICBsZWZ0OiB0aGlzLnByb3BzLnggKyBcInB4XCIsXHJcbiAgICAgICAgICB0b3A6IHRoaXMucHJvcHMueSArIFwicHhcIlxyXG4gICAgICAgIH19XHJcbiAgICAgID5cclxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcclxuICAgIG9uRHJhZygpIHt9LFxyXG4gICAgeDogMCxcclxuICAgIHk6IDBcclxuICB9O1xyXG5cclxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xyXG4gICAgeDogUHJvcFR5cGVzLm51bWJlcixcclxuICAgIHk6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgICBvbkRyYWc6IFByb3BUeXBlcy5mdW5jLFxyXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50XHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJhZ2dlckNvbnRhaW5lciBleHRlbmRzIFB1cmVDb21wb25lbnQge1xyXG4gIF9zY3JlZW5YID0gbnVsbDtcclxuICBfc2NyZWVuWSA9IG51bGw7XHJcbiAgX294ID0gbnVsbDtcclxuICBfb3kgPSBudWxsO1xyXG5cclxuICBfb3dpZHRoID0gbnVsbDtcclxuXHJcbiAgaGFuZGxlTW91c2VEb3duID0gZSA9PiB7XHJcbiAgICB0aGlzLl9zY3JlZW5YID0gZS5zY3JlZW5YO1xyXG4gICAgdGhpcy5fc2NyZWVuWSA9IGUuc2NyZWVuWTtcclxuICAgIHRoaXMuX294ID0gdGhpcy5wcm9wcy54O1xyXG4gICAgdGhpcy5fb3dpZHRoID0gdGhpcy5wcm9wcy53aWR0aDtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSwgZmFsc2UpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuaGFuZGxlTW91c2VVcCwgZmFsc2UpO1xyXG4gIH07XHJcblxyXG4gIGhhbmRsZU1vdXNlTW92ZSA9IGUgPT4ge1xyXG4gICAgY29uc29sZS5sb2coXCJoYW5kbGVNb3VzZU1vdmVcIiwgZSk7XHJcbiAgICB0aGlzLnByb3BzLm9uRHJhZyh7XHJcbiAgICAgIHg6IGUuc2NyZWVuWCAtIHRoaXMuX3NjcmVlblggKyB0aGlzLl9veCxcclxuICAgICAgeTogZS5zY3JlZW5ZIC0gdGhpcy5fc2NyZWVuWSArIHRoaXMuX295XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBoYW5kbGVNb3VzZVVwID0gKCkgPT4ge1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuaGFuZGxlTW91c2VVcCk7XHJcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5wcm9wcy5vbkRyYWdTdG9wIHx8ICgoKSA9PiB7fSk7XHJcbiAgICBoYW5kbGVyKCk7XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdlxyXG4gICAgICAgIGNsYXNzTmFtZT17XCJydnQtZHJhZ2dlci1jb250YWluZXIgXCIgKyB0aGlzLnByb3BzLmNsYXNzTmFtZSB8fCBcIlwifVxyXG4gICAgICAgIG9uTW91c2VEb3duPXt0aGlzLmhhbmRsZU1vdXNlRG93bn1cclxuICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgbGVmdDogdGhpcy5wcm9wcy54ICsgXCJweFwiLFxyXG4gICAgICAgICAgdG9wOiB0aGlzLnByb3BzLnkgKyBcInB4XCIsXHJcbiAgICAgICAgICB3aWR0aDogdGhpcy5wcm9wcy53aWR0aCArIFwicHhcIlxyXG4gICAgICAgIH19XHJcbiAgICAgID5cclxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcclxuICAgIG9uRHJhZygpIHt9LFxyXG4gICAgeDogMCxcclxuICAgIHk6IDBcclxuICB9O1xyXG5cclxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xyXG4gICAgeDogUHJvcFR5cGVzLm51bWJlcixcclxuICAgIHk6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgICBvbkRyYWc6IFByb3BUeXBlcy5mdW5jLFxyXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50XHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgRHJhZ2dlciBmcm9tIFwiLi9EcmFnZ2VyXCI7XHJcbmltcG9ydCBEcmFnZ2VyQ29udGFpbmVyIGZyb20gXCIuL0RyYWdnZXJDb250YWluZXJcIjtcclxuaW1wb3J0IHsgbm9vcCwgZm9ybWF0U2Vjb25kcywgbGVmdFplcm8gfSBmcm9tIFwiLi4vbGlicy91dGlsc1wiO1xyXG5cclxuY29uc3QgVHJpbW1lck92ZXJMYXkgPSBwcm9wcyA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgY2xhc3NOYW1lPVwicnZ0LXRyaW1tZXJcIlxyXG4gICAgICBzdHlsZT17eyB3aWR0aDogcHJvcHMud2lkdGgsIGxlZnQ6IHByb3BzLmxlZnQsIHJpZ2h0OiBwcm9wcy5yaWdodCB9fVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxuY29uc3QgVGltZVN0YW1wID0gcHJvcHMgPT4ge1xyXG4gIGNvbnN0IGZvcm1hdGVkID0gZm9ybWF0U2Vjb25kcyhwcm9wcy50aW1lKTtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJydnQtcGxheWVyLWN1cnNvci1jdXJyZW50XCI+XHJcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJ2dC1wbGF5ZXItbnVtXCI+e2Zvcm1hdGVkWzBdfTwvc3Bhbj4nXHJcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJ2dC1wbGF5ZXItbnVtXCI+e2Zvcm1hdGVkWzFdfTwvc3Bhbj5cclxuICAgICAgeyFwcm9wcy5ub01pY3JvU2Vjb25kcyAmJiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgIC48c3BhbiBjbGFzc05hbWU9XCJydnQtcGxheWVyLW51bVwiPntsZWZ0WmVybyhmb3JtYXRlZFsyXSwgMil9PC9zcGFuPlxyXG4gICAgICAgIDwvPlxyXG4gICAgICApfVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmNsYXNzIFRyaW1tZXIgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcclxuICBwb3MyVGltZSA9IHBvcyA9PiB7XHJcbiAgICByZXR1cm4gcG9zIC8gdGhpcy5wcm9wcy53aWR0aER1cmF0aW9uUmF0aW87XHJcbiAgfTtcclxuXHJcbiAgdGltZTJwb3MgPSB0aW1lID0+IHtcclxuICAgIHJldHVybiB0aW1lICogdGhpcy5wcm9wcy53aWR0aER1cmF0aW9uUmF0aW87XHJcbiAgfTtcclxuXHJcbiAga2VlcEluUmFuZ2UgPSB4ID0+IHtcclxuICAgIGNvbnN0IGNvbnRhaW5lcldpZHRoID0gdGhpcy5wcm9wcy5jb250YWluZXJXaWR0aDtcclxuICAgIGlmICh4IDwgMCkge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoeCA+IGNvbnRhaW5lcldpZHRoKSB7XHJcbiAgICAgIHJldHVybiBjb250YWluZXJXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geDtcclxuICB9O1xyXG5cclxuICB3aXRoaW5UaW1lTGltaXQgPSAodGltZSwgaXNEcmFnRW5kID0gdHJ1ZSkgPT4ge1xyXG4gICAgY29uc3QgdGltZUxpbWl0ID0gdGhpcy5wcm9wcy50aW1lTGltaXQ7XHJcblxyXG4gICAgbGV0IHN0YXJ0VGltZSA9IHRoaXMucHJvcHMuc3RhcnRUaW1lO1xyXG4gICAgbGV0IGVuZFRpbWUgPSB0aW1lO1xyXG5cclxuICAgIGlmICghaXNEcmFnRW5kKSB7XHJcbiAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XHJcbiAgICAgIGVuZFRpbWUgPSB0aGlzLnByb3BzLmVuZFRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZHVyYXRpb24gPSB0aGlzLnByb3BzLmR1cmF0aW9uO1xyXG4gICAgbGV0IHRpbWVUaWxsRW5kID0gZHVyYXRpb24gLSBlbmRUaW1lO1xyXG5cclxuICAgIGNvbnN0IGN1cnJlbnRSYW5nZSA9IGR1cmF0aW9uIC0gc3RhcnRUaW1lIC0gdGltZVRpbGxFbmQ7XHJcbiAgICByZXR1cm4gdGltZUxpbWl0ID8gY3VycmVudFJhbmdlIDw9IHRpbWVMaW1pdCA6IHRydWU7XHJcbiAgfTtcclxuXHJcbiAgd2l0aGluVGltZVJhbmdlID0gKHRpbWUsIGlzRHJhZ0VuZCA9IHRydWUpID0+IHtcclxuICAgIGNvbnN0IHRpbWVSYW5nZSA9IHRoaXMucHJvcHMudGltZVJhbmdlTGltaXQ7XHJcbiAgICBsZXQgaW50ZXJ2YWwgPSB0aW1lIC0gdGhpcy5wcm9wcy5zdGFydFRpbWU7XHJcbiAgICBpZiAoIWlzRHJhZ0VuZCkge1xyXG4gICAgICBpbnRlcnZhbCA9IHRoaXMucHJvcHMuZW5kVGltZSAtIHRpbWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGltZVJhbmdlID8gaW50ZXJ2YWwgPj0gdGltZVJhbmdlIDogdHJ1ZTtcclxuICB9O1xyXG5cclxuXHJcbiAgLy9zZXRDdXJyZW50VGltZVxyXG4gIC8vam9zaCBhZGRlZCFcclxuICBzZXRDdXJyZW50VGltZSA9IHBvcyA9PiB7XHJcbiAgICBjb25zdCBwb3MyVGltZSA9IHRoaXMucG9zMlRpbWUodGhpcy5rZWVwSW5SYW5nZShwb3MueCkpO1xyXG5cclxuICAgIGxldCB0aW1lID0gcG9zMlRpbWU7XHJcbiAgICBjb25zb2xlLmxvZyhcImRyYWdTdGFydCB2NVwiLCBwb3MyVGltZSk7XHJcblxyXG4gICAgY29uc3QgY3VycmVudFRpbWUgPSB0aGlzLnByb3BzLmN1cnJlbnRUaW1lO1xyXG4gICAgY29uc3QgY3VycmVudFRpbWVJc1dpdGhpblJhbmdlID0gdGhpcy53aXRoaW5UaW1lUmFuZ2UodGltZSwgZmFsc2UpO1xyXG4gICAgY29uc3QgY3VycmVudFRpbWVJc1dpdGhpbkxpbWl0ID0gdGhpcy53aXRoaW5UaW1lTGltaXQodGltZSwgZmFsc2UpO1xyXG5cclxuICAgIGlmICghY3VycmVudFRpbWVJc1dpdGhpblJhbmdlIHx8XHJcbiAgICAgICFjdXJyZW50VGltZUlzV2l0aGluTGltaXRcclxuICAgICkge1xyXG5cclxuICAgICAgY29uc29sZS5sb2coXCJQYXVzaW5nIHBsYXllclwiKTtcclxuXHJcblxyXG4gICAgICB0aW1lID0gdGhpcy5wcm9wcy5zdGFydFRpbWU7XHJcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLnByb3BzLm9uUGF1c2VQbGF5ZXIgfHwgKCgpID0+IHt9KTtcclxuICAgICAgaGFuZGxlcigpO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coXCJ0aGlzLnByb3BzXCIsIHRoaXMucHJvcHMpO1xyXG4gICAgdGhpcy5wcm9wcy5vblBsYXllclByb2dyZXNzKHRpbWUpO1xyXG4gIH07XHJcblxyXG5cclxuICBoYW5kbGVEcmFnU3RhcnQgPSBwb3MgPT4ge1xyXG4gICAgY29uc3QgcG9zMlRpbWUgPSB0aGlzLnBvczJUaW1lKHRoaXMua2VlcEluUmFuZ2UocG9zLngpKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcImRyYWdTdGFydFwiLCBwb3MyVGltZSk7XHJcbiAgICBsZXQgdGltZSA9IHBvczJUaW1lO1xyXG5cclxuICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gdGhpcy5wcm9wcy5jdXJyZW50VGltZTtcclxuICAgIGNvbnN0IGN1cnJlbnRUaW1lSXNXaXRoaW5SYW5nZSA9IHRoaXMud2l0aGluVGltZVJhbmdlKHRpbWUsIGZhbHNlKTtcclxuICAgIGNvbnN0IGN1cnJlbnRUaW1lSXNXaXRoaW5MaW1pdCA9IHRoaXMud2l0aGluVGltZUxpbWl0KHRpbWUsIGZhbHNlKTtcclxuXHJcbiAgICBpZiAoIWN1cnJlbnRUaW1lSXNXaXRoaW5SYW5nZSB8fFxyXG4gICAgICAhY3VycmVudFRpbWVJc1dpdGhpbkxpbWl0XHJcbiAgICApIHtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKFwiUGF1c2luZyBwbGF5ZXJcIik7XHJcblxyXG5cclxuICAgICAgdGltZSA9IHRoaXMucHJvcHMuc3RhcnRUaW1lO1xyXG4gICAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5wcm9wcy5vblBhdXNlUGxheWVyIHx8ICgoKSA9PiB7fSk7XHJcbiAgICAgIGhhbmRsZXIoKTtcclxuICAgIH1cclxuICAgIHRoaXMucHJvcHMub25TdGFydFRpbWVDaGFuZ2UodGltZSk7XHJcbiAgfTtcclxuICBoYW5kbGVEcmFnRW5kID0gcG9zID0+IHtcclxuICAgIGNvbnN0IHBvczJUaW1lID0gdGhpcy5wb3MyVGltZSh0aGlzLmtlZXBJblJhbmdlKHBvcy54KSk7XHJcbiAgICBsZXQgdGltZSA9IHBvczJUaW1lO1xyXG5cclxuICAgIGNvbnN0IGVuZFRpbWUgPSB0aGlzLnByb3BzLmVuZFRpbWU7XHJcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IHRoaXMucHJvcHMuY3VycmVudFRpbWU7XHJcblxyXG4gICAgY29uc3QgY3VycmVudFRpbWVJc1dpdGhpblJhbmdlID0gdGhpcy53aXRoaW5UaW1lUmFuZ2UodGltZSk7XHJcbiAgICBjb25zdCBjdXJyZW50VGltZUlzV2l0aGluTGltaXQgPSB0aGlzLndpdGhpblRpbWVMaW1pdCh0aW1lKTtcclxuXHJcbiAgICBpZiAoIWN1cnJlbnRUaW1lSXNXaXRoaW5SYW5nZSB8fFxyXG4gICAgICAhY3VycmVudFRpbWVJc1dpdGhpbkxpbWl0XHJcbiAgICApIHtcclxuICAgICAgdGltZSA9IHRoaXMucHJvcHMuZW5kVGltZTtcclxuICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMucHJvcHMub25QYXVzZVBsYXllciB8fCAoKCkgPT4ge30pO1xyXG4gICAgICBoYW5kbGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wcm9wcy5vbkVuZFRpbWVDaGFuZ2UodGltZSk7XHJcbiAgfTtcclxuICBoYW5kbGVEcmFnU3RvcCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLnByb3BzLm9uR2V0RGF0YSB8fCBub29wO1xyXG4gICAgaGFuZGxlcih7IHN0YXJ0OiB0aGlzLnByb3BzLnN0YXJ0VGltZSwgZW5kOiB0aGlzLnByb3BzLmVuZFRpbWUgfSk7XHJcbiAgfTtcclxuICBnZXRUcmltbWVyV2lkdGggPSB3aWR0aCA9PiB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jb250YWluZXJXaWR0aCAtIHdpZHRoO1xyXG4gIH07XHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRpbWUycG9zKHRoaXMucHJvcHMuc3RhcnRUaW1lKTtcclxuICAgIGNvbnN0IGVuZCA9IHRoaXMudGltZTJwb3ModGhpcy5wcm9wcy5lbmRUaW1lKTtcclxuICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLnRpbWUycG9zKHRoaXMucHJvcHMuY3VycmVudFRpbWUpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgIDxUcmltbWVyT3ZlckxheSBsZWZ0PXswfSB3aWR0aD17c3RhcnR9IC8+XHJcbiAgICAgICAgPERyYWdnZXJcclxuICAgICAgICAgIHg9e3N0YXJ0fVxyXG4gICAgICAgICAgb25EcmFnPXt0aGlzLmhhbmRsZURyYWdTdGFydH1cclxuICAgICAgICAgIG9uRHJhZ1N0b3A9e3RoaXMuaGFuZGxlRHJhZ1N0b3B9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPFRpbWVTdGFtcCB0aW1lPXt0aGlzLnByb3BzLnN0YXJ0VGltZX0gLz5cclxuICAgICAgICA8L0RyYWdnZXI+XHJcblxyXG5cclxuXHJcbiAgICAgICAgPERyYWdnZXIgeD17Y3VycmVudH0gb25EcmFnPXt0aGlzLnNldEN1cnJlbnRUaW1lfSBvbkRyYWdTdG9wPXsoKSA9PiB7fX0+XHJcbiAgICAgICAgICA8VGltZVN0YW1wIG5vTWljcm9TZWNvbmRzIHRpbWU9e3RoaXMucHJvcHMuY3VycmVudFRpbWV9IC8+XHJcbiAgICAgICAgPC9EcmFnZ2VyPlxyXG5cclxuICAgICAgICBcclxuICAgICAgICA8RHJhZ2dlclxyXG4gICAgICAgICAgeD17ZW5kfVxyXG4gICAgICAgICAgb25EcmFnPXt0aGlzLmhhbmRsZURyYWdFbmR9XHJcbiAgICAgICAgICBvbkRyYWdTdG9wPXt0aGlzLmhhbmRsZURyYWdTdG9wfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxUaW1lU3RhbXAgdGltZT17dGhpcy5wcm9wcy5lbmRUaW1lfSAvPlxyXG4gICAgICAgIDwvRHJhZ2dlcj5cclxuXHJcblxyXG5cclxuICAgICAgICA8RHJhZ2dlckNvbnRhaW5lclxyXG4gICAgICAgICAgeD17c3RhcnR9XHJcbiAgICAgICAgICB3aWR0aD17KGVuZCAtIHN0YXJ0KX1cclxuICAgICAgICAgIG9uRHJhZz17dGhpcy5oYW5kbGVEcmFnU3RhcnR9XHJcbiAgICAgICAgICBvbkRyYWdTdG9wPXt0aGlzLmhhbmRsZURyYWdTdG9wfVxyXG4gICAgICAgID5cclxuICAgICAgICA8L0RyYWdnZXJDb250YWluZXI+XHJcblxyXG5cclxuXHJcbiAgICAgICAgPFRyaW1tZXJPdmVyTGF5IHJpZ2h0PXswfSB3aWR0aD17dGhpcy5nZXRUcmltbWVyV2lkdGgoZW5kKX0gLz5cclxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVmlkZW9UcmltbWVyIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICBzdGFydDogMCxcclxuICAgIGVuZDogMFxyXG4gIH07XHJcbiAgZ2V0IHdpZHRoRHVyYXRpb25SYXRpbygpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcldpZHRoIC8gdGhpcy5wcm9wcy5kdXJhdGlvbjtcclxuICB9XHJcbiAgZ2V0IGNvbnRhaW5lcldpZHRoKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyUmVmLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlU3RhcnRUaW1lQ2hhbmdlID0gdGltZSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgc3RhcnQ6IHRpbWUgfSk7XHJcbiAgfTtcclxuICBoYW5kbGVHZXRUcmltRGF0YSA9ICgpID0+IHtcclxuICAgIGNvbnN0IHRyaW1tZXJIYW5kbGVyID0gdGhpcy5wcm9wcy5vblRyaW0gfHwgbm9vcDtcclxuICAgIHNldFRpbWVvdXQoXHJcbiAgICAgICgpID0+XHJcbiAgICAgICAgdHJpbW1lckhhbmRsZXIoe1xyXG4gICAgICAgICAgc3RhcnQ6IHRoaXMuc3RhdGUuc3RhcnQgfHwgdGhpcy5wcm9wcy50aW1lUmFuZ2Uuc3RhcnQsXHJcbiAgICAgICAgICBlbmQ6IHRoaXMuc3RhdGUuZW5kIHx8IHRoaXMucHJvcHMudGltZVJhbmdlLmVuZFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAyMDBcclxuICAgICk7XHJcbiAgfTtcclxuICBoYW5kbGVFbmRUaW1lQ2hhbmdlID0gdGltZSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgZW5kOiB0aW1lIH0pO1xyXG4gIH07XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicnZ0LXRyaW1tZXItY29udCB2aWRlb3RyaW1tZXJcIiByZWY9e2UgPT4gKHRoaXMuY29udGFpbmVyUmVmID0gZSl9PlxyXG4gICAgICAgIHt0aGlzLnByb3BzLnNob3dUcmltbWVyICYmIChcclxuICAgICAgICAgIDxUcmltbWVyXHJcbiAgICAgICAgICAgIHRpbWVMaW1pdD17dGhpcy5wcm9wcy50aW1lTGltaXR9XHJcbiAgICAgICAgICAgIG9uU3RhcnRUaW1lQ2hhbmdlPXt0aGlzLmhhbmRsZVN0YXJ0VGltZUNoYW5nZX1cclxuICAgICAgICAgICAgb25DdXJyZW50VGltZUNoYW5nZT17dGhpcy5oYW5kbGVDdXJyZW50VGltZUNoYW5nZX1cclxuICAgICAgICAgICAgb25FbmRUaW1lQ2hhbmdlPXt0aGlzLmhhbmRsZUVuZFRpbWVDaGFuZ2V9XHJcbiAgICAgICAgICAgIHdpZHRoRHVyYXRpb25SYXRpbz17dGhpcy53aWR0aER1cmF0aW9uUmF0aW99XHJcbiAgICAgICAgICAgIGNvbnRhaW5lcldpZHRoPXt0aGlzLmNvbnRhaW5lcldpZHRofVxyXG4gICAgICAgICAgICBzdGFydFRpbWU9e3RoaXMuc3RhdGUuc3RhcnQgfHwgdGhpcy5wcm9wcy50aW1lUmFuZ2Uuc3RhcnR9XHJcbiAgICAgICAgICAgIGVuZFRpbWU9e3RoaXMuc3RhdGUuZW5kIHx8IHRoaXMucHJvcHMudGltZVJhbmdlLmVuZH1cclxuICAgICAgICAgICAgY3VycmVudFRpbWU9e3RoaXMucHJvcHMuY3VycmVudFRpbWV9XHJcbiAgICAgICAgICAgIGR1cmF0aW9uPXt0aGlzLnByb3BzLmR1cmF0aW9ufVxyXG4gICAgICAgICAgICBvbkdldERhdGE9e3RoaXMuaGFuZGxlR2V0VHJpbURhdGF9XHJcbiAgICAgICAgICAgIG9uUGF1c2VQbGF5ZXI9e3RoaXMub25QYXVzZVBsYXllcn1cclxuXHJcbiAgICAgICAgICAgIG9uUGxheWVyUHJvZ3Jlc3M9e3RoaXMucHJvcHMub25QbGF5ZXJQcm9ncmVzc31cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVmlkZW9UcmltbWVyO1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkb21haW47XG5cbi8vIFRoaXMgY29uc3RydWN0b3IgaXMgdXNlZCB0byBzdG9yZSBldmVudCBoYW5kbGVycy4gSW5zdGFudGlhdGluZyB0aGlzIGlzXG4vLyBmYXN0ZXIgdGhhbiBleHBsaWNpdGx5IGNhbGxpbmcgYE9iamVjdC5jcmVhdGUobnVsbClgIHRvIGdldCBhIFwiY2xlYW5cIiBlbXB0eVxuLy8gb2JqZWN0ICh0ZXN0ZWQgd2l0aCB2OCB2NC45KS5cbmZ1bmN0aW9uIEV2ZW50SGFuZGxlcnMoKSB7fVxuRXZlbnRIYW5kbGVycy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXI7XG5leHBvcnQge0V2ZW50RW1pdHRlcn07XG5cbi8vIG5vZGVqcyBvZGRpdHlcbi8vIHJlcXVpcmUoJ2V2ZW50cycpID09PSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXJcblxuRXZlbnRFbWl0dGVyLnVzaW5nRG9tYWlucyA9IGZhbHNlO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmRvbWFpbiA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kb21haW4gPSBudWxsO1xuICBpZiAoRXZlbnRFbWl0dGVyLnVzaW5nRG9tYWlucykge1xuICAgIC8vIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSBkb21haW4sIHRoZW4gYXR0YWNoIHRvIGl0LlxuICAgIGlmIChkb21haW4uYWN0aXZlICYmICEodGhpcyBpbnN0YW5jZW9mIGRvbWFpbi5Eb21haW4pKSB7XG4gICAgICB0aGlzLmRvbWFpbiA9IGRvbWFpbi5hY3RpdmU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJuXCIgYXJndW1lbnQgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG4vLyBUaGVzZSBzdGFuZGFsb25lIGVtaXQqIGZ1bmN0aW9ucyBhcmUgdXNlZCB0byBvcHRpbWl6ZSBjYWxsaW5nIG9mIGV2ZW50XG4vLyBoYW5kbGVycyBmb3IgZmFzdCBjYXNlcyBiZWNhdXNlIGVtaXQoKSBpdHNlbGYgb2Z0ZW4gaGFzIGEgdmFyaWFibGUgbnVtYmVyIG9mXG4vLyBhcmd1bWVudHMgYW5kIGNhbiBiZSBkZW9wdGltaXplZCBiZWNhdXNlIG9mIHRoYXQuIFRoZXNlIGZ1bmN0aW9ucyBhbHdheXMgaGF2ZVxuLy8gdGhlIHNhbWUgbnVtYmVyIG9mIGFyZ3VtZW50cyBhbmQgdGh1cyBkbyBub3QgZ2V0IGRlb3B0aW1pemVkLCBzbyB0aGUgY29kZVxuLy8gaW5zaWRlIHRoZW0gY2FuIGV4ZWN1dGUgZmFzdGVyLlxuZnVuY3Rpb24gZW1pdE5vbmUoaGFuZGxlciwgaXNGbiwgc2VsZikge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmNhbGwoc2VsZik7XG4gIGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmKTtcbiAgfVxufVxuZnVuY3Rpb24gZW1pdE9uZShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmcxKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYsIGFyZzEpO1xuICB9XG59XG5mdW5jdGlvbiBlbWl0VHdvKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEsIGFyZzIpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEsIGFyZzIpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSwgYXJnMik7XG4gIH1cbn1cbmZ1bmN0aW9uIGVtaXRUaHJlZShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRNYW55KGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZ3MpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGV2ZW50cywgZG9tYWluO1xuICB2YXIgbmVlZERvbWFpbkV4aXQgPSBmYWxzZTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT0gbnVsbCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBkb21haW4gPSB0aGlzLmRvbWFpbjtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgaWYgKGRvbWFpbikge1xuICAgICAgaWYgKCFlcilcbiAgICAgICAgZXIgPSBuZXcgRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQnKTtcbiAgICAgIGVyLmRvbWFpbkVtaXR0ZXIgPSB0aGlzO1xuICAgICAgZXIuZG9tYWluID0gZG9tYWluO1xuICAgICAgZXIuZG9tYWluVGhyb3duID0gZmFsc2U7XG4gICAgICBkb21haW4uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgfSBlbHNlIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4gKCcgKyBlciArICcpJyk7XG4gICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmICghaGFuZGxlcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGlzRm4gPSB0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJztcbiAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgc3dpdGNoIChsZW4pIHtcbiAgICAvLyBmYXN0IGNhc2VzXG4gICAgY2FzZSAxOlxuICAgICAgZW1pdE5vbmUoaGFuZGxlciwgaXNGbiwgdGhpcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICBlbWl0T25lKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICBlbWl0VHdvKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIGVtaXRUaHJlZShoYW5kbGVyLCBpc0ZuLCB0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgYXJndW1lbnRzWzNdKTtcbiAgICAgIGJyZWFrO1xuICAgIC8vIHNsb3dlclxuICAgIGRlZmF1bHQ6XG4gICAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGVtaXRNYW55KGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgaWYgKG5lZWREb21haW5FeGl0KVxuICAgIGRvbWFpbi5leGl0KCk7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoIWV2ZW50cykge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKCFleGlzdGluZykge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICAgIGlmIChwcmVwZW5kKSB7XG4gICAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBpZiAoIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgbSA9ICRnZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICAgIGlmIChtICYmIG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0pIHtcbiAgICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgdHlwZSArICcgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgICAgZW1pdFdhcm5pbmcodyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIGVtaXRXYXJuaW5nKGUpIHtcbiAgdHlwZW9mIGNvbnNvbGUud2FybiA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnNvbGUud2FybihlKSA6IGNvbnNvbGUubG9nKGUpO1xufVxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgZmlyZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0YXJnZXQucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHJldHVybiBnO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmICghZXZlbnRzKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmICghbGlzdClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCAobGlzdC5saXN0ZW5lciAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGxpc3RbMF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cztcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKCFldmVudHMpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoIWV2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGtleTsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBkbyB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgfSB3aGlsZSAobGlzdGVuZXJzWzBdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICB2YXIgZXZsaXN0ZW5lcjtcbiAgdmFyIHJldDtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoIWV2ZW50cylcbiAgICByZXQgPSBbXTtcbiAgZWxzZSB7XG4gICAgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgICBpZiAoIWV2bGlzdGVuZXIpXG4gICAgICByZXQgPSBbXTtcbiAgICBlbHNlIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIHJldCA9IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdO1xuICAgIGVsc2VcbiAgICAgIHJldCA9IHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdC5vd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKS5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpXG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBpKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwidmFyIHdvcmtlckZpbGUgPSBmdW5jdGlvbiB3b3JrZXJGaWxlKCkge1xuICB2YXIgd29ya2VyUGF0aCA9IFwiaHR0cHM6Ly9jZG4ucmF3Z2l0LmNvbS9iZ3JpbnMvdmlkZW9jb252ZXJ0ZXIuanMvbWFzdGVyL2J1aWxkL2ZmbXBlZy1hbGwtY29kZWNzLmpzXCI7XG4gIGltcG9ydFNjcmlwdHMod29ya2VyUGF0aCk7XG4gIHZhciBub3cgPSBEYXRlLm5vdztcblxuICBmdW5jdGlvbiBwcmludCh0ZXh0KSB7XG4gICAgcG9zdE1lc3NhZ2Uoe1xuICAgICAgdHlwZTogXCJzdGRvdXRcIixcbiAgICAgIGRhdGE6IHRleHRcbiAgICB9KTtcbiAgfVxuXG4gIG9ubWVzc2FnZSA9IGZ1bmN0aW9uIG9ubWVzc2FnZShldmVudCkge1xuICAgIHZhciBtZXNzYWdlID0gZXZlbnQuZGF0YTtcblxuICAgIGlmIChtZXNzYWdlLnR5cGUgPT09IFwiY29tbWFuZFwiKSB7XG4gICAgICB2YXIgTW9kdWxlID0ge1xuICAgICAgICBwcmludDogcHJpbnQsXG4gICAgICAgIHByaW50RXJyOiBwcmludCxcbiAgICAgICAgZmlsZXM6IG1lc3NhZ2UuZmlsZXMgfHwgW10sXG4gICAgICAgIGFyZ3VtZW50czogbWVzc2FnZS5hcmd1bWVudHMgfHwgW10sXG4gICAgICAgIFRPVEFMX01FTU9SWTogbWVzc2FnZS50b3RhbE1lbW9yeSB8fCAzMzU1NDQzMlxuICAgICAgfTtcbiAgICAgIHBvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogXCJzdGFydFwiLFxuICAgICAgICBkYXRhOiBNb2R1bGUuYXJndW1lbnRzLmpvaW4oXCIgXCIpXG4gICAgICB9KTtcbiAgICAgIHBvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogXCJzdGRvdXRcIixcbiAgICAgICAgZGF0YTogXCJSZWNlaXZlZCBjb21tYW5kOiBcIiArIE1vZHVsZS5hcmd1bWVudHMuam9pbihcIiBcIikgKyAoTW9kdWxlLlRPVEFMX01FTU9SWSA/IFwiLiAgUHJvY2Vzc2luZyB3aXRoIFwiICsgTW9kdWxlLlRPVEFMX01FTU9SWSArIFwiIGJpdHMuXCIgOiBcIlwiKVxuICAgICAgfSk7XG4gICAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgICAgdmFyIHJlc3VsdCA9IGZmbXBlZ19ydW4oTW9kdWxlKTtcbiAgICAgIHZhciB0b3RhbFRpbWUgPSBub3coKSAtIHRpbWU7XG4gICAgICBwb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6IFwic3Rkb3V0XCIsXG4gICAgICAgIGRhdGE6IFwiRmluaXNoZWQgcHJvY2Vzc2luZyAodG9vayBcIiArIHRvdGFsVGltZSArIFwibXMpXCJcbiAgICAgIH0pO1xuICAgICAgcG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcImRvbmVcIixcbiAgICAgICAgZGF0YTogcmVzdWx0LFxuICAgICAgICB0aW1lOiB0b3RhbFRpbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBwb3N0TWVzc2FnZSh7XG4gICAgdHlwZTogXCJyZWFkeVwiXG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd29ya2VyRmlsZTsiLCJleHBvcnQgZGVmYXVsdCAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6XG4gICAgICAgICAgICB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOlxuICAgICAgICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP3QoZXhwb3J0cyk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCJdLHQpOnQoKGU9ZXx8c2VsZikud2Vid29ya2VyRmlsZT17fSl9KHRoaXMsZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZS5kZWZhdWx0PWZ1bmN0aW9uIGUodCl7aWYoZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwiRmlsZSBjb250ZW50IG11c3QgZXhwb3J0IGEgZnVuY3Rpb25cIik7dmFyIG49dC50b1N0cmluZygpLG89bmV3IEJsb2IoW1wiKFwiK24rXCIpKClcIl0se3R5cGU6XCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0XCJ9KTtyZXR1cm4gbmV3IFdvcmtlcihVUkwuY3JlYXRlT2JqZWN0VVJMKG8pKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5cGJtUmxlQzVxY3lKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJYWldKWGIzSnJaWElnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWgzYjNKclpYSXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSGR2Y210bGNpQWhQVDBnWENKbWRXNWpkR2x2Ymx3aUtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkdhV3hsSUdOdmJuUmxiblFnYlhWemRDQmxlSEJ2Y25RZ1lTQm1kVzVqZEdsdmJsd2lLVHRjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnWTI5a1pTQTlJSGR2Y210bGNpNTBiMU4wY21sdVp5Z3BPMXh1SUNBZ0lHTnZibk4wSUdKc2IySWdQU0J1WlhjZ1FteHZZaWhiWENJb1hDSWdLeUJqYjJSbElDc2dYQ0lwS0NsY0lsMHNJSHRjYmlBZ0lDQWdJSFI1Y0dVNklGd2lZWEJ3YkdsallYUnBiMjR2YW1GMllYTmpjbWx3ZEZ3aVhHNGdJQ0FnZlNrN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCWGIzSnJaWElvVlZKTUxtTnlaV0YwWlU5aWFtVmpkRlZTVENoaWJHOWlLU2s3WEc0Z0lIMWNibjFjYmlKZExDSnVZVzFsY3lJNld5SjNiM0pyWlhJaUxDSkZjbkp2Y2lJc0ltTnZaR1VpTENKMGIxTjBjbWx1WnlJc0ltSnNiMklpTENKQ2JHOWlJaXdpZEhsd1pTSXNJbGR2Y210bGNpSXNJbFZTVENJc0ltTnlaV0YwWlU5aWFtVmpkRlZTVENKZExDSnRZWEJ3YVc1bmN5STZJbTlPUVVORkxGZEJRVmxCTERKSFFVTlpMRzFDUVVGWVFTeFJRVU5JTEVsQlFVbERMRTFCUVUwc01rTkJSVnBETEVWQlFVOUdMRVZCUVU5SExGZEJRMlJETEVWQlFVOHNTVUZCU1VNc1MwRkJTeXhEUVVGRExFbEJRVTFJTEVWQlFVOHNUMEZCVVN4RFFVTXhRMGtzUzBGQlRTeHJRMEZGUkN4SlFVRkpReXhQUVVGUFF5eEpRVUZKUXl4blFrRkJaMEpNSW4wPVxuIiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCBXb3JrZXJGaWxlIGZyb20gXCJ3ZWJ3b3JrZXItZmlsZVwiO1xuaW1wb3J0IHdvcmtlckZpbGUgZnJvbSBcIi4vRkZNUEVHV2ViV29ya2VyXCI7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiZXZlbnRzXCI7XG5cbnZhciBGRk1QRUdXZWJ3b3JrZXJDbGllbnQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKEZGTVBFR1dlYndvcmtlckNsaWVudCwgX0V2ZW50RW1pdHRlcik7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtXb3JrZXJ9XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7QmxvYn1cbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gRkZNUEVHV2Vid29ya2VyQ2xpZW50KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGRk1QRUdXZWJ3b3JrZXJDbGllbnQpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRkZNUEVHV2Vid29ya2VyQ2xpZW50KS5jYWxsKHRoaXMpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJfd29ya2VyXCIsIHt9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJfaW5wdXRGaWxlXCIsIHt9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ3b3JrZXJJc1JlYWR5XCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZWFkRmlsZUFzQnVmZmVyQXJyYXlcIiwgZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXNvbHZlKHRoaXMucmVzdWx0KTtcbiAgICAgICAgfTtcblxuICAgICAgICBmaWxlUmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmVqZWN0KHRoaXMuZXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJydW5Db21tYW5kXCIsIGZ1bmN0aW9uIChjb21tYW5kKSB7XG4gICAgICB2YXIgdG90YWxNZW1vcnkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDMzNTU0NDMyO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbW1hbmQgIT09IFwic3RyaW5nXCIgfHwgIWNvbW1hbmQubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbW1hbmQgc2hvdWxkIGJlIHN0cmluZyBhbmQgbm90IGVtcHR5XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuaW5wdXRGaWxlICYmIF90aGlzLmlucHV0RmlsZS50eXBlKSB7XG4gICAgICAgIF90aGlzLmNvbnZlcnRJbnB1dEZpbGVUb0FycmF5QnVmZmVyKCkudGhlbihmdW5jdGlvbiAoYXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICB3aGlsZSAoIV90aGlzLndvcmtlcklzUmVhZHkpIHt9XG5cbiAgICAgICAgICB2YXIgZmlsZW5hbWUgPSBcInZpZGVvLVwiLmNvbmNhdChEYXRlLm5vdygpLCBcIi53ZWJtXCIpO1xuICAgICAgICAgIHZhciBpbnB1dENvbW1hbmQgPSBcIi1pIFwiLmNvbmNhdChmaWxlbmFtZSwgXCIgXCIpLmNvbmNhdChjb21tYW5kKTtcblxuICAgICAgICAgIF90aGlzLndvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICB0eXBlOiBcImNvbW1hbmRcIixcbiAgICAgICAgICAgIGFyZ3VtZW50czogaW5wdXRDb21tYW5kLnNwbGl0KFwiIFwiKSxcbiAgICAgICAgICAgIGZpbGVzOiBbe1xuICAgICAgICAgICAgICBkYXRhOiBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlciksXG4gICAgICAgICAgICAgIG5hbWU6IGZpbGVuYW1lXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIHRvdGFsTWVtb3J5OiB0b3RhbE1lbW9yeVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLndvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCJjb21tYW5kXCIsXG4gICAgICAgICAgYXJndW1lbnRzOiBjb21tYW5kLnNwbGl0KFwiIFwiKSxcbiAgICAgICAgICB0b3RhbE1lbW9yeTogdG90YWxNZW1vcnlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibG9nXCIsIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShtZXNzYWdlKSA/IGNvbnNvbGUubG9nLmNhbGwobnVsbCwgbWVzc2FnZSkgOiBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpc1ZpZGVvXCIsIGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICB2YXIgZmlsZVR5cGUgPSBmaWxlLnR5cGU7XG4gICAgICByZXR1cm4gZmlsZSBpbnN0YW5jZW9mIEJsb2IgJiYgKGZpbGVUeXBlLmluY2x1ZGVzKFwidmlkZW9cIikgfHwgZmlsZVR5cGUuaW5jbHVkZXMoXCJhdWRpb1wiKSk7XG4gICAgfSk7XG5cbiAgICBfdGhpcy5pbml0V2ViV29ya2VyKCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRkZNUEVHV2Vid29ya2VyQ2xpZW50LCBbe1xuICAgIGtleTogXCJpbml0V2ViV29ya2VyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRXZWJXb3JrZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy53b3JrZXIgPSBuZXcgV29ya2VyRmlsZSh3b3JrZXJGaWxlKTtcbiAgICAgIHRoaXMubG9nO1xuXG4gICAgICB2YXIgbG9nID0gdGhpcy53b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gZXZlbnQuZGF0YTtcblxuICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSkge1xuICAgICAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT0gXCJyZWFkeVwiKSB7XG4gICAgICAgICAgICBfdGhpczIuZW1pdChcIm9uUmVhZHlcIiwgXCJmZm1wZWctYXNtLmpzIGZpbGUgaGFzIGJlZW4gbG9hZGVkLlwiKTtcblxuICAgICAgICAgICAgX3RoaXMyLndvcmtlcklzUmVhZHkgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS50eXBlID09IFwic3Rkb3V0XCIpIHtcbiAgICAgICAgICAgIF90aGlzMi5lbWl0KFwib25TdGRvdXRcIiwgbWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UudHlwZSA9PSBcInN0YXJ0XCIpIHtcbiAgICAgICAgICAgIF90aGlzMi5lbWl0KFwib25GaWxlUmVjZWl2ZWRcIiwgXCJGaWxlIFJlY2VpdmVkXCIpO1xuXG4gICAgICAgICAgICBsb2coXCJmaWxlIHJlY2VpdmVkIGZmbXBlZyBjb21tYW5kLlwiKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UudHlwZSA9PSBcImRvbmVcIikge1xuICAgICAgICAgICAgX3RoaXMyLmVtaXQoXCJvbkRvbmVcIiwgbWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlucHV0RmlsZUV4aXN0c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnB1dEZpbGVFeGlzdHMoKSB7XG4gICAgICB2YXIgaW5wdXRGaWxlID0gdGhpcy5pbnB1dEZpbGU7XG4gICAgICByZXR1cm4gISEoaW5wdXRGaWxlICYmIGlucHV0RmlsZSBpbnN0YW5jZW9mIEJsb2IgJiYgaW5wdXRGaWxlLnNpemUgJiYgaW5wdXRGaWxlLnR5cGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB1c2Ugd29ya2VyIHRvIGVuY29kZSBhdWRpb1xuICAgICAqIEBwYXJhbSB7QmxvYn0gaW5wdXRGaWxlXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheUJ1ZmZlcj59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjb252ZXJ0SW5wdXRGaWxlVG9BcnJheUJ1ZmZlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0SW5wdXRGaWxlVG9BcnJheUJ1ZmZlcigpIHtcbiAgICAgIGlmICghdGhpcy5pbnB1dEZpbGVFeGlzdHMoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnB1dCBGaWxlIGhhcyBub3QgYmVlbiBzZXRcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJlYWRGaWxlQXNCdWZmZXJBcnJheSh0aGlzLmlucHV0RmlsZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb21tYW5kXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ3b3JrZXJcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh3b3JrZXIpIHtcbiAgICAgIHRoaXMuX3dvcmtlciA9IHdvcmtlcjtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3dvcmtlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5wdXRGaWxlXCIsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoaW5wdXRGaWxlKSB7XG4gICAgICBpZiAoIXRoaXMuaXNWaWRlbyhpbnB1dEZpbGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIklucHV0IGZpbGUgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXVkaW8gb3IgYSB2aWRlb1wiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5wdXRGaWxlID0gaW5wdXRGaWxlO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5wdXRGaWxlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB1c2Ugd29ya2VyIHRvIGVuY29kZSBhdWRpb1xuICAgICAqIEBwYXJhbSB7QmxvYn0gZmlsZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxuICAgICAqL1xuXG4gIH1dKTtcblxuICByZXR1cm4gRkZNUEVHV2Vid29ya2VyQ2xpZW50O1xufShFdmVudEVtaXR0ZXIpO1xuXG5leHBvcnQgeyBGRk1QRUdXZWJ3b3JrZXJDbGllbnQgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBXZWJ3b3JrZXJDbGllbnQgZnJvbSBcIi4vRkZNUEVHV2ViV29ya2VyQ2xpZW50XCI7XG5pbXBvcnQgV2Vid29ya2VyIGZyb20gXCIuL0ZGTVBFR1dlYldvcmtlclwiO1xuZXhwb3J0IHZhciBGRk1QRUdXZWJ3b3JrZXIgPSBXZWJ3b3JrZXI7XG5leHBvcnQgdmFyIEZGTVBFR1dlYndvcmtlckNsaWVudCA9IFdlYndvcmtlckNsaWVudDtcbnZhciB3b3JrZXJDbGllbnQgPSB7XG4gIG9uOiBmdW5jdGlvbiBvbigpIHt9LFxuICBlbWl0OiBmdW5jdGlvbiBlbWl0KCkge31cbn07XG5cbnZhciBfd2luZG93ID0gZ2xvYmFsIHx8IHdpbmRvdztcblxuaWYgKF93aW5kb3cgJiYgX3dpbmRvdy5CbG9iKSB7XG4gIHdvcmtlckNsaWVudCA9IG5ldyBXZWJ3b3JrZXJDbGllbnQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd29ya2VyQ2xpZW50OyIsIi8qISB6ZXJvLWZpbGwuIE1JVCBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbi8qKlxuICogR2l2ZW4gYSBudW1iZXIsIHJldHVybiBhIHplcm8tZmlsbGVkIHN0cmluZy5cbiAqIEZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMjY3MjgzL1xuICogQHBhcmFtICB7bnVtYmVyfSB3aWR0aFxuICogQHBhcmFtICB7bnVtYmVyfSBudW1iZXJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB6ZXJvRmlsbCAod2lkdGgsIG51bWJlciwgcGFkKSB7XG4gIGlmIChudW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCBwYWQpIHtcbiAgICAgIHJldHVybiB6ZXJvRmlsbCh3aWR0aCwgbnVtYmVyLCBwYWQpXG4gICAgfVxuICB9XG4gIGlmIChwYWQgPT09IHVuZGVmaW5lZCkgcGFkID0gJzAnXG4gIHdpZHRoIC09IG51bWJlci50b1N0cmluZygpLmxlbmd0aFxuICBpZiAod2lkdGggPiAwKSByZXR1cm4gbmV3IEFycmF5KHdpZHRoICsgKC9cXC4vLnRlc3QobnVtYmVyKSA/IDIgOiAxKSkuam9pbihwYWQpICsgbnVtYmVyXG4gIHJldHVybiBudW1iZXIgKyAnJ1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbmltcG9ydCB6ZXJvRmlsbCBmcm9tIFwiemVyby1maWxsXCI7XHJcblxyXG4vKipcclxuICogT3JpZ2luYWwgZnJvbSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9oaC1tbS1zc1xyXG4gKi9cclxuXHJcbi8vIFRpbWUgdW5pdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nIHZhbHVlcyBpbiBtaWxpc2Vjb25kc1xyXG5jb25zdCBIT1VSID0gMzYwMDAwMDtcclxuY29uc3QgTUlOVVRFID0gNjAwMDA7XHJcbmNvbnN0IFNFQ09ORCA9IDEwMDA7XHJcblxyXG5jb25zdCBUSU1FX0ZPUk1BVF9FUlJNU0cgPSBcIlRpbWUgZm9ybWF0IGVycm9yXCI7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBFeHBvcnQgZnVuY3Rpb25zXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1zKG1zLCBmb3JtYXQgPSBcIm1tOnNzXCIpIHtcclxuICBpZiAodHlwZW9mIG1zICE9PSBcIm51bWJlclwiIHx8IE51bWJlci5pc05hTihtcykpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIk5hTiBlcnJvclwiKTtcclxuICB9XHJcblxyXG4gIGxldCBhYnNNcyA9IE1hdGguYWJzKG1zKTtcclxuXHJcbiAgbGV0IG5lZ2F0aXZlID0gbXMgPCAwO1xyXG4gIGxldCBob3VycyA9IE1hdGguZmxvb3IoYWJzTXMgLyBIT1VSKTtcclxuICBsZXQgbWludXRlcyA9IE1hdGguZmxvb3IoKGFic01zICUgSE9VUikgLyBNSU5VVEUpO1xyXG4gIGxldCBzZWNvbmRzID0gTWF0aC5mbG9vcigoYWJzTXMgJSBNSU5VVEUpIC8gU0VDT05EKTtcclxuICBsZXQgbWlsaXNlY29uZHMgPSBNYXRoLmZsb29yKGFic01zICUgU0VDT05EKTtcclxuXHJcbiAgcmV0dXJuIGZvcm1hdFRpbWUoXHJcbiAgICB7XHJcbiAgICAgIG5lZ2F0aXZlLFxyXG4gICAgICBob3VycyxcclxuICAgICAgbWludXRlcyxcclxuICAgICAgc2Vjb25kcyxcclxuICAgICAgbWlsaXNlY29uZHNcclxuICAgIH0sXHJcbiAgICBmb3JtYXRcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVMocywgZm9ybWF0ID0gXCJtbTpzc1wiKSB7XHJcbiAgaWYgKHR5cGVvZiBzICE9PSBcIm51bWJlclwiIHx8IE51bWJlci5pc05hTihzKSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTmFOIGVycm9yXCIpO1xyXG4gIH1cclxuXHJcbiAgbGV0IG1zID0gcyAqIFNFQ09ORDtcclxuXHJcbiAgcmV0dXJuIGZyb21NcyhtcywgZm9ybWF0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvTXModGltZSwgZm9ybWF0ID0gXCJtbTpzc1wiKSB7XHJcbiAgbGV0IHJlO1xyXG5cclxuICBpZiAoW1wibW06c3NcIiwgXCJtbTpzcy5zc3NcIiwgXCJoaDptbTpzc1wiLCBcImhoOm1tOnNzLnNzc1wiXS5pbmNsdWRlcyhmb3JtYXQpKSB7XHJcbiAgICByZSA9IC9eKC0pPyg/OihcXGRcXGQrKTopPyhcXGRcXGQpOihcXGRcXGQpKFxcLlxcZCspPyQvO1xyXG4gIH0gZWxzZSBpZiAoZm9ybWF0ID09PSBcImhoOm1tXCIpIHtcclxuICAgIHJlID0gL14oLSk/KFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoPzooXFwuXFxkKykpPyk/JC87XHJcbiAgfSBlbHNlIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihUSU1FX0ZPUk1BVF9FUlJNU0cpO1xyXG4gIH1cclxuXHJcbiAgbGV0IHJlc3VsdCA9IHJlLmV4ZWModGltZSk7XHJcbiAgaWYgKCFyZXN1bHQpIHRocm93IG5ldyBFcnJvcigpO1xyXG5cclxuICBsZXQgbmVnYXRpdmUgPSByZXN1bHRbMV0gPT09IFwiLVwiO1xyXG4gIGxldCBob3VycyA9IHJlc3VsdFsyXSB8IDA7XHJcbiAgbGV0IG1pbnV0ZXMgPSByZXN1bHRbM10gfCAwO1xyXG4gIGxldCBzZWNvbmRzID0gcmVzdWx0WzRdIHwgMDtcclxuICBsZXQgbWlsaXNlY29uZHMgPSBNYXRoLmZsb29yKCgxMDAwICogcmVzdWx0WzVdKSB8IDApO1xyXG5cclxuICBpZiAobWludXRlcyA+IDYwIHx8IHNlY29uZHMgPiA2MCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgKG5lZ2F0aXZlID8gLTEgOiAxKSAqXHJcbiAgICAoaG91cnMgKiBIT1VSICsgbWludXRlcyAqIE1JTlVURSArIHNlY29uZHMgKiBTRUNPTkQgKyBtaWxpc2Vjb25kcylcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9TKHRpbWUsIGZvcm1hdCA9IFwibW06c3NcIikge1xyXG4gIGxldCBtcyA9IHRvTXModGltZSwgZm9ybWF0KTtcclxuICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIFNFQ09ORCk7XHJcbn1cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFV0aWxpdHkgZnVuY3Rpb25zXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5mdW5jdGlvbiBmb3JtYXRUaW1lKHRpbWUsIGZvcm1hdCkge1xyXG4gIGxldCBzaG93TXM7XHJcbiAgbGV0IHNob3dTYztcclxuICBsZXQgc2hvd0hyO1xyXG5cclxuICBzd2l0Y2ggKGZvcm1hdC50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICBjYXNlIFwiaGg6bW06c3Muc3NzXCI6XHJcbiAgICAgIHNob3dNcyA9IHRydWU7XHJcbiAgICAgIHNob3dTYyA9IHRydWU7XHJcbiAgICAgIHNob3dIciA9IHRydWU7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBcImhoOm1tOnNzXCI6XHJcbiAgICAgIHNob3dNcyA9ICEhdGltZS5taWxpc2Vjb25kcztcclxuICAgICAgc2hvd1NjID0gdHJ1ZTtcclxuICAgICAgc2hvd0hyID0gdHJ1ZTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFwiaGg6bW1cIjpcclxuICAgICAgc2hvd01zID0gISF0aW1lLm1pbGlzZWNvbmRzO1xyXG4gICAgICBzaG93U2MgPSBzaG93TXMgfHwgISF0aW1lLnNlY29uZHM7XHJcbiAgICAgIHNob3dIciA9IHRydWU7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBcIm1tOnNzXCI6XHJcbiAgICAgIHNob3dNcyA9ICEhdGltZS5taWxpc2Vjb25kcztcclxuICAgICAgc2hvd1NjID0gdHJ1ZTtcclxuICAgICAgc2hvd0hyID0gISF0aW1lLmhvdXJzO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgXCJtbTpzcy5zc3NcIjpcclxuICAgICAgc2hvd01zID0gdHJ1ZTtcclxuICAgICAgc2hvd1NjID0gdHJ1ZTtcclxuICAgICAgc2hvd0hyID0gISF0aW1lLmhvdXJzO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihUSU1FX0ZPUk1BVF9FUlJNU0cpO1xyXG4gIH1cclxuXHJcbiAgbGV0IGhoID0gemVyb0ZpbGwoMiwgdGltZS5ob3Vycyk7XHJcbiAgbGV0IG1tID0gemVyb0ZpbGwoMiwgdGltZS5taW51dGVzKTtcclxuICBsZXQgc3MgPSB6ZXJvRmlsbCgyLCB0aW1lLnNlY29uZHMpO1xyXG4gIGxldCBzc3MgPSB6ZXJvRmlsbCgzLCB0aW1lLm1pbGlzZWNvbmRzKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgICh0aW1lLm5lZ2F0aXZlID8gXCItXCIgOiBcIlwiKSArXHJcbiAgICAoc2hvd0hyXHJcbiAgICAgID8gc2hvd01zXHJcbiAgICAgICAgPyBgJHtoaH06JHttbX06JHtzc30uJHtzc3N9YFxyXG4gICAgICAgIDogc2hvd1NjXHJcbiAgICAgICAgPyBgJHtoaH06JHttbX06JHtzc31gXHJcbiAgICAgICAgOiBgJHtoaH06JHttbX1gXHJcbiAgICAgIDogc2hvd01zXHJcbiAgICAgID8gYCR7bW19OiR7c3N9LiR7c3NzfWBcclxuICAgICAgOiBgJHttbX06JHtzc31gKVxyXG4gICk7XHJcbn1cclxuIiwiaW1wb3J0IFdlYlZpZGVvIGZyb20gXCIuL1dlYlZpZGVvXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAob3B0cyA9IHt9KSA9PiBuZXcgV2ViVmlkZW8ob3B0cyk7XHJcbiIsImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcclxuaW1wb3J0IHsgcmVhZERhdGFVUkwsIGFycmF5QnVmZmVyVG9CbG9iLCByZWFkQXJyYXlCdWZmZXIgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5pbXBvcnQgd29ya2VyQ2xpZW50IGZyb20gXCJmZm1wZWctd2Vid29ya2VyXCI7XHJcbmltcG9ydCB7IGZyb21TIH0gZnJvbSBcIi4vZm9ybWF0U2Vjb25kc1wiO1xyXG5cclxuY2xhc3MgV2ViVmlkZW8gZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKHZpZGVvRmlsZSkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMudmlkZW9GaWxlID0gdmlkZW9GaWxlO1xyXG4gICAgdGhpcy53b3JrZXJDbGllbnQgPSB3b3JrZXJDbGllbnQ7XHJcblxyXG4gICAgd29ya2VyQ2xpZW50Lm9uKFwib25SZWFkeVwiLCAoKSA9PiB0aGlzLmVtaXQoXCJGRk1QRUdSZWFkeVwiKSk7XHJcbiAgICB3b3JrZXJDbGllbnQub24oXCJvblN0ZG91dFwiLCBtc2cgPT4gdGhpcy5lbWl0KFwiRkZNUEVHU3Rkb3V0XCIsIG1zZykpO1xyXG4gICAgd29ya2VyQ2xpZW50Lm9uKFwib25GaWxlUmVjZWl2ZWRcIiwgKCkgPT4gdGhpcy5lbWl0KFwiRkZNUEVHRmlsZVJlY2VpdmVkXCIpKTtcclxuICAgIHdvcmtlckNsaWVudC5vbihcIm9uRG9uZVwiLCB0aGlzLmhhbmRsZURvbmVDbGllbnREb25lKTtcclxuICB9XHJcbiAgaGFuZGxlRG9uZUNsaWVudERvbmUgPSByZXN1bHQgPT4ge1xyXG4gICAgLy8gY29uc29sZS5sb2cocmVzdWx0KTtcclxuICAgIC8vIGlmICghdGhpcy5vcHRpbWl6ZWRWaWRlbykge1xyXG4gICAgLy8gICB0aGlzLm9wdGltaXplZFZpZGVvID0gdHJ1ZTtcclxuICAgIC8vICAgY29uc3QgY29udmVydGVkID0gYXJyYXlCdWZmZXJUb0Jsb2IocmVzdWx0WzBdLmRhdGEpO1xyXG4gICAgLy8gICAvLyBjb25zb2xlLmxvZyhjb252ZXJ0ZWQpO1xyXG4gICAgLy8gICB3b3JrZXJDbGllbnQuaW5wdXRGaWxlID0gY29udmVydGVkO1xyXG4gICAgLy8gICBzZXRUaW1lb3V0KHRoaXMub3B0aW1pemVWaWRlbywgNTAwKTtcclxuICAgIC8vIH0gZWxzZSB7XHJcbiAgICBjb25zdCBjb252ZXJ0ZWQgPSBhcnJheUJ1ZmZlclRvQmxvYihyZXN1bHRbMF0uZGF0YSk7XHJcbiAgICB0aGlzLmVtaXQoXCJGRk1QRUdEb25lXCIsIHJlc3VsdCk7XHJcbiAgICAvLyB9XHJcbiAgfTtcclxuICB0cmltVmlkZW8gPSAoc3RhcnQgPSAwLCBsZW5ndGgpID0+IHtcclxuICAgIGNvbnN0IHN0YXJ0U2Vjb25kcyA9IGZyb21TKHN0YXJ0LCBcImhoOm1tOnNzXCIpO1xyXG5cclxuXHJcbiAgICBjb25zb2xlLmxvZyhcIndvcmtlckNsaWVudFwiLCB3b3JrZXJDbGllbnQpO1xyXG4gICAgXHJcbiAgICAvKndvcmtlckNsaWVudC5ydW5Db21tYW5kKFxyXG4gICAgICAvL2Atc3MgJHtzdGFydFNlY29uZHN9IC1jIGNvcHkgLXQgJHtsZW5ndGh9IHNsaWNlZC1vdXRwdXQubXA0YFxyXG4gICAgICBjbWRcclxuICAgICk7Ki9cclxuXHJcbiAgICB3b3JrZXJDbGllbnQuY29udmVydElucHV0RmlsZVRvQXJyYXlCdWZmZXIoKS50aGVuKGFycmF5QnVmZmVyID0+IHtcclxuICAgICAgd2hpbGUgKCF3b3JrZXJDbGllbnQud29ya2VySXNSZWFkeSkge31cclxuICAgICAgY29uc3QgZmlsZW5hbWUgPSBgdmlkZW8tJHtEYXRlLm5vdygpfS53ZWJtYDtcclxuICAgICAgY29uc29sZS5sb2coXCJmaWxlbmFtZVwiLCBmaWxlbmFtZSk7XHJcblxyXG4gICAgICBjb25zdCBpbnB1dENvbW1hbmQgPSBgLXNzICR7c3RhcnRTZWNvbmRzfSAtdCAke2xlbmd0aH0gLWkgJHtmaWxlbmFtZX0gLXZjb2RlYyBjb3B5IC1hY29kZWMgY29weSBzbGljZWQtb3V0cHV0Lm1wNGA7XHJcbiAgICAgIGNvbnNvbGUubG9nKGB0cmltYCwgaW5wdXRDb21tYW5kKTtcclxuXHJcbiAgIC8vICAgY29uc3QgaW5wdXRDb21tYW5kID0gYC1pICR7ZmlsZW5hbWV9ICR7Y29tbWFuZH1gO1xyXG4gICAgICB3b3JrZXJDbGllbnQud29ya2VyLnBvc3RNZXNzYWdlKHtcclxuICAgICAgICB0eXBlOiBcImNvbW1hbmRcIixcclxuICAgICAgICBhcmd1bWVudHM6IGlucHV0Q29tbWFuZC5zcGxpdChcIiBcIiksXHJcbiAgICAgICAgZmlsZXM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpLFxyXG4gICAgICAgICAgICBuYW1lOiBmaWxlbmFtZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgdG90YWxNZW1vcnk6IDMzNTU0NDMyXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgXHJcbiAgfTtcclxuXHJcbiAgb3B0aW1pemVWaWRlbyA9ICgpID0+IHtcclxuICAgIHdvcmtlckNsaWVudC5ydW5Db21tYW5kKFxyXG4gICAgICBgLXN0cmljdCAtMiAtdmNvZGVjIGxpYngyNjQgLWNyZiAyMyBvdXRwdXQubXA0YCxcclxuICAgICAgMjUzNTU0NDMyXHJcbiAgICApO1xyXG4gIH07XHJcbiAgX3ZpZGVvRGF0YSA9IHt9O1xyXG4gIF92aWRlb0ZpbGUgPSBudWxsO1xyXG4gIG9wdGltaXplZFZpZGVvID0gZmFsc2U7XHJcbiAgLyoqXHJcbiAgICogQHR5cGUge0FycmF5QnVmZmVyfVxyXG4gICAqL1xyXG4gIF92aWRlb0J1ZmZlciA9IHt9O1xyXG5cclxuICByZWFkQXNBcnJheUJ1ZmZlciA9IGFzeW5jICgpID0+IHtcclxuXHQgIFxyXG5cdFxyXG5cdGNvbnNvbGUubG9nKFwicmVhZEFzQXJyYXlCdWZmZXIgIFwiLCB0aGlzLl92aWRlb0ZpbGUpO1xyXG4gICAgdGhpcy5fdmlkZW9CdWZmZXIgPSBhd2FpdCByZWFkQXJyYXlCdWZmZXIodGhpcy5fdmlkZW9GaWxlKTtcclxuICAgIHJldHVybiB0aGlzLnZpZGVvQnVmZmVyO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEByZXR1cm5zIHtCbG9ifVxyXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICovXHJcbiAgY29udmVydEJ1ZmZlclRvQmxvYiA9IGJ1ZmZlciA9PiB7XHJcbiAgICBsZXQgYmxvYiA9IG51bGw7XHJcbiAgICBidWZmZXIgPSBidWZmZXIgfHwgdGhpcy52aWRlb0J1ZmZlcjtcclxuICAgIGlmIChidWZmZXIuYnl0ZUxlbmd0aCkge1xyXG4gICAgICBibG9iID0gYXJyYXlCdWZmZXJUb0Jsb2IoYnVmZmVyKTtcclxuICAgIH1cclxuICAgIHJldHVybiBibG9iO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEByZXR1cm5zIHtGaWxlfVxyXG4gICAqL1xyXG4gIHJlYWRBc0RhdGFVUkwgPSBhc3luYyAoYnVmZmVyLCBibG9iKSA9PiB7XHJcbiAgICBidWZmZXIgPSBidWZmZXIgfHwgdGhpcy52aWRlb0J1ZmZlcjtcclxuICAgIGJsb2IgPSBibG9iIHx8IHRoaXMuY29udmVydEJ1ZmZlclRvQmxvYihidWZmZXIpO1xyXG4gICAgbGV0IGRhdGFVUkwgPSBudWxsO1xyXG4gICAgaWYgKGJsb2IpIHtcclxuICAgICAgZGF0YVVSTCA9IGF3YWl0IHJlYWREYXRhVVJMKGJsb2IpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRhdGFVUkw7XHJcbiAgfTtcclxuXHJcbiAgc2V0IHZpZGVvRmlsZShmaWxlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcInZpZGVvRmlsZVwiKTtcclxuXHJcbiAgICBpZiAoZmlsZSAmJiBmaWxlLnR5cGUpIHtcclxuICAgICAgd29ya2VyQ2xpZW50LmlucHV0RmlsZSA9IGZpbGU7XHJcbiAgICB9XHJcbiAgICB0aGlzLl92aWRlb0ZpbGUgPSBmaWxlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHZpZGVvRmlsZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl92aWRlb0ZpbGU7XHJcbiAgfVxyXG5cclxuICBnZXQgZHVyYXRpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fdmlkZW9EYXRhLmR1cmF0aW9uIHx8IDA7XHJcbiAgfVxyXG5cclxuICBnZXQgdmlkZW9EYXRhKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZpZGVvRGF0YTtcclxuICB9XHJcbiAgZ2V0IHZpZGVvQnVmZmVyKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZpZGVvQnVmZmVyO1xyXG4gIH1cclxuXHJcbiAgZGVjb2RlID0gYXN5bmMgZmlsZSA9PiB7XHJcbiAgICB0aGlzLnZpZGVvRmlsZSA9IGZpbGU7XHJcbiAgICB0aGlzLmVtaXQoXCJwcm9jZXNzaW5nRmlsZVwiKTtcclxuXHRjb25zb2xlLmxvZyhcInByb2Nlc3NpbmcgIFwiLCBmaWxlKTtcclxuICAgIC8vIFJlYWQgRmlsZSBBcyBBcnJheUJ1ZmZlclxyXG4gICAgY29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCB0aGlzLnJlYWRBc0FycmF5QnVmZmVyKCk7XHJcbiAgICAvLyBjb252ZXJ0IHRvIGRhdGFVUkxcclxuICAgIGNvbnN0IGRhdGFVUkwgPSBhd2FpdCB0aGlzLnJlYWRBc0RhdGFVUkwoYXJyYXlCdWZmZXIpO1xyXG5cclxuICAgIGxldCB2aWRlb09iamVjdFVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwodGhpcy52aWRlb0ZpbGUpO1xyXG4gICAgbGV0IHZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInZpZGVvXCIpO1xyXG4gICAgdmlkZW8uc3JjID0gdmlkZW9PYmplY3RVcmw7XHJcbiAgICB3aGlsZSAoXHJcbiAgICAgICh2aWRlby5kdXJhdGlvbiA9PT0gSW5maW5pdHkgfHwgaXNOYU4odmlkZW8uZHVyYXRpb24pKSAmJlxyXG4gICAgICB2aWRlby5yZWFkeVN0YXRlIDwgMlxyXG4gICAgKSB7XHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCAxMDAwKSk7XHJcbiAgICAgIHZpZGVvLmN1cnJlbnRUaW1lID0gMTAwMDAwMDAgKiBNYXRoLnJhbmRvbSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fdmlkZW9EYXRhID0gdmlkZW87XHJcbiAgICB0aGlzLmVtaXQoXCJwcm9jZXNzZWRGaWxlXCIpO1xyXG4gICAgcmV0dXJuIHsgZGF0YVVSTCwgYXJyYXlCdWZmZXIsIGJsb2I6IHRoaXMuY29udmVydEJ1ZmZlclRvQmxvYigpIH07XHJcbiAgfTtcclxuXHJcbiAgZ2VuZXJhdGVCdWZmZXJDaHVua3MgPSAoYXJyYXlCdWZmZXIgPSBbXSkgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBsZXQgY2h1bmtzID0gW107XHJcbiAgICAgICAgYXJyYXlCdWZmZXIgPSBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoID8gYXJyYXlCdWZmZXIgOiB0aGlzLnZpZGVvQnVmZmVyO1xyXG4gICAgICAgIGNvbnN0IHR5cGVkQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xyXG4gICAgICAgIGNvbnN0IG1pY3JvU2VjID0gMTAwMCAqIDYwO1xyXG4gICAgICAgIGxldCBzdGFydENodW5rID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gbWljcm9TZWM7IGkgPCB0eXBlZEJ1ZmZlci5ieXRlTGVuZ3RoOyBpICs9IG1pY3JvU2VjKSB7XHJcbiAgICAgICAgICBjb25zdCBfYnVmZmVyID0gYXJyYXlCdWZmZXIuc2xpY2Uoc3RhcnRDaHVuaywgaSk7XHJcbiAgICAgICAgICBjaHVua3MucHVzaChfYnVmZmVyKTtcclxuICAgICAgICAgIHN0YXJ0Q2h1bmsgPSBpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNvbHZlKGNodW5rcyk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcbiAgZXh0cmFjdEZyYW1lc0Zyb21WaWRlbyA9IChmcHMgPSAyNSkgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0aGlzLmVtaXQoXCJleHRyYWN0aW5nRnJhbWVzXCIpO1xyXG4gICAgICAgIGxldCB2aWRlbyA9IHRoaXMuX3ZpZGVvRGF0YTtcclxuICAgICAgICBsZXQgc2Vla1Jlc29sdmU7XHJcbiAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcihcInNlZWtlZFwiLCBhc3luYyBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmIChzZWVrUmVzb2x2ZSkgc2Vla1Jlc29sdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXQgZHVyYXRpb24gPSB2aWRlby5kdXJhdGlvbjtcclxuXHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGxldCBbdywgaF0gPSBbdmlkZW8udmlkZW9XaWR0aCwgdmlkZW8udmlkZW9IZWlnaHRdO1xyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHc7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGg7XHJcbiAgICAgICAgbGV0IGZyYW1lcyA9IFtdO1xyXG4gICAgICAgIGxldCBpbnRlcnZhbCA9IDEyNSAvIGZwcztcclxuICAgICAgICBsZXQgY3VycmVudFRpbWUgPSAwO1xyXG5cclxuICAgICAgICB3aGlsZSAoY3VycmVudFRpbWUgPCBkdXJhdGlvbikge1xyXG4gICAgICAgICAgdmlkZW8uY3VycmVudFRpbWUgPSBjdXJyZW50VGltZTtcclxuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHIgPT4gKHNlZWtSZXNvbHZlID0gcikpO1xyXG5cclxuICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHZpZGVvLCAwLCAwLCB3LCBoKTtcclxuICAgICAgICAgIGxldCBiYXNlNjRJbWFnZURhdGEgPSBjYW52YXMudG9EYXRhVVJMKCk7XHJcbiAgICAgICAgICBmcmFtZXMucHVzaChiYXNlNjRJbWFnZURhdGEpO1xyXG5cclxuICAgICAgICAgIGN1cnJlbnRUaW1lICs9IGludGVydmFsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVtaXQoXCJleHRyYWN0ZWRGcmFtZXNcIik7XHJcbiAgICAgICAgcmVzb2x2ZShmcmFtZXMpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBXZWJWaWRlbztcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgRmlsZVBpY2tlciBmcm9tIFwiLi9jb21wb25lbnRzL0ZpbGVQaWNrZXJcIjtcclxuaW1wb3J0IFN0YXR1cyBmcm9tIFwiLi9jb21wb25lbnRzL1N0YXR1c1wiO1xyXG5pbXBvcnQgUGxheWVyIGZyb20gXCIuL2NvbXBvbmVudHMvUGxheWVyXCI7XHJcbmltcG9ydCBDb250cm9scyBmcm9tIFwiLi9jb21wb25lbnRzL0NvbnRyb2xzXCI7XHJcbmltcG9ydCBUcmltbWVyIGZyb20gXCIuL2NvbXBvbmVudHMvVHJpbW1lclwiO1xyXG5pbXBvcnQgV2ViVmlkZW8gZnJvbSBcIi4vbGlicy9XZWJWaWRlb1wiO1xyXG5pbXBvcnQgd2ViVmlkZW9Mb2FkZXIgZnJvbSBcIi4vbGlicy9wcmVsb2FkV2ViVmlkZW9cIjtcclxuaW1wb3J0IEljb24gZnJvbSBcIi4vY29tcG9uZW50cy9JY29uXCI7XHJcbmltcG9ydCB7IG5vb3AsIGFycmF5QnVmZmVyVG9CbG9iLCByZWFkQmxvYlVSTCwgZG93bmxvYWQgfSBmcm9tIFwiLi9saWJzL3V0aWxzXCI7XHJcbmltcG9ydCBcIi4vc3R5bGUuanNcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5cclxuY2xhc3MgUmVhY3RWaWRlb1RyaW1tZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcclxuICAvKipcclxuICAgKiBAdHlwZSB7V2ViVmlkZW99XHJcbiAgICovXHJcbiAgd2ViVmlkZW8gPSB3ZWJWaWRlb0xvYWRlcih7fSk7XHJcblxyXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XHJcbiAgICBvblZpZGVvRW5jb2RlOiBQcm9wVHlwZXMuZnVuYyxcclxuICAgIHNob3dFbmNvZGVCdG46IFByb3BUeXBlcy5ib29sLFxyXG4gICAgdGltZUxpbWl0OiBQcm9wVHlwZXMubnVtYmVyLFxyXG4gICAgbG9hZGluZ0ZGTVBFR1RleHQ6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgICBcclxuICAgIGRvd25sb2FkUGF0aDogUHJvcFR5cGVzLnN0cmluZ1xyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLndlYlZpZGVvLm9uKFwicHJvY2Vzc2luZ0ZpbGVcIiwgKCkgPT4gdGhpcy51cGRhdGVJc0RlY29kaW5nKHRydWUpKTtcclxuICAgIHRoaXMud2ViVmlkZW8ub24oXCJwcm9jZXNzZWRGaWxlXCIsICgpID0+IHRoaXMudXBkYXRlSXNEZWNvZGluZyhmYWxzZSkpO1xyXG5cclxuICAgIHRoaXMud2ViVmlkZW8ub24oXCJGRk1QRUdTdGRvdXRcIiwgdGhpcy5oYW5kbGVGRk1QRUdTdGRvdXQpO1xyXG4gICAgdGhpcy53ZWJWaWRlby5vbihcIkZGTVBFR1JlYWR5XCIsIHRoaXMuaGFuZGxlRkZNUEVHUmVhZHkpO1xyXG4gICAgdGhpcy53ZWJWaWRlby5vbihcIkZGTVBFR0ZpbGVSZWNlaXZlZFwiLCB0aGlzLmhhbmRsZUZGTVBFR0ZpbGVSZWNlaXZlZCk7XHJcbiAgICB0aGlzLndlYlZpZGVvLm9uKFwiRkZNUEVHRG9uZVwiLCB0aGlzLmhhbmRsZUZGTVBFR0RvbmUpO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlRkZNUEVHU3Rkb3V0ID0gbXNnID0+IHtcclxuICAgIC8vIGNvbnNvbGUubG9nKG1zZyk7XHJcbiAgfTtcclxuXHJcbiAgaGFuZGxlRkZNUEVHUmVhZHkgPSAoKSA9PiB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIkZGTVBFRyBpcyBSZWFkeVwiKTtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBmZm1wZWdSZWFkeTogdHJ1ZSB9KTtcclxuICB9O1xyXG5cclxuICBoYW5kbGVGRk1QRUdGaWxlUmVjZWl2ZWQgPSAoKSA9PiB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIkZGTVBFRyBSZWNlaXZlZCBGaWxlXCIpO1xyXG4gIH07XHJcblxyXG4gIGhhbmRsZUZGTVBFR0RvbmUgPSByZXN1bHQgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHRpbWVSYW5nZTogeyBzdGFydDogMCwgZW5kOiB0aGlzLnN0YXRlLnRpbWVSYW5nZS5lbmQgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCB2aWRlb0Jsb2IgPSBhcnJheUJ1ZmZlclRvQmxvYihyZXN1bHRbMF0uZGF0YSk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgdGhpcy5kZWNvZGVWaWRlb0ZpbGUodmlkZW9CbG9iLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMucHJvcHMub25WaWRlb0VuY29kZSB8fCBub29wO1xyXG4gICAgICAgIGhhbmRsZXIocmVzdWx0KTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIGVuY29kaW5nOiBmYWxzZSxcclxuICAgICAgICAgIGVuY29kZWQ6IHRydWUsXHJcbiAgICAgICAgICBlbmNvZGVkVmlkZW86IHZpZGVvQmxvYlxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0sIDMwMCk7XHJcbiAgfTtcclxuXHJcbiAgZGVmYXVsdFN0YXRlID0ge1xyXG4gICAgZGVjb2Rpbmc6IGZhbHNlLFxyXG4gICAgZW5jb2Rpbmc6IGZhbHNlLFxyXG4gICAgZW5jb2RlZDogZmFsc2UsXHJcbiAgICBwbGF5VmlkZW86IGZhbHNlLFxyXG4gICAgdmlkZW9EYXRhVVJMOiBcIlwiLFxyXG4gICAgdmlkZW9GcmFtZXM6IFtdLFxyXG4gICAgaXNEZWNvZGluZzogZmFsc2UsXHJcbiAgICB0aW1lUmFuZ2U6IHsgc3RhcnQ6IDUsIGVuZDogdGhpcy5wcm9wcy50aW1lTGltaXQgfHwgMTUgfSxcclxuICAgIGVuY29kZWRWaWRlbzogbnVsbCxcclxuICAgIHBsYXllZFNlY29uZHM6IDAsXHJcbiAgICBmZm1wZWdSZWFkeTogZmFsc2VcclxuICB9O1xyXG5cclxuICBzdGF0ZSA9IHRoaXMuZGVmYXVsdFN0YXRlO1xyXG5cclxuICB1cGRhdGVWaWRlb0RhdGFVUkwgPSBkYXRhVVJMID0+IHRoaXMuc2V0U3RhdGUoeyB2aWRlb0RhdGFVUkw6IGRhdGFVUkwgfSk7XHJcblxyXG4gIHVwZGF0ZVZpZGVvRnJhbWVzID0gZnJhbWVzID0+IHRoaXMuc2V0U3RhdGUoeyB2aWRlb0ZyYW1lczogZnJhbWVzIH0pO1xyXG5cclxuICB1cGRhdGVJc0RlY29kaW5nID0gc3RhdGUgPT4gdGhpcy5zZXRTdGF0ZSh7IHVwZGF0ZUlzRGVjb2Rpbmc6IHN0YXRlIH0pO1xyXG4gIHVwZGF0ZVZpZGVvRHVyYXRpb24gPSBkdXJhdGlvbiA9PlxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHVwZGF0ZVZpZGVvRHVyYXRpb246IGR1cmF0aW9uIH0pO1xyXG5cclxuICBkZWNvZGVWaWRlb0ZpbGUgPSAoZmlsZSwgZG9uZUNCID0gbm9vcCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRlY29kaW5nOiB0cnVlIH0pO1xyXG4gICAgY29uc3Qgd2ViVmlkZW8gPSB0aGlzLndlYlZpZGVvO1xyXG5cdFxyXG5cdFxyXG4gICAgd2ViVmlkZW8udmlkZW9GaWxlID0gZmlsZTtcclxuICAgIHdlYlZpZGVvXHJcbiAgICAgIC5kZWNvZGUoZmlsZSlcclxuICAgICAgLnRoZW4oKHsgYmxvYiwgYXJyYXlCdWZmZXIsIGRhdGFVUkwgfSkgPT4ge1xyXG4gICAgICAgIHRoaXMudXBkYXRlVmlkZW9EYXRhVVJMKGRhdGFVUkwpO1xyXG4gICAgICAgIGNvbnN0IHRpbWVSYW5nZVN0YXJ0ID0gdGhpcy5zdGF0ZS50aW1lUmFuZ2Uuc3RhcnQ7XHJcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSB0aGlzLndlYlZpZGVvLnZpZGVvRGF0YS5kdXJhdGlvbjtcclxuICAgICAgICBjb25zdCB0aW1lTGltaXQgPSB0aW1lUmFuZ2VTdGFydCArICh0aGlzLnByb3BzLnRpbWVMaW1pdCB8fCAxMCk7XHJcbiAgICAgICAgY29uc3QgdGltZVJhbmdlRW5kID0gZHVyYXRpb24gPiB0aW1lTGltaXQgPyB0aW1lTGltaXQgOiBkdXJhdGlvbjtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHRpbWVSYW5nZTogeyBzdGFydDogdGltZVJhbmdlU3RhcnQsIGVuZDogdGltZVJhbmdlRW5kIH0sXHJcbiAgICAgICAgICBwbGF5ZWRTZWNvbmRzOiAodGltZVJhbmdlRW5kIC0gdGltZVJhbmdlU3RhcnQpIC8gMiArIHRpbWVSYW5nZVN0YXJ0XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRlY29kaW5nOiBmYWxzZSB9KTtcclxuICAgICAgICBkb25lQ0IoKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGUgPT4gY29uc29sZS5sb2coZSkpO1xyXG4gIH07XHJcbiAgaGFuZGxlRmlsZVNlbGVjdGVkID0gZmlsZSA9PiB7XHJcbiAgICB0aGlzLmRlY29kZVZpZGVvRmlsZShmaWxlKTtcclxuICB9O1xyXG5cclxuICBoYW5kbGVWaWRlb1RyaW0gPSB0aW1lID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyB0aW1lUmFuZ2U6IHRpbWUgfSk7XHJcbiAgfTtcclxuICBoYW5kbGVFbmNvZGVWaWRlbyA9IHRpbWVSYW5nZSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgZW5jb2Rpbmc6IHRydWUsIHZpZGVvRGF0YVVSTDogXCJcIiwgcGxheVZpZGVvOiBmYWxzZSB9KTtcclxuICAgIGNvbnN0IHRpbWVEaWZmZXJlbmNlID0gdGltZVJhbmdlLmVuZCAtIHRpbWVSYW5nZS5zdGFydDtcclxuICAgIC8vIGNvbnNvbGUubG9nKHRpbWVSYW5nZSk7XHJcbiAgICB0aGlzLndlYlZpZGVvLnRyaW1WaWRlbyh0aW1lUmFuZ2Uuc3RhcnQsIHRpbWVEaWZmZXJlbmNlKTtcclxuICB9O1xyXG4gIGhhbmRsZVBsYXlQYXVzZVZpZGVvID0gKCkgPT4ge1xyXG4gICAgY29uc3QgeyBwbGF5VmlkZW8gfSA9IHRoaXMuc3RhdGU7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgcGxheVZpZGVvOiAhcGxheVZpZGVvIH0pO1xyXG4gIH07XHJcbiAgaGFuZGxlUGxheWVyUGF1c2UgPSAoKSA9PiB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInBhdXNlIHZpZGVvXCIpO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHBsYXlWaWRlbzogZmFsc2UgfSk7XHJcbiAgfTtcclxuICBoYW5kbGVQbGF5ZXJQbGF5ID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHBsYXlWaWRlbzogdHJ1ZSB9KTtcclxuICB9O1xyXG4gIGhhbmRsZVBsYXllclByb2dyZXNzID0gc2Vjb25kcyA9PiB7XHJcbiAgICBpZiAodGhpcy5zdGF0ZS5wbGF5VmlkZW8pIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHBsYXllZFNlY29uZHM6IHNlY29uZHMgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBoYW5kbGVSZXNlbGVjdEZpbGUgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgLi4udGhpcy5kZWZhdWx0U3RhdGUsXHJcbiAgICAgIGZmbXBlZ1JlYWR5OiB0cnVlXHJcbiAgICB9KTtcclxuICB9O1xyXG4gIFZpZGVvUGxheWVyV2l0aFRyaW1tZXIgPSAoeyBzaG93VHJpbW1lciB9KSA9PiB7XHJcbiAgICBjb25zdCB7IGRlY29kaW5nLCBlbmNvZGluZywgZW5jb2RlZCwgdmlkZW9EYXRhVVJMIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJWaWRlb1BsYXllcldpdGhUcmltbWVyVmlkZW9QbGF5ZXJXaXRoVHJpbW1lclwiPlxyXG4gICAgICAgIHshZGVjb2RpbmcgJiYgIWVuY29kaW5nICYmIHZpZGVvRGF0YVVSTCAmJiAoXHJcbiAgICAgICAgICA8UGxheWVyXHJcbiAgICAgICAgICAgIHNyYz17dGhpcy5zdGF0ZS52aWRlb0RhdGFVUkx9XHJcbiAgICAgICAgICAgIHRpbWVSYW5nZT17dGhpcy5zdGF0ZS50aW1lUmFuZ2V9XHJcbiAgICAgICAgICAgIHRpbWVMaW1pdD17dGhpcy5wcm9wcy50aW1lTGltaXR9XHJcbiAgICAgICAgICAgIHBsYXlWaWRlbz17dGhpcy5zdGF0ZS5wbGF5VmlkZW99XHJcbiAgICAgICAgICAgIG9uUGxheWVyUGxheT17dGhpcy5oYW5kbGVQbGF5ZXJQbGF5fVxyXG4gICAgICAgICAgICBvblBsYXllclBhdXNlPXt0aGlzLmhhbmRsZVBsYXllclBhdXNlfVxyXG4gICAgICAgICAgICBvblBsYXllclByb2dyZXNzPXt0aGlzLmhhbmRsZVBsYXllclByb2dyZXNzfVxyXG4gICAgICAgICAgICB2aWREdXJhdGlvbj17dGhpcy53ZWJWaWRlby52aWRlb0RhdGEuZHVyYXRpb259XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHshZGVjb2RpbmcgJiYgIWVuY29kaW5nICYmIHZpZGVvRGF0YVVSTCAmJiAoXHJcbiAgICAgICAgICAgICAgPENvbnRyb2xzXHJcbiAgICAgICAgICAgICAgICBvbkRvd25sb2FkPXsoKSA9PiB0aGlzLmhhbmRsZURvd25sb2FkVmlkZW8odGhpcy5zdGF0ZS5lbmNvZGVkVmlkZW8pfVxyXG4gICAgICAgICAgICAgICAgY2FuRG93bmxvYWQ9e2VuY29kZWR9XHJcbiAgICAgICAgICAgICAgICBzaG93RW5jb2RlQnRuPXt0aGlzLnByb3BzLnNob3dFbmNvZGVCdG59XHJcbiAgICAgICAgICAgICAgICBvblJlc2VsZWN0RmlsZT17dGhpcy5oYW5kbGVSZXNlbGVjdEZpbGV9XHJcbiAgICAgICAgICAgICAgICBvbkVuY29kZT17KCkgPT4gdGhpcy5oYW5kbGVFbmNvZGVWaWRlbyh0aGlzLnN0YXRlLnRpbWVSYW5nZSl9XHJcbiAgICAgICAgICAgICAgICBvblBsYXlQYXVzZUNsaWNrPXt0aGlzLmhhbmRsZVBsYXlQYXVzZVZpZGVvfVxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc2luZz17ZW5jb2Rpbmd9XHJcbiAgICAgICAgICAgICAgICBwbGF5aW5nPXt0aGlzLnN0YXRlLnBsYXlWaWRlb31cclxuICAgICAgICAgICAgICAgIHZpZER1cmF0aW9uPXt0aGlzLndlYlZpZGVvLnZpZGVvRGF0YS5kdXJhdGlvbn1cclxuICAgICAgICAgICAgICAgIGZyYW1lQ3VycmVudFg9eyh0aGlzLnN0YXRlLnRpbWVSYW5nZS5zdGFydCAvIHRoaXMud2ViVmlkZW8udmlkZW9EYXRhLmR1cmF0aW9uKSAqIDEwMH1cclxuICAgICAgICAgICAgICAgIGZyYW1lQ3VycmVudFdpZHRoPXsoKHRoaXMuc3RhdGUudGltZVJhbmdlLmVuZCAtIHRoaXMuc3RhdGUudGltZVJhbmdlLnN0YXJ0KSAvIHRoaXMud2ViVmlkZW8udmlkZW9EYXRhLmR1cmF0aW9uKSAqIDEwMH1cclxuICAgICAgICAgICAgICAgIGZyYW1lQ3VycmVudFBsYXllZFg9eyh0aGlzLnN0YXRlLnBsYXllZFNlY29uZHMvIHRoaXMud2ViVmlkZW8udmlkZW9EYXRhLmR1cmF0aW9uKSAqIDEwMH1cclxuICAgICAgICAgICAgICAgIG9uUGxheWVyUHJvZ3Jlc3M9e3RoaXMuaGFuZGxlUGxheWVyUHJvZ3Jlc3N9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgIDwvUGxheWVyPlxyXG4gICAgICAgICl9XHJcbiAgICAgICAge3Nob3dUcmltbWVyICYmIChcclxuICAgICAgICAgIDxUcmltbWVyXHJcbiAgICAgICAgICAgIG9uUGF1c2VQbGF5ZXI9e3RoaXMuaGFuZGxlUGxheWVyUGF1c2V9XHJcbiAgICAgICAgICAgIHNob3dUcmltbWVyPXt0aGlzLnN0YXRlLnZpZGVvRGF0YVVSTH1cclxuICAgICAgICAgICAgZHVyYXRpb249e3RoaXMud2ViVmlkZW8udmlkZW9EYXRhLmR1cmF0aW9ufVxyXG4gICAgICAgICAgICBvblRyaW09e3RoaXMuaGFuZGxlVmlkZW9UcmltfVxyXG4gICAgICAgICAgICB0aW1lTGltaXQ9e3RoaXMucHJvcHMudGltZUxpbWl0fVxyXG4gICAgICAgICAgICB0aW1lUmFuZ2VMaW1pdD17dGhpcy5wcm9wcy50aW1lUmFuZ2V9XHJcbiAgICAgICAgICAgIHRpbWVSYW5nZT17dGhpcy5zdGF0ZS50aW1lUmFuZ2V9XHJcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lPXt0aGlzLnN0YXRlLnBsYXllZFNlY29uZHN9XHJcbiAgICAgICAgICAgIG9uUGxheWVyUHJvZ3Jlc3M9e3RoaXMuaGFuZGxlUGxheWVyUHJvZ3Jlc3N9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICl9XHJcblxyXG4gICAgICAgIFxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfTtcclxuXHJcbiAgZG93bmxvYWRWaWRlbyA9KCkgPT5cclxuICB7XHJcbiAgICB0aGlzLmhhbmRsZURvd25sb2FkVmlkZW8odGhpcy5zdGF0ZS5lbmNvZGVkVmlkZW8pO1xyXG4gIH07XHJcbiAgaGFuZGxlRG93bmxvYWRWaWRlbyA9IGVuY29kZWRWaWRlbyA9PiB7XHJcbiAgICBjb25zdCBibG9iVVJMID0gcmVhZEJsb2JVUkwoZW5jb2RlZFZpZGVvKTtcclxuXHJcblxyXG4gICAgbGV0IHBhdGggPSB0aGlzLnByb3BzLmRvd25sb2FkUGF0aCA/IHRoaXMucHJvcHMuZG93bmxvYWRQYXRoIDogXCJ0cmltbWVkLm1wNFwiO1xyXG4gICAgZG93bmxvYWQoYmxvYlVSTCwgcGF0aCk7Ly8gXCJ0cmltbWVkLm1wNFwiKTtcclxuICB9O1xyXG4gIFZpZGVvUGxheWVyTm9UcmltbWVyID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIDx0aGlzLlZpZGVvUGxheWVyV2l0aFRyaW1tZXIgLz47XHJcbiAgfTtcclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGRlY29kaW5nLFxyXG4gICAgICBlbmNvZGluZyxcclxuICAgICAgZW5jb2RlZCxcclxuICAgICAgdmlkZW9EYXRhVVJMLFxyXG4gICAgICBmZm1wZWdSZWFkeVxyXG4gICAgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJ2dC1tYWluLWNvbnRhaW5lclwiPlxyXG4gICAgICAgIHshZmZtcGVnUmVhZHkgJiYgKFxyXG4gICAgICAgICAgPFN0YXR1cz5cclxuICAgICAgICAgICAgPEljb24gbmFtZT1cInNwaW5cIiBjbGFzc05hbWU9XCJydnQtaWNvbi1zcGluXCIgLz5cclxuICAgICAgICAgICAge3RoaXMucHJvcHMubG9hZGluZ0ZGTVBFR1RleHQgfHwgXCJQTEVBU0UgV0FJVC4uLlwifVxyXG4gICAgICAgICAgPC9TdGF0dXM+XHJcbiAgICAgICAgKX1cclxuICAgICAgICB7ZmZtcGVnUmVhZHkgJiYgZW5jb2RlZCAmJiA8dGhpcy5WaWRlb1BsYXllck5vVHJpbW1lciAvPn1cclxuICAgICAgICB7ZmZtcGVnUmVhZHkgJiYgIWVuY29kZWQgJiYgKFxyXG4gICAgICAgICAgPD5cclxuICAgICAgICAgICAgeyFkZWNvZGluZyAmJiAhZW5jb2RpbmcgJiYgIXZpZGVvRGF0YVVSTCAmJiAoXHJcbiAgICAgICAgICAgICAgPEZpbGVQaWNrZXJcclxuICAgICAgICAgICAgICAgIG9uRmlsZVNlbGVjdGVkPXt0aGlzLmhhbmRsZUZpbGVTZWxlY3RlZH1cclxuICAgICAgICAgICAgICAgIG1pblNpemU9e3RoaXMucHJvcHMubWluU2l6ZX1cclxuICAgICAgICAgICAgICAgIG1heFNpemU9e3RoaXMucHJvcHMubWF4U2l6ZX1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApfVxyXG4gICAgICAgICAgICB7KGRlY29kaW5nIHx8IGVuY29kaW5nKSAmJiAoXHJcbiAgICAgICAgICAgICAgPFN0YXR1cz5cclxuICAgICAgICAgICAgICAgIDxJY29uIG5hbWU9XCJzcGluXCIgY2xhc3NOYW1lPVwicnZ0LWljb24tc3BpblwiIC8+XHJcbiAgICAgICAgICAgICAgICB7ZW5jb2RpbmcgPyBcIkVOQ09ESU5HIFZJREVPXCIgOiBcIkRFQ09ESU5HIFZJREVPXCJ9Li4uXHJcbiAgICAgICAgICAgICAgPC9TdGF0dXM+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgIDx0aGlzLlZpZGVvUGxheWVyV2l0aFRyaW1tZXIgc2hvd1RyaW1tZXI9e3RydWV9IC8+XHJcbiAgICAgICAgICA8Lz5cclxuICAgICAgICApfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcHJlbG9hZFdlYlZpZGVvID0gd2ViVmlkZW9Mb2FkZXI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSZWFjdFZpZGVvVHJpbW1lcjtcclxuIl0sIm5hbWVzIjpbInJlYWRGaWxlIiwiZmlsZSIsImRhdGFUeXBlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVzdWx0Iiwib25lcnJvciIsImVyciIsIm5vb3AiLCJhcnJheUJ1ZmZlclRvQmxvYiIsImJ1ZmZlciIsIkJsb2IiLCJVaW50OEFycmF5IiwiYnl0ZUxlbmd0aCIsInR5cGUiLCJuYW1lIiwiRG93bmxvYWQiLCJjbGFzc05hbWUiLCJSZWFjdCIsInZpZXdCb3giLCJ4bWxucyIsImQiLCJmaWxsIiwiTXVzaWMiLCJQbGF5IiwiaGVpZ2h0Iiwid2lkdGgiLCJQYXVzZSIsIlJlcGxheSIsIlNwaW4iLCJJY29uIiwicHJvcHMiLCJFbCIsInRyaW0iLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJ0aHJvdyIsInJldHVybiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwidGhpcyIsIm4iLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJjYWxsIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsIl9fcmVhZCIsIm8iLCJtIiwiciIsImkiLCJhciIsImVycm9yIiwiX19zcHJlYWQiLCJhcmd1bWVudHMiLCJjb25jYXQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJDT01NT05fTUlNRV9UWVBFUyIsIk1hcCIsInRvRmlsZVdpdGhQYXRoIiwicGF0aCIsImxhc3RJbmRleE9mIiwiZXh0Iiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSIsImdldCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwid2l0aE1pbWVUeXBlIiwid2Via2l0UmVsYXRpdmVQYXRoIiwiRklMRVNfVE9fSUdOT1JFIiwiZnJvbUV2ZW50IiwiZXZ0IiwidHNsaWJfMS5fX2F3YWl0ZXIiLCJ0c2xpYl8xLl9fZ2VuZXJhdG9yIiwiX2EiLCJkYXRhVHJhbnNmZXIiLCJpc0RyYWdFdnQiLCJkdCIsIml0ZW1zIiwiZnJvbUxpc3QiLCJmaWx0ZXIiLCJpdGVtIiwia2luZCIsImFsbCIsIm1hcCIsInRvRmlsZVByb21pc2VzIiwibm9JZ25vcmVkRmlsZXMiLCJmbGF0dGVuIiwicmVkdWNlIiwiYWNjIiwiZmlsZXMiLCJ0c2xpYl8xLl9fc3ByZWFkIiwiQXJyYXkiLCJpc0FycmF5IiwiZ2V0RGF0YVRyYW5zZmVyRmlsZXMiLCJpc0lucHV0IiwidGFyZ2V0IiwiZ2V0SW5wdXRGaWxlcyIsImluZGV4T2YiLCJ3ZWJraXRHZXRBc0VudHJ5IiwiZnJvbURhdGFUcmFuc2Zlckl0ZW0iLCJlbnRyeSIsImlzRGlyZWN0b3J5IiwiZnJvbURpckVudHJ5IiwiZ2V0QXNGaWxlIiwiZndwIiwiZnJvbUVudHJ5IiwiZnVsbFBhdGgiLCJmcm9tRmlsZUVudHJ5IiwiY3JlYXRlUmVhZGVyIiwiZW50cmllcyIsInJlYWRFbnRyaWVzIiwiX3RoaXMiLCJiYXRjaCIsImVycl8xIiwiZXhwb3J0cyIsImwiLCJtb2R1bGUiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIkZ1bmN0aW9uIiwiX19nIiwidmVyc2lvbiIsIl9fZSIsImEiLCJ0b1N0cmluZyIsInNsaWNlIiwidSIsInN0b3JlIiwiYyIsInMiLCJwIiwiRiIsIkciLCJoIiwiUyIsIngiLCJCIiwicHJvdG90eXBlIiwiYiIsIlUiLCJjb3JlIiwiVyIsIlIiLCJyYW5kb20iLCJtaW4iLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInJlcGxhY2UiLCJzb21lIiwiY2hhckF0IiwiZW5kc1dpdGgiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ2YWx1ZU9mIiwiaW5zcGVjdFNvdXJjZSIsImpvaW4iLCJTdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsInciLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwiY29uc3RydWN0b3IiLCJmaWxlQWNjZXB0ZWQiLCJhY2NlcHQiLCJhY2NlcHRzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJldmVudCIsImNhbmNlbEJ1YmJsZSIsImlzRXZ0V2l0aEZpbGVzIiwidHlwZXMiLCJvbkRvY3VtZW50RHJhZ092ZXIiLCJwcmV2ZW50RGVmYXVsdCIsImNvbXBvc2VFdmVudEhhbmRsZXJzIiwiX2xlbiIsImZucyIsIl9rZXkiLCJfbGVuMiIsImFyZ3MiLCJfa2V5MiIsImZuIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiYXJyMiIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJmcm9tIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIl9zbGljZWRUb0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsInVuZGVmaW5lZCIsIl9zIiwiX2kiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfbm9uSXRlcmFibGVSZXN0IiwiX29iamVjdFNwcmVhZCIsInNvdXJjZSIsIm93bktleXMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsIl90eXBlb2YiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZVN5bWJvbEtleXMiLCJEcm9wem9uZSIsImZvcndhcmRSZWYiLCJfcmVmIiwicmVmIiwiY2hpbGRyZW4iLCJfdXNlRHJvcHpvbmUiLCJvcGVuRmlsZURpYWxvZyIsImlucHV0UmVmIiwiY3VycmVudCIsImRpc3BhdGNoIiwiY2xpY2siLCJvbldpbmRvd0ZvY3VzIiwiaXNGaWxlRGlhbG9nQWN0aXZlIiwic2V0VGltZW91dCIsIm9uRmlsZURpYWxvZ0NhbmNlbCIsIl9yZWYyIiwiX3JlZjIkZGlzYWJsZWQiLCJkaXNhYmxlZCIsIl9yZWYyJGdldEZpbGVzRnJvbUV2ZSIsImdldEZpbGVzRnJvbUV2ZW50IiwiX3JlZjIkbWF4U2l6ZSIsIm1heFNpemUiLCJJbmZpbml0eSIsIl9yZWYyJG1pblNpemUiLCJtaW5TaXplIiwiX3JlZjIkbXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uRHJhZ0VudGVyIiwib25EcmFnTGVhdmUiLCJvbkRyYWdPdmVyIiwib25Ecm9wIiwib25Ecm9wQWNjZXB0ZWQiLCJvbkRyb3BSZWplY3RlZCIsIl9yZWYyJHByZXZlbnREcm9wT25EbyIsInByZXZlbnREcm9wT25Eb2N1bWVudCIsIl9yZWYyJG5vQ2xpY2siLCJub0NsaWNrIiwiX3JlZjIkbm9LZXlib2FyZCIsIm5vS2V5Ym9hcmQiLCJfcmVmMiRub0RyYWciLCJub0RyYWciLCJfcmVmMiRub0RyYWdFdmVudHNCdWIiLCJub0RyYWdFdmVudHNCdWJibGluZyIsInJvb3RSZWYiLCJ1c2VSZWYiLCJfdXNlUmVkdWNlcjIiLCJ1c2VSZWR1Y2VyIiwicmVkdWNlciIsImluaXRpYWxTdGF0ZSIsInN0YXRlIiwiaXNGb2N1c2VkIiwiZHJhZ2dlZEZpbGVzIiwidXNlRWZmZWN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbkRvY3VtZW50RHJvcCIsImNvbnRhaW5zIiwiZHJhZ1RhcmdldHNSZWYiLCJvbktleURvd25DYiIsInVzZUNhbGxiYWNrIiwiaXNFcXVhbE5vZGUiLCJrZXlDb2RlIiwib25Gb2N1c0NiIiwib25CbHVyQ2IiLCJvbkNsaWNrQ2IiLCJ1c2VyQWdlbnQiLCJuYXZpZ2F0b3IiLCJpc0llIiwiaXNFZGdlIiwiaXNJZU9yRWRnZSIsImNvbXBvc2VIYW5kbGVyIiwiY29tcG9zZUtleWJvYXJkSGFuZGxlciIsImNvbXBvc2VEcmFnSGFuZGxlciIsIm9uRHJhZ0VudGVyQ2IiLCJwZXJzaXN0Iiwic3RvcFByb3BhZ2F0aW9uIiwiaXNEcmFnQWN0aXZlIiwib25EcmFnT3ZlckNiIiwiZHJvcEVmZmVjdCIsIl91bnVzZWQiLCJvbkRyYWdMZWF2ZUNiIiwidGFyZ2V0cyIsIm9uRHJvcENiIiwiYWNjZXB0ZWRGaWxlcyIsInJlamVjdGVkRmlsZXMiLCJzaXplIiwiZmlsZU1hdGNoU2l6ZSIsInNwbGljZSIsImdldFJvb3RQcm9wcyIsInVzZU1lbW8iLCJfcmVmMyIsIl9yZWYzJHJlZktleSIsInJlZktleSIsIm9uS2V5RG93biIsIm9uRm9jdXMiLCJvbkJsdXIiLCJvbkNsaWNrIiwicmVzdCIsInRhYkluZGV4Iiwib25JbnB1dEVsZW1lbnRDbGljayIsImdldElucHV0UHJvcHMiLCJfcmVmNCIsIl9yZWY0JHJlZktleSIsIm9uQ2hhbmdlIiwic3R5bGUiLCJkaXNwbGF5IiwiYXV0b0NvbXBsZXRlIiwiZmlsZUNvdW50IiwiaXNNdWx0aXBsZUFsbG93ZWQiLCJpc0RyYWdBY2NlcHQiLCJldmVyeSIsImFsbEZpbGVzQWNjZXB0ZWQiLCJpc0RyYWdSZWplY3QiLCJvcGVuIiwidXNlRHJvcHpvbmUiLCJGcmFnbWVudCIsImRpc3BsYXlOYW1lIiwiZnVuYyIsIm9uZU9mVHlwZSIsImFycmF5T2YiLCJib29sIiwibnVtYmVyIiwiYWN0aW9uIiwiRmlsZVBpY2tlciIsInRvTUIiLCJieXRlIiwicm91bmQiLCJ2aWRlbyIsIm9uRmlsZVNlbGVjdGVkIiwiTUFYX1NJWkUiLCJNSU5fU0laRSIsIlN0YXR1cyIsInNyYyIsIm9wdHMiLCJjYiIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNjcmlwdCIsImNoYXJzZXQiLCJhc3luYyIsImF0dHJzIiwiYXR0ciIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZXMiLCJ0ZXh0Iiwic3RkT25FbmQiLCJpZU9uRW5kIiwiYXBwZW5kQ2hpbGQiLCJFcnJvciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsIm9wdGlvbnMiLCJjbG9uZSIsImlzTWVyZ2VhYmxlT2JqZWN0IiwiZGVlcG1lcmdlIiwidmFsIiwiZW1wdHlUYXJnZXQiLCJkZWZhdWx0QXJyYXlNZXJnZSIsImVsZW1lbnQiLCJnZXRLZXlzIiwic3ltYm9sIiwiZ2V0RW51bWVyYWJsZU93blByb3BlcnR5U3ltYm9scyIsIm1lcmdlT2JqZWN0IiwiZGVzdGluYXRpb24iLCJjdXN0b21NZXJnZSIsImdldE1lcmdlRnVuY3Rpb24iLCJhcnJheU1lcmdlIiwic291cmNlSXNBcnJheSIsInRhcmdldElzQXJyYXkiLCJzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiaXNOb25OdWxsT2JqZWN0Iiwic3RyaW5nVmFsdWUiLCIkJHR5cGVvZiIsImlzUmVhY3RFbGVtZW50IiwiaXNTcGVjaWFsIiwiZm9yIiwiYXJyYXkiLCJwcmV2IiwiX3Byb3BUeXBlczIiLCJfcHJvcFR5cGVzIiwic2hhcGUiLCJvYmplY3QiLCJ1cmwiLCJwbGF5aW5nIiwibG9vcCIsImNvbnRyb2xzIiwidm9sdW1lIiwibXV0ZWQiLCJwbGF5YmFja1JhdGUiLCJwcm9ncmVzc0ludGVydmFsIiwicGxheXNpbmxpbmUiLCJwaXAiLCJsaWdodCIsIndyYXBwZXIiLCJyZW5kZXIiLCJpc1JlcXVpcmVkIiwiY29uZmlnIiwic291bmRjbG91ZCIsInByZWxvYWQiLCJ5b3V0dWJlIiwicGxheWVyVmFycyIsImVtYmVkT3B0aW9ucyIsImZhY2Vib29rIiwiYXBwSWQiLCJkYWlseW1vdGlvbiIsInBhcmFtcyIsInZpbWVvIiwicGxheWVyT3B0aW9ucyIsImF0dHJpYnV0ZXMiLCJ0cmFja3MiLCJmb3JjZVZpZGVvIiwiZm9yY2VBdWRpbyIsImZvcmNlSExTIiwiZm9yY2VEQVNIIiwiaGxzT3B0aW9ucyIsImhsc1ZlcnNpb24iLCJkYXNoVmVyc2lvbiIsIndpc3RpYSIsIm1peGNsb3VkIiwidHdpdGNoIiwib25SZWFkeSIsIm9uU3RhcnQiLCJvblBsYXkiLCJvblBhdXNlIiwib25CdWZmZXIiLCJvbkJ1ZmZlckVuZCIsIm9uRW5kZWQiLCJvbkVycm9yIiwib25EdXJhdGlvbiIsIm9uU2VlayIsIm9uUHJvZ3Jlc3MiLCJvbkVuYWJsZVBJUCIsIm9uRGlzYWJsZVBJUCIsInZpc3VhbCIsImJ1eWluZyIsImxpa2luZyIsImRvd25sb2FkIiwic2hhcmluZyIsInNob3dfY29tbWVudHMiLCJzaG93X3BsYXljb3VudCIsInNob3dpbmZvIiwicmVsIiwiaXZfbG9hZF9wb2xpY3kiLCJtb2Rlc3RicmFuZGluZyIsImFwaSIsImVuZHNjcmVlbi1lbmFibGUiLCJhdXRvcGF1c2UiLCJieWxpbmUiLCJwb3J0cmFpdCIsInRpdGxlIiwiaGlkZV9jb3ZlciIsInNsaWNlSXRlcmF0b3IiLCJwYXJzZVRpbWVQYXJhbSIsIk1BVENIX1NUQVJUX1FVRVJZIiwiTUFUQ0hfRU5EX1FVRVJZIiwic3Vic3RyIiwic2RrR2xvYmFsIiwic2RrUmVhZHkiLCJpc0xvYWRlZCIsImZldGNoU2NyaXB0IiwiX2xvYWRTY3JpcHQyIiwicmVzb2x2ZXMiLCJvbkxvYWRlZCIsInNkayIsInByZXZpb3VzT25SZWFkeSIsImRlZmF1bHRQcm9wcyIsInNob3dXYXJuaW5nIiwiX2RlZXBtZXJnZTIiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiX3Byb3BzIiwiREVQUkVDQVRFRF9DT05GSUdfUFJPUFMiLCJtZXNzYWdlIiwiY29uc29sZSIsIndhcm4iLCJhcnJheXMiLCJvbWl0S2V5cyIsIm91dHB1dCIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsIm1ldGhvZCIsIl9wbGF5ZXIiLCJwbGF5ZXIiLCJpc09iamVjdCIsImlzRXF1YWwiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyIsIl9kaWRJdGVyYXRvckVycm9yMyIsIl9pdGVyYXRvckVycm9yMyIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJNZWRpYVN0cmVhbSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbG9hZFNjcmlwdCIsIl9kZWVwbWVyZ2UiLCJNQVRDSF9TVEFSVF9TVEFNUCIsIk1BVENIX05VTUVSSUMiLCJwYXR0ZXJuIiwibWF0Y2giLCJzdGFtcCIsInNlY29uZHMiLCJleGVjIiwiX2FycmF5MiIsImNvdW50IiwicGVyaW9kIiwicGFyc2VJbnQiLCJwYXJzZVRpbWVTdHJpbmciLCJ0ZXN0IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJfY3JlYXRlQ2xhc3MiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiX3JlYWN0MiIsIl9yZWFjdCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJQbGF5ZXIiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsIkNvbXBvbmVudCIsIm1vdW50ZWQiLCJsb2FkIiwicHJvZ3Jlc3MiLCJjbGVhclRpbWVvdXQiLCJwcm9ncmVzc1RpbWVvdXQiLCJkdXJhdGlvbkNoZWNrVGltZW91dCIsImlzUmVhZHkiLCJzdG9wIiwiZGlzYWJsZVBJUCIsIm5leHRQcm9wcyIsIl90aGlzMiIsIl91dGlscyIsImlzTG9hZGluZyIsImxvYWRPblJlYWR5Iiwic3RhcnRPblBsYXkiLCJvbkR1cmF0aW9uQ2FsbGVkIiwiaXNQbGF5aW5nIiwicGxheSIsInBhdXNlIiwiZW5hYmxlUElQIiwic2V0Vm9sdW1lIiwibXV0ZSIsInVubXV0ZSIsInNldFBsYXliYWNrUmF0ZSIsInNldExvb3AiLCJnZXREdXJhdGlvbiIsImdldEN1cnJlbnRUaW1lIiwiZ2V0U2Vjb25kc0xvYWRlZCIsImFtb3VudCIsIl90aGlzMyIsInNlZWtPblBsYXkiLCJkdXJhdGlvbiIsInNlZWtUbyIsImFjdGl2ZVBsYXllciIsIl90ZW1wIiwiaW5zdGFuY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJnZXRQcm90b3R5cGVPZiIsIl9pbml0aWFsaXNlUHJvcHMiLCJfcHJvcHM2IiwiX3RoaXM0IiwiZ2V0SW50ZXJuYWxQbGF5ZXIiLCJwbGF5ZWRTZWNvbmRzIiwibG9hZGVkU2Vjb25kcyIsInBsYXllZCIsImxvYWRlZCIsInByZXZQbGF5ZWQiLCJwcmV2TG9hZGVkIiwicHJvZ3Jlc3NGcmVxdWVuY3kiLCJfcHJvcHMyIiwib25EdXJhdGlvbkNoZWNrIiwiX3Byb3BzMyIsIl9wcm9wczQiLCJsb29wT25FbmRlZCIsIl9wcm9wczUiLCJfY2xhc3MiLCJfdGVtcDIiLCJTaW5nbGVQbGF5ZXIiLCJnZXRDb25maWciLCJmcmFjdGlvbiIsIl9jb25maWckZmlsZSIsInNraXBDYW5QbGF5IiwiY2FuUGxheSIsIldyYXBwZXIiLCJvdGhlclByb3BzIiwib21pdCIsIlNVUFBPUlRFRF9QUk9QUyIsIl9QbGF5ZXIyIiwiX1BsYXllciIsIl9zaW5nbGVQbGF5ZXIyIiwiX3NpbmdsZVBsYXllciIsIk1BVENIX1VSTCIsIk1BVENIX1BMQVlMSVNUIiwicGFyc2VQbGF5bGlzdCIsIl91cmwkbWF0Y2giLCJsaXN0VHlwZSIsImxpc3QiLCJZb3VUdWJlIiwiX29uRXJyb3IiLCJfY29uZmlnJHlvdXR1YmUiLCJpZCIsImxvYWRQbGF5bGlzdCIsImN1ZVZpZGVvQnlJZCIsInZpZGVvSWQiLCJzdGFydFNlY29uZHMiLCJwYXJzZVN0YXJ0VGltZSIsInN0YXJ0IiwiZW5kU2Vjb25kcyIsInBhcnNlRW5kVGltZSIsImVuZCIsImdldFNESyIsIllUIiwiY29udGFpbmVyIiwiYXV0b3BsYXkiLCJvcmlnaW4iLCJsb2NhdGlvbiIsImV2ZW50cyIsIm9uU3RhdGVDaGFuZ2UiLCJkYXRhIiwiY2FsbFBsYXllciIsInJhdGUiLCJfdGhpcyRwcm9wcyIsIl93aW5kb3ckU0RLX0dMT0JBTCRQbCIsIlBsYXllclN0YXRlIiwiUExBWUlORyIsIlBBVVNFRCIsIkJVRkZFUklORyIsIkVOREVEIiwiQ1VFRCIsImlzUGxheWxpc3QiLCJTb3VuZENsb3VkIiwiU0MiLCJpZnJhbWUiLCJfU0MkV2lkZ2V0JEV2ZW50cyIsIldpZGdldCIsIkV2ZW50cyIsIlBMQVkiLCJQTEFZX1BST0dSRVNTIiwiUEFVU0UiLCJGSU5JU0giLCJFUlJPUiIsImJpbmQiLCJjdXJyZW50VGltZSIsImN1cnJlbnRQb3NpdGlvbiIsImZyYWN0aW9uTG9hZGVkIiwibG9hZGVkUHJvZ3Jlc3MiLCJjYWxsYmFjayIsImVuY29kZVVSSUNvbXBvbmVudCIsImZyYW1lQm9yZGVyIiwiYWxsb3ciLCJNQVRDSF9GSUxFX1VSTCIsIlZpbWVvIiwicmVhZHkiLCJxdWVyeVNlbGVjdG9yIiwib24iLCJyZWZyZXNoRHVyYXRpb24iLCJzZWNvbmRzTG9hZGVkIiwicHJvbWlzZSIsIm92ZXJmbG93IiwiYmFja2dyb3VuZENvbG9yIiwiU0RLX1VSTCIsIlNES19HTE9CQUxfUkVBRFkiLCJGYWNlYm9vayIsIkZCIiwiWEZCTUwiLCJwYXJzZSIsImluaXQiLCJ4ZmJtbCIsIkV2ZW50Iiwic3Vic2NyaWJlIiwibXNnIiwicGxheWVySUQiLCJnZXRFbGVtZW50QnlJZCIsInZpc2liaWxpdHkiLCJkYXRhLWhyZWYiLCJkYXRhLWF1dG9wbGF5IiwiZGF0YS1hbGxvd2Z1bGxzY3JlZW4iLCJkYXRhLWNvbnRyb2xzIiwicmFuZG9tU3RyaW5nIiwiU3RyZWFtYWJsZSIsInBsYXllcmpzIiwicGVyY2VudCIsInNjcm9sbGluZyIsImFsbG93RnVsbFNjcmVlbiIsIldpc3RpYSIsIl9vblJlYWR5IiwiX3dxIiwiZ2V0SUQiLCJhdXRvUGxheSIsInNpbGVudEF1dG9QbGF5IiwiY29udHJvbHNWaXNpYmxlT25Mb2FkIiwidW5iaW5kIiwiTUFUQ0hfVklERU9fVVJMIiwiTUFUQ0hfQ0hBTk5FTF9VUkwiLCJUd2l0Y2giLCJpc0NoYW5uZWwiLCJzZXRDaGFubmVsIiwic2V0VmlkZW8iLCJjaGFubmVsIiwiX1R3aXRjaCRQbGF5ZXIiLCJSRUFEWSIsIk9OTElORSIsIk9GRkxJTkUiLCJEYWlseU1vdGlvbiIsIkRNIiwiYXBpcmVhZHkiLCJzZWVrZWQiLCJ2aWRlb19lbmQiLCJkdXJhdGlvbmNoYW5nZSIsIm9uRHVyYXRpb25DaGFuZ2UiLCJ3YWl0aW5nIiwiYnVmZmVyZWRUaW1lIiwiTWl4Y2xvdWQiLCJQbGF5ZXJXaWRnZXQiLCJlbmRlZCIsInF1ZXJ5IiwicXVlcnlTdHJpbmciLCJmZWVkIiwiSU9TIiwiTVNTdHJlYW0iLCJBVURJT19FWFRFTlNJT05TIiwiVklERU9fRVhURU5TSU9OUyIsIkhMU19FWFRFTlNJT05TIiwiREFTSF9FWFRFTlNJT05TIiwiTUFUQ0hfRFJPUEJPWF9VUkwiLCJpc01lZGlhU3RyZWFtIiwiRmlsZVBsYXllciIsImFkZExpc3RlbmVycyIsInNob3VsZFVzZUF1ZGlvIiwicmVtb3ZlTGlzdGVuZXJzIiwicHJldlByb3BzIiwicG9zdGVyIiwiX3Byb3BzJGNvbmZpZyRmaWxlIiwic2hvdWxkVXNlSExTIiwiSGxzIiwiaGxzIiwibG9hZFNvdXJjZSIsImF0dGFjaE1lZGlhIiwic2hvdWxkVXNlREFTSCIsImRhc2hqcyIsImRhc2giLCJNZWRpYVBsYXllciIsImluaXRpYWxpemUiLCJnZXREZWJ1ZyIsInNldExvZ1RvQnJvd3NlckNvbnNvbGUiLCJzcmNPYmplY3QiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZW1vdmVBdHRyaWJ1dGUiLCJkZXN0cm95IiwicmVzZXQiLCJyZXF1ZXN0UGljdHVyZUluUGljdHVyZSIsInBpY3R1cmVJblBpY3R1cmVFbGVtZW50IiwiZXhpdFBpY3R1cmVJblBpY3R1cmUiLCJzZWVrYWJsZSIsImJ1ZmZlcmVkIiwidXNlSExTIiwidXNlREFTSCIsIkVsZW1lbnQiLCJnZXRTb3VyY2UiLCJyZW5kZXJTb3VyY2VFbGVtZW50IiwicmVuZGVyVHJhY2siLCJpbmRleCIsInRyYWNrIiwiY2FuRW5hYmxlUElQIiwicGljdHVyZUluUGljdHVyZUVuYWJsZWQiLCJfWW91VHViZSIsIl9Tb3VuZENsb3VkIiwiX1ZpbWVvIiwiX0ZhY2Vib29rIiwiX1N0cmVhbWFibGUiLCJfV2lzdGlhIiwiX1R3aXRjaCIsIl9EYWlseU1vdGlvbiIsIl9NaXhjbG91ZCIsIl9GaWxlUGxheWVyIiwiSUNPTl9TSVpFIiwiUHJldmlldyIsImZldGNoSW1hZ2UiLCJzZXRTdGF0ZSIsImltYWdlIiwiZmV0Y2giLCJyZXNwb25zZSIsImpzb24iLCJ0aHVtYm5haWxfdXJsIiwiZmxleENlbnRlciIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInN0eWxlcyIsInByZXZpZXciLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kU2l6ZSIsImJhY2tncm91bmRQb3NpdGlvbiIsImN1cnNvciIsInNoYWRvdyIsImJhY2tncm91bmQiLCJib3JkZXJSYWRpdXMiLCJwbGF5SWNvbiIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJDb2xvciIsIm1hcmdpbkxlZnQiLCJwbGF5ZXJzIiwiUFJFTE9BRF9QTEFZRVJTIiwiY29uZmlnS2V5IiwiQ29udHJvbHMiLCJvblBsYXlQYXVzZUNsaWNrIiwicHJvY2Vzc2luZyIsIm9uUmVzZWxlY3RGaWxlIiwib25FbmNvZGUiLCJzaG93RW5jb2RlQnRuIiwiY2FuRG93bmxvYWQiLCJvbkRvd25sb2FkIiwiZnJhbWVDdXJyZW50WCIsImZyYW1lQ3VycmVudFdpZHRoIiwiZnJhbWVDdXJyZW50UGxheWVkWCIsImxlZnQiLCJfcGxheWVyczIiLCJfcGxheWVycyIsIl9QbGF5ZXI1IiwiX1BsYXllcjQiLCJfUHJldmlldzIiLCJfUHJldmlldyIsIl9wcmVsb2FkMiIsIl9wcmVsb2FkIiwiY3VzdG9tUGxheWVycyIsIlJlYWN0UGxheWVyIiwibmV4dFN0YXRlIiwic2hvd1ByZXZpZXciLCJhY3RpdmVQbGF5ZXJSZWYiLCJnZXRBY3RpdmVQbGF5ZXIiLCJyZW5kZXJlZEFjdGl2ZVBsYXllciIsInJlbmRlckFjdGl2ZVBsYXllciIsInByZWxvYWRQbGF5ZXJzIiwic29ydCIsInNvcnRQbGF5ZXJzIiwib25DbGlja1ByZXZpZXciLCJ3cmFwcGVyUmVmIiwiYWRkQ3VzdG9tUGxheWVyIiwicmVtb3ZlQ3VzdG9tUGxheWVycyIsIl9hcnIyIiwiX2kyIiwiX2FycjMiLCJfaTMiLCJfUGxheWVyMyIsInBsYXlWaWRlbyIsImxvZyIsInN0YXJ0VGltZVJhbmdlIiwidGltZVJhbmdlIiwicGxheWVkU2Vjb25kc0lzR3JlYXRlclRoYW5FbmRUaW1lIiwib25QbGF5ZXJQcm9ncmVzcyIsIm9uUGxheWVyUGF1c2UiLCJvblBsYXllclBsYXkiLCJuZXdQcm9wcyIsIm5ld1RpbWVSYW5nZSIsIm9sZFRpbWVSYW5nZSIsInRvRml4ZWQiLCJvbkNvbnRleHRNZW51IiwiaGFuZGxlT25QYXVzZSIsImhhbmRsZU9uUGxheSIsImhhbmRsZVBsYXllclByb2dyZXNzIiwiZWwiLCJkaXNwbGF5U2Vjb25kcyIsInRpbWVMaW1pdCIsInZpZER1cmF0aW9uIiwiRHJhZ2dlciIsIl9zY3JlZW5YIiwic2NyZWVuWCIsIl9zY3JlZW5ZIiwic2NyZWVuWSIsIl9veCIsIl9veSIsImhhbmRsZU1vdXNlTW92ZSIsImhhbmRsZU1vdXNlVXAiLCJvbkRyYWciLCJvbkRyYWdTdG9wIiwiUHVyZUNvbXBvbmVudCIsIm9uTW91c2VEb3duIiwiaGFuZGxlTW91c2VEb3duIiwidG9wIiwiRHJhZ2dlckNvbnRhaW5lciIsIl9vd2lkdGgiLCJUcmltbWVyT3ZlckxheSIsInJpZ2h0IiwiVGltZVN0YW1wIiwiZm9ybWF0ZWQiLCJmb3JtYXRTZWNvbmRzIiwidGltZSIsIm5vTWljcm9TZWNvbmRzIiwibnVtIiwibGVmdFplcm8iLCJUcmltbWVyIiwicG9zIiwid2lkdGhEdXJhdGlvblJhdGlvIiwiY29udGFpbmVyV2lkdGgiLCJpc0RyYWdFbmQiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwidGltZVJhbmdlTGltaXQiLCJpbnRlcnZhbCIsInBvczJUaW1lIiwia2VlcEluUmFuZ2UiLCJjdXJyZW50VGltZUlzV2l0aGluUmFuZ2UiLCJ3aXRoaW5UaW1lUmFuZ2UiLCJjdXJyZW50VGltZUlzV2l0aGluTGltaXQiLCJ3aXRoaW5UaW1lTGltaXQiLCJvblBhdXNlUGxheWVyIiwib25TdGFydFRpbWVDaGFuZ2UiLCJvbkVuZFRpbWVDaGFuZ2UiLCJvbkdldERhdGEiLCJ0aW1lMnBvcyIsImhhbmRsZURyYWdTdGFydCIsImhhbmRsZURyYWdTdG9wIiwic2V0Q3VycmVudFRpbWUiLCJoYW5kbGVEcmFnRW5kIiwiZ2V0VHJpbW1lcldpZHRoIiwiVmlkZW9UcmltbWVyIiwidHJpbW1lckhhbmRsZXIiLCJvblRyaW0iLCJjb250YWluZXJSZWYiLCJzaG93VHJpbW1lciIsImhhbmRsZVN0YXJ0VGltZUNoYW5nZSIsIm9uQ3VycmVudFRpbWVDaGFuZ2UiLCJoYW5kbGVDdXJyZW50VGltZUNoYW5nZSIsImhhbmRsZUVuZFRpbWVDaGFuZ2UiLCJoYW5kbGVHZXRUcmltRGF0YSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIkV2ZW50SGFuZGxlcnMiLCJFdmVudEVtaXR0ZXIiLCIkZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiX2FkZExpc3RlbmVyIiwibGlzdGVuZXIiLCJwcmVwZW5kIiwiZXhpc3RpbmciLCJfZXZlbnRzIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwiX2V2ZW50c0NvdW50IiwidW5zaGlmdCIsIndhcm5lZCIsImVtaXR0ZXIiLCJlbWl0V2FybmluZyIsIl9vbmNlV3JhcCIsImZpcmVkIiwicmVtb3ZlTGlzdGVuZXIiLCJsaXN0ZW5lckNvdW50IiwiZXZsaXN0ZW5lciIsImFycmF5Q2xvbmUiLCJjb3B5IiwidXNpbmdEb21haW5zIiwiZG9tYWluIiwiYWN0aXZlIiwiRG9tYWluIiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZXIiLCJoYW5kbGVyIiwibGVuIiwiZG9FcnJvciIsImRvbWFpbkVtaXR0ZXIiLCJkb21haW5UaHJvd24iLCJjb250ZXh0IiwiaXNGbiIsImxpc3RlbmVycyIsImVtaXROb25lIiwiYXJnMSIsImVtaXRPbmUiLCJhcmcyIiwiZW1pdFR3byIsImFyZzMiLCJlbWl0VGhyZWUiLCJlbWl0TWFueSIsImFkZExpc3RlbmVyIiwicHJlcGVuZExpc3RlbmVyIiwib25jZSIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJrIiwic3BsaWNlT25lIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmV0IiwidW53cmFwTGlzdGVuZXJzIiwiZXZlbnROYW1lcyIsIlJlZmxlY3QiLCJ3b3JrZXJGaWxlIiwiaW1wb3J0U2NyaXB0cyIsIm5vdyIsIkRhdGUiLCJwcmludCIsInBvc3RNZXNzYWdlIiwib25tZXNzYWdlIiwiTW9kdWxlIiwicHJpbnRFcnIiLCJUT1RBTF9NRU1PUlkiLCJ0b3RhbE1lbW9yeSIsImZmbXBlZ19ydW4iLCJ0b3RhbFRpbWUiLCJnbG9iYWwiLCJXb3JrZXIiLCJfZGVmaW5lUHJvcGVydGllcyIsIl9nZXRQcm90b3R5cGVPZiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfc2V0UHJvdG90eXBlT2YiLCJGRk1QRUdXZWJ3b3JrZXJDbGllbnQiLCJmaWxlUmVhZGVyIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJjb21tYW5kIiwiaW5wdXRGaWxlIiwiY29udmVydElucHV0RmlsZVRvQXJyYXlCdWZmZXIiLCJhcnJheUJ1ZmZlciIsIndvcmtlcklzUmVhZHkiLCJmaWxlbmFtZSIsImlucHV0Q29tbWFuZCIsIndvcmtlciIsImZpbGVUeXBlIiwiaW5jbHVkZXMiLCJpbml0V2ViV29ya2VyIiwiV29ya2VyRmlsZSIsImlucHV0RmlsZUV4aXN0cyIsInJlYWRGaWxlQXNCdWZmZXJBcnJheSIsInNldCIsIl93b3JrZXIiLCJpc1ZpZGVvIiwiX2lucHV0RmlsZSIsIndvcmtlckNsaWVudCIsIl93aW5kb3ciLCJXZWJ3b3JrZXJDbGllbnQiLCJ6ZXJvRmlsbCIsInBhZCIsIkhPVVIiLCJNSU5VVEUiLCJTRUNPTkQiLCJUSU1FX0ZPUk1BVF9FUlJNU0ciLCJmcm9tTXMiLCJtcyIsImZvcm1hdCIsIk51bWJlciIsImFic01zIiwiYWJzIiwic2hvd01zIiwic2hvd1NjIiwic2hvd0hyIiwibWlsaXNlY29uZHMiLCJob3VycyIsImhoIiwibW0iLCJtaW51dGVzIiwic3MiLCJzc3MiLCJuZWdhdGl2ZSIsImZvcm1hdFRpbWUiLCJXZWJWaWRlbyIsInZpZGVvRmlsZSIsImZyb21TIiwicnVuQ29tbWFuZCIsIl92aWRlb0ZpbGUiLCJfdmlkZW9CdWZmZXIiLCJ2aWRlb0J1ZmZlciIsImJsb2IiLCJjb252ZXJ0QnVmZmVyVG9CbG9iIiwiZGF0YVVSTCIsInJlYWRBc0RhdGFVUkwiLCJ2aWRlb09iamVjdFVybCIsIl92aWRlb0RhdGEiLCJjaHVua3MiLCJ0eXBlZEJ1ZmZlciIsInN0YXJ0Q2h1bmsiLCJfYnVmZmVyIiwiZnBzIiwic2Vla1Jlc29sdmUiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwidmlkZW9XaWR0aCIsInZpZGVvSGVpZ2h0IiwiZnJhbWVzIiwiZHJhd0ltYWdlIiwiYmFzZTY0SW1hZ2VEYXRhIiwidG9EYXRhVVJMIiwiaGFuZGxlRG9uZUNsaWVudERvbmUiLCJSZWFjdFZpZGVvVHJpbW1lciIsIndlYlZpZGVvTG9hZGVyIiwiZmZtcGVnUmVhZHkiLCJ2aWRlb0Jsb2IiLCJkZWNvZGVWaWRlb0ZpbGUiLCJvblZpZGVvRW5jb2RlIiwiZW5jb2RpbmciLCJlbmNvZGVkIiwiZW5jb2RlZFZpZGVvIiwiZGVjb2RpbmciLCJ2aWRlb0RhdGFVUkwiLCJ2aWRlb0ZyYW1lcyIsImlzRGVjb2RpbmciLCJkZWZhdWx0U3RhdGUiLCJ1cGRhdGVJc0RlY29kaW5nIiwidXBkYXRlVmlkZW9EdXJhdGlvbiIsImRvbmVDQiIsIndlYlZpZGVvIiwiZGVjb2RlIiwidXBkYXRlVmlkZW9EYXRhVVJMIiwidGltZVJhbmdlU3RhcnQiLCJ2aWRlb0RhdGEiLCJ0aW1lUmFuZ2VFbmQiLCJ0aW1lRGlmZmVyZW5jZSIsInRyaW1WaWRlbyIsImhhbmRsZVBsYXllclBsYXkiLCJoYW5kbGVQbGF5ZXJQYXVzZSIsImhhbmRsZURvd25sb2FkVmlkZW8iLCJoYW5kbGVSZXNlbGVjdEZpbGUiLCJoYW5kbGVFbmNvZGVWaWRlbyIsImhhbmRsZVBsYXlQYXVzZVZpZGVvIiwiaGFuZGxlVmlkZW9UcmltIiwibGluayIsImhyZWYiLCJyZWFkQmxvYlVSTCIsImRvd25sb2FkUGF0aCIsIlZpZGVvUGxheWVyV2l0aFRyaW1tZXIiLCJoYW5kbGVGRk1QRUdTdGRvdXQiLCJoYW5kbGVGRk1QRUdSZWFkeSIsImhhbmRsZUZGTVBFR0ZpbGVSZWNlaXZlZCIsImhhbmRsZUZGTVBFR0RvbmUiLCJsb2FkaW5nRkZNUEVHVGV4dCIsIlZpZGVvUGxheWVyTm9UcmltbWVyIiwiaGFuZGxlRmlsZVNlbGVjdGVkIiwicHJlbG9hZFdlYlZpZGVvIl0sIm1hcHBpbmdzIjoibXBFQWtCd0IsU0FBWEEsRUFBWUMsRUFBRCxPQUFPQywrQkFBUCxFQUFBLEVBQWtCLHFCQUN4QyxJQUFJQyxRQUFRLFNBQUNDLEVBQVNDLE9BQ2RDLEVBQVMsSUFBSUMsV0FDbkJELEVBQU8sU0FBV0osR0FBVUQsR0FDNUJLLEVBQU9FLE9BQVMsa0JBQU1KLEVBQVFFLEVBQU9HLFNBQ3JDSCxFQUFPSSxRQUFVLFNBQUFDLFVBQU9OLEVBQU9NLE1BMkNmLFNBQVBDLEtBRW9CLFNBQXBCQyxFQUFvQkMsVUFDL0IsSUFBSUMsS0FBSyxDQUFDLElBQUlDLFdBQVdGLEVBQVEsRUFBR0EsRUFBT0csYUFBYyxDQUN2REMsS0FBTSxhQUNOQyxLQUFNLGVDcEVPLFNBQVhDLFNBQWNDLElBQUFBLGlCQUNsQkMsdUJBQ0VELFVBQVdBLEVBQ1hFLFFBQVEsWUFDUkMsTUFBTSw4QkFFTkYsd0JBQU1HLEVBQUUsOENBQ1JILHdCQUFNRyxFQUFFLGdCQUFnQkMsS0FBSyxVQUluQixTQUFSQyxTQUFXTixJQUFBQSxpQkFDZkMsdUJBQ0VE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
